<section class="titleSlide" data-background="#168eae">
                    <h1>
    File Manipulation
</h1>
                    <a id="yetiLogo" href="http://www.yetihq.com/"><img src="/static/img/yeti-power.png"></a>
                </section>
<section>
    <h2>Brief Python History</h2>
    <p>Python is a scripting language, which means at its core it has a bunch of functionality built in for operations like file manipulation.</p>
    <ul>
        <li>Python was created by Guido van Rossum, Benevolant Dictator for Life (BDFL), in the late 1980's.</li>
        <li>Python has released major versions 1, 2, and 3</li>
        <li>Version 3 of python had some backwards incompatible changes with version 2, so they also created 2.6 and 2.7.</li>
        <li>Many people still use python 2.7 over 3, especially because major operating systems have not converted over yet.</li>
        <li>The community is still slowly making the transition from python 2 to 3 even though 3 was released in December 2008.</li>
        <li>2.7 will be the last release in the version 2 line, it was released in July 2010.</li>
    </ul>
</section>

element
<section>
<h2>Directories and Files</h2>
<p>Python has a library called <code>os</code> which contains scripting utility functions.</p>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br/><br/></li>
<li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br/><br/></li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">import os

print os.getcwd()</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="7">
<pre><code class="python">
print os.getcwd()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<ul>
<li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
<li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
</ul>
</section> element

element

element
<h2>Directories and Files</h2> element

element
<p>Python has a library called <code>os</code> which contains scripting utility functions.</p> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br/><br/></li>
<li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br/><br/></li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">import os

print os.getcwd()</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="7">
<pre><code class="python">
print os.getcwd()
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<ul>
<li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
<li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
</ul> element

element
<section>
        <h2>Directories and Files</h2>
        <p>Python has a library called <code>os</code> which contains scripting utility functions.</p>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br><br><br></li>
                <li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br><br><br></li>
                <li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br><br></li>
                <li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br><br></li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">import os

print os.getcwd()</code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="3">
                <pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="7">
                <pre><code class="python">
print os.getcwd()
                </code></pre>
            </div>
        </div>
    </section>
<section>
    <h2>Learn web development. Build awesome things.</h2>
    <p>
        You quit your job, you told your friends and family you're doing something crazy, maybe you moved here. You're ready to learn, intensively, for the next twelve weeks. By the time you're done, you'll be able to build pretty much anything you see on the internet.
    </p>
</section>
<section>
        <h2>Do it Yourself</h2>
        <ul>
            <li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
            <li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
        </ul>
    </section>

element
<section>
<h2>Reading a File</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
<li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
<li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
<li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
<li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre>

Hello world!
Hello universe!
                </pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="4">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="6">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Reading a File (Cont.)</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
<li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
<li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
<li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="2">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p>
<ul>
<li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
<li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
<li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
<li>Create new text files for testing out your function!</li>
</ul>
</section> element

element

element
<h2>Reading a File</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
<li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
<li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
<li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
<li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre>

Hello world!
Hello universe!
                </pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="4">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="6">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
</div>
</div> element

element

element
<h2>Reading a File (Cont.)</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
<li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
<li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
<li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="2">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p> element

element
<ul>
<li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
<li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
<li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
<li>Create new text files for testing out your function!</li>
</ul> element

element
<section>
        <h2>Reading a File</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
                <li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
                <li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
                <li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
                <li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre>

Hello world!
Hello universe!
                </pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="4">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="6">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
            </div>
        </div>
    </section>

element
<section>
<h2>What you'll be learning</h2>
<p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p>
<ul>
<li><a href="#/2/1">Prework</a></li>
<li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
<li><a href="#/2/3">Integrating JavaScript and Design</a></li>
<li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
<li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
<li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
</ul>
</section> element

element
<section>
<h2>Prework</h2>
<p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p>
<ul>
<li>Command Line: Give your computer instructions like a real programmer</li>
<li>HTML: Learn the basic building blocks of the front-facing web</li>
<li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
<li>Git: Version control is a lifesaver</li>
<li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
<li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
<li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
</ul>
</section> element

element
<section>
<h2>Object-oriented Python and Beginner Django</h2>
<ul>
<li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
<li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
<li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
<li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
<li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
<li>Project: Build a Django application with user authentication and database storage</li>
</ul>
</section> element

element
<section>
<h2>Integrating JavaScript and Design</h2>
<ul>
<li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
<li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
<li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
<li>Using third-party APIs: Query external services like Google and Instagram</li>
<li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
<li>Project: Integrate front-end technologies for a more interactive Django application</li>
</ul>
</section> element

element
<section>
<h2>Expand Your Developer Toolkit</h2>
<ul>
<li>Pair programming</li>
<li>Git strategies</li>
<li>Test-driven development</li>
<li>HTTP lifecycle</li>
<li>Computer science topics</li>
<li>Introduction to dev ops</li>
<li>Analytics and error reporting</li>
<li>Project: Work in a group to build a test-driven Django application</li>
</ul>
</section> element

element
<section>
<h2>AngularJS and Building Custom APIs</h2>
<ul>
<li>Basics of AngularJS</li>
<li>Build a Basecamp clone with AngularJS</li>
<li>Building your own custom API with Django and Tastypie</li>
<li>Integrating Django with AngularJS</li>
<li>Final Project: Demonstrate mastery with Django and AngularJS</li>
</ul>
</section> element

element
<section>
<h2>Prepping for Life After Bootcamp</h2>
<ul>
<li>Interview Prep</li>
<li>Presentation Prep</li>
<li>Development ecosystem</li>
</ul>
<p><a href="#/2">Back to top</a></p>
</section> element

element

element
<h2>What you'll be learning</h2> element

element
<p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p> element

element
<ul>
<li><a href="#/2/1">Prework</a></li>
<li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
<li><a href="#/2/3">Integrating JavaScript and Design</a></li>
<li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
<li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
<li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
</ul> element

element

element
<h2>Prework</h2> element

element
<p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p> element

element
<ul>
<li>Command Line: Give your computer instructions like a real programmer</li>
<li>HTML: Learn the basic building blocks of the front-facing web</li>
<li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
<li>Git: Version control is a lifesaver</li>
<li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
<li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
<li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
</ul> element

element

element
<h2>Object-oriented Python and Beginner Django</h2> element

element
<ul>
<li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
<li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
<li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
<li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
<li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
<li>Project: Build a Django application with user authentication and database storage</li>
</ul> element

element

element
<h2>Integrating JavaScript and Design</h2> element

element
<ul>
<li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
<li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
<li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
<li>Using third-party APIs: Query external services like Google and Instagram</li>
<li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
<li>Project: Integrate front-end technologies for a more interactive Django application</li>
</ul> element

element

element
<h2>Expand Your Developer Toolkit</h2> element

element
<ul>
<li>Pair programming</li>
<li>Git strategies</li>
<li>Test-driven development</li>
<li>HTTP lifecycle</li>
<li>Computer science topics</li>
<li>Introduction to dev ops</li>
<li>Analytics and error reporting</li>
<li>Project: Work in a group to build a test-driven Django application</li>
</ul> element

element

element
<h2>AngularJS and Building Custom APIs</h2> element

element
<ul>
<li>Basics of AngularJS</li>
<li>Build a Basecamp clone with AngularJS</li>
<li>Building your own custom API with Django and Tastypie</li>
<li>Integrating Django with AngularJS</li>
<li>Final Project: Demonstrate mastery with Django and AngularJS</li>
</ul> element

element

element
<h2>Prepping for Life After Bootcamp</h2> element

element
<ul>
<li>Interview Prep</li>
<li>Presentation Prep</li>
<li>Development ecosystem</li>
</ul> element

element
<p><a href="#/2">Back to top</a></p> element

element
<section>
        <h2>What you'll be learning</h2>
        <p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p>
        <ul>
            <li><a href="#/2/1">Prework</a></li>
            <li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
            <li><a href="#/2/3">Integrating JavaScript and Design</a></li>
            <li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
            <li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
            <li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
        </ul>
    </section>
<section>
        <h2>Reading a File (Cont.)</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
                <li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
                <li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
                <li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="2">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p>
        <ul>
            <li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
            <li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
            <li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
            <li>Create new text files for testing out your function!</li>
        </ul>
    </section>

element
<section>
<h2>Writing a File</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
<li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
<li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Writing a File (Cont.)</h2>
<div class="col-4">
<br/>
<ul>
<li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Context Manager</h2>
<p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p>
<p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p>
<p>They are used to run certain functions before and after a block of code.</p>
<br/><br/>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
<li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
<li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p>
<p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p>
<div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div>
<p style="clear:both;"><br/>Will become</p>
<div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div>
<p style="clear:both"><br/>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p>
<div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div>
</section> element

element

element
<h2>Writing a File</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
<li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
<li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
</div>
</div> element

element

element
<h2>Writing a File (Cont.)</h2> element

element
<div class="col-4">
<br/>
<ul>
<li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
</div>
</div> element

element

element
<h2>Context Manager</h2> element

element
<p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p> element

element
<p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p> element

element
<p>They are used to run certain functions before and after a block of code.</p> element

element
<br/> element
<br/> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
<li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
<li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p> element

element
<p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p> element

element
<div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div> element

element
<p style="clear:both;"><br/>Will become</p> element

element
<div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div> element

element
<p style="clear:both"><br/>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p> element

element
<div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div> element

element
<section>
        <h2>Writing a File</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
                <li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
                <li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Prework</h2>
        <p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p>
        <ul>
            <li>Command Line: Give your computer instructions like a real programmer</li>
            <li>HTML: Learn the basic building blocks of the front-facing web</li>
            <li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
            <li>Git: Version control is a lifesaver</li>
            <li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
            <li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
            <li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
        </ul>
    </section>
<section>
        <h2>Object-oriented Python and Beginner Django</h2>
        <ul>
            <li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
            <li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
            <li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
            <li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
            <li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
            <li>Project: Build a Django application with user authentication and database storage</li>
        </ul>
    </section>
<section class="titleSlide" data-background="#168eae">
                    <h1>
    Basic Django App: Edit &amp; Delete
</h1>
                    <a id="yetiLogo" href="http://www.yetihq.com/"><img src="/static/img/yeti-power.png"></a>
                </section>
<section>
        <h2>Writing a File (Cont.)</h2>
        <div class="col-4">
            <br>
            <ul>
                <li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br><br><br><br><br></li>
                <li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br><br><br><br><br></li>
                <li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="3">
                <pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Integrating JavaScript and Design</h2>
        <ul>
            <li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
            <li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
            <li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
            <li>Using third-party APIs: Query external services like Google and Instagram</li>
            <li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
            <li>Project: Integrate front-end technologies for a more interactive Django application</li>
        </ul>
    </section>
<section>
    <h2>Laying out our application</h2>
    <p>Our Django app will have this site map. This basic layout can be found in many applications.</p>
    <img src="/static/img/hollywood_site_map.png">
</section>

element
<section>
<h2>Editing existing records</h2>
<p>Editing an existing object is a bit of a combination of the create view and the detail view -- you need a form to edit and process, but you are also finding an existing record.</p>
<p>Let's start by adding our route.</p>
<pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/edit/$', 'hollywood.views.edit_genre', name='edit_genre'),
)
        </code></pre>
</section> element

element
<section>
<h2>Editing existing records</h2>
<pre><code>
def edit_genre(request, genre_id):
    # Similar to the the detail view, we have to find the existing genre we are editing
    genre = Genre.objects.get(id=genre_id)

    # We still check to see if we are submitting the form
    if request.method == "POST":
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(request.POST, instance=genre)
        if form.is_valid():
            if form.save():
                return redirect("/genres/{}".format(genre_id))

    # Or just viewing the form
    else:
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(instance=genre)
    data = {"genre": genre, "form": form}
    return render(request, "genres/edit_genre.html", data)
        </code></pre>
</section> element

element
<section>
<h2>Editing existing records</h2>
<div>
<div class="col-3">
<p>Our edit template looks almost identical to our create template because it has the form, but when you actually load the page, the form will be prefilled.</p>
</div>
<div class="col-8 col-offset-1">
<h4>edit_genre.html</h4>
<pre><code>
<h1>Edit genre {{ genre.name }}</h1>
<form method="post">
    {% csrf_token %}
    {{ form }}
    <input type="submit" value="Update genre"/>
</form>
                </code></pre>
</div>
</div>
<div class="fragment">
<div class="col-3">
<p>Let's also update our detail view so that it's easy to edit a record we are looking at.</p>
</div>
<div class="col-8 col-offset-1">
<h4>view_genre.html</h4>
<pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it yourself</h2>
<p>Add edit functionality for movies and actors.</p>
</section> element

element

element
<h2>Editing existing records</h2> element

element
<p>Editing an existing object is a bit of a combination of the create view and the detail view -- you need a form to edit and process, but you are also finding an existing record.</p> element

element
<p>Let's start by adding our route.</p> element

element
<pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/edit/$', 'hollywood.views.edit_genre', name='edit_genre'),
)
        </code></pre> element

element

element
<h2>Editing existing records</h2> element

element
<pre><code>
def edit_genre(request, genre_id):
    # Similar to the the detail view, we have to find the existing genre we are editing
    genre = Genre.objects.get(id=genre_id)

    # We still check to see if we are submitting the form
    if request.method == "POST":
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(request.POST, instance=genre)
        if form.is_valid():
            if form.save():
                return redirect("/genres/{}".format(genre_id))

    # Or just viewing the form
    else:
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(instance=genre)
    data = {"genre": genre, "form": form}
    return render(request, "genres/edit_genre.html", data)
        </code></pre> element

element

element
<h2>Editing existing records</h2> element

element
<div>
<div class="col-3">
<p>Our edit template looks almost identical to our create template because it has the form, but when you actually load the page, the form will be prefilled.</p>
</div>
<div class="col-8 col-offset-1">
<h4>edit_genre.html</h4>
<pre><code>
<h1>Edit genre {{ genre.name }}</h1>
<form method="post">
    {% csrf_token %}
    {{ form }}
    <input type="submit" value="Update genre"/>
</form>
                </code></pre>
</div>
</div> element

element
<div class="fragment">
<div class="col-3">
<p>Let's also update our detail view so that it's easy to edit a record we are looking at.</p>
</div>
<div class="col-8 col-offset-1">
<h4>view_genre.html</h4>
<pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
</div>
</div> element

element

element
<h2>Do it yourself</h2> element

element
<p>Add edit functionality for movies and actors.</p> element

element
<section>
        <h2>Editing existing records</h2>
        <p>Editing an existing object is a bit of a combination of the create view and the detail view -- you need a form to edit and process, but you are also finding an existing record.</p>
        <p>Let's start by adding our route.</p>
        <pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/edit/$', 'hollywood.views.edit_genre', name='edit_genre'),
)
        </code></pre>
    </section>
<section>
        <h2>Editing existing records</h2>
        <pre><code>
def edit_genre(request, genre_id):
    # Similar to the the detail view, we have to find the existing genre we are editing
    genre = Genre.objects.get(id=genre_id)

    # We still check to see if we are submitting the form
    if request.method == "POST":
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(request.POST, instance=genre)
        if form.is_valid():
            if form.save():
                return redirect("/genres/{}".format(genre_id))

    # Or just viewing the form
    else:
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(instance=genre)
    data = {"genre": genre, "form": form}
    return render(request, "genres/edit_genre.html", data)
        </code></pre>
    </section>
<section>
        <h2>Editing existing records</h2>
        <div>
            <div class="col-3">
                <p>Our edit template looks almost identical to our create template because it has the form, but when you actually load the page, the form will be prefilled.</p>
            </div>
            <div class="col-8 col-offset-1">
                <h4>edit_genre.html</h4>
                <pre><code>
<h1>Edit genre {{ genre.name }}</h1>
<form method="post">
    {% csrf_token %}
    {{ form }}
    <input type="submit" value="Update genre">
</form>
                </code></pre>
            </div>
        </div>
        <div class="fragment">
            <div class="col-3">
                <p>Let's also update our detail view so that it's easy to edit a record we are looking at.</p>
            </div>
            <div class="col-8 col-offset-1">
                <h4>view_genre.html</h4>
                <pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Context Manager</h2>
        <p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p>
        <p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p>
        <p>They are used to run certain functions before and after a block of code.</p>
        <br><br>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
                <li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
                <li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p>
        <p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p>
        <div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div>
        <p style="clear:both;"><br>Will become</p>
        <div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div>
        <p style="clear:both"><br>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p>
        <div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div>
    </section>
<section class="titleSlide" data-background="#168eae">
                    <h1>
    File Manipulation
</h1>
                    <a id="yetiLogo" href="http://www.yetihq.com/"><img src="/static/img/yeti-power.png"></a>
                </section>
<section>
    <h2>Brief Python History</h2>
    <p>Python is a scripting language, which means at its core it has a bunch of functionality built in for operations like file manipulation.</p>
    <ul>
        <li>Python was created by Guido van Rossum, Benevolant Dictator for Life (BDFL), in the late 1980's.</li>
        <li>Python has released major versions 1, 2, and 3</li>
        <li>Version 3 of python had some backwards incompatible changes with version 2, so they also created 2.6 and 2.7.</li>
        <li>Many people still use python 2.7 over 3, especially because major operating systems have not converted over yet.</li>
        <li>The community is still slowly making the transition from python 2 to 3 even though 3 was released in December 2008.</li>
        <li>2.7 will be the last release in the version 2 line, it was released in July 2010.</li>
    </ul>
</section>
<section>
        <h2>Expand Your Developer Toolkit</h2>
        <ul>
            <li>Pair programming</li>
            <li>Git strategies</li>
            <li>Test-driven development</li>
            <li>HTTP lifecycle</li>
            <li>Computer science topics</li>
            <li>Introduction to dev ops</li>
            <li>Analytics and error reporting</li>
            <li>Project: Work in a group to build a test-driven Django application</li>
        </ul>
    </section>
<section>
        <h2>AngularJS and Building Custom APIs</h2>
        <ul>
            <li>Basics of AngularJS</li>
            <li>Build a Basecamp clone with AngularJS</li>
            <li>Building your own custom API with Django and Tastypie</li>
            <li>Integrating Django with AngularJS</li>
            <li>Final Project: Demonstrate mastery with Django and AngularJS</li>
        </ul>
    </section>
<section>
        <h2>Prepping for Life After Bootcamp</h2>
        <ul>
            <li>Interview Prep</li>
            <li>Presentation Prep</li>
            <li>Development ecosystem</li>
        </ul>
        <p><a href="#/2">Back to top</a></p>
    </section>
<section>
        <h2>Do it yourself</h2>
        <p>Add edit functionality for movies and actors.</p>
    </section>

element
<section>
<h2>Deleting records</h2>
<p>Last but not least, we want to be able to delete records as well.</p>
<h4>urls.py</h4>
<pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/delete/$', 'hollywood.views.delete_genre', name='delete_genre'),
)
        </code></pre>
<p>This should be starting to look quite repetitive -- that's a good thing.</p>
</section> element

element
<section>
<h2>Deleting records</h2>
<div>
<div class="col-4">
<p>Deleting works a little differently. We don't actually need to go to a page to delete an object, we can simply delete the object in the view, and then redirect the user to the index page.</p>
</div>
<div class="col-7 col-offset-1">
<h4>views.py</h4>
<pre><code>
def delete_genre(request, genre_id):
    genre = Genre.objects.get(id=genre_id)
    genre.delete()
    return redirect("/genres")
                </code></pre>
</div>
</div>
<div class="fragment">
<div class="col-4">
<p>As we did with edit, let's update the detail template so we can easily access the delete action.</p>
</div>
<div class="col-7 col-offset-1">
<h4>view_genre.html</h4>
<pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;a href="{% url "delete_genre" genre.id %}"&gt;Delete genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it yourself</h2>
<p>Guess what? Add delete functionality for actors and movies!</p>
</section> element

element

element
<h2>Deleting records</h2> element

element
<p>Last but not least, we want to be able to delete records as well.</p> element

element
<h4>urls.py</h4> element

element
<pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/delete/$', 'hollywood.views.delete_genre', name='delete_genre'),
)
        </code></pre> element

element
<p>This should be starting to look quite repetitive -- that's a good thing.</p> element

element

element
<h2>Deleting records</h2> element

element
<div>
<div class="col-4">
<p>Deleting works a little differently. We don't actually need to go to a page to delete an object, we can simply delete the object in the view, and then redirect the user to the index page.</p>
</div>
<div class="col-7 col-offset-1">
<h4>views.py</h4>
<pre><code>
def delete_genre(request, genre_id):
    genre = Genre.objects.get(id=genre_id)
    genre.delete()
    return redirect("/genres")
                </code></pre>
</div>
</div> element

element
<div class="fragment">
<div class="col-4">
<p>As we did with edit, let's update the detail template so we can easily access the delete action.</p>
</div>
<div class="col-7 col-offset-1">
<h4>view_genre.html</h4>
<pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;a href="{% url "delete_genre" genre.id %}"&gt;Delete genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
</div>
</div> element

element

element
<h2>Do it yourself</h2> element

element
<p>Guess what? Add delete functionality for actors and movies!</p> element

element
<section>
        <h2>Deleting records</h2>
        <p>Last but not least, we want to be able to delete records as well.</p>
        <h4>urls.py</h4>
        <pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/delete/$', 'hollywood.views.delete_genre', name='delete_genre'),
)
        </code></pre>
        <p>This should be starting to look quite repetitive -- that's a good thing.</p>
    </section>

element
<section>
<h2>Directories and Files</h2>
<p>Python has a library called <code>os</code> which contains scripting utility functions.</p>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br/><br/></li>
<li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br/><br/></li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">import os

print os.getcwd()</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="7">
<pre><code class="python">
print os.getcwd()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<ul>
<li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
<li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
</ul>
</section> element

element

element
<h2>Directories and Files</h2> element

element
<p>Python has a library called <code>os</code> which contains scripting utility functions.</p> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br/><br/></li>
<li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br/><br/></li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">import os

print os.getcwd()</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="7">
<pre><code class="python">
print os.getcwd()
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<ul>
<li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
<li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
</ul> element

element
<section>
        <h2>Directories and Files</h2>
        <p>Python has a library called <code>os</code> which contains scripting utility functions.</p>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br><br><br></li>
                <li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br><br><br></li>
                <li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br><br></li>
                <li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br><br></li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">import os

print os.getcwd()</code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="3">
                <pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="7">
                <pre><code class="python">
print os.getcwd()
                </code></pre>
            </div>
        </div>
    </section>
<section>
    <h2>More than an education</h2>
    <p>There are a lot of bootcamps out there. At RocketU, you'll be surrounded by the 170+ amazing tech startups at RocketSpace.</p>
    <br>
    <img src="/static/img/rocketspace-name-logo-large-300x116.png" id="rocketSpaceLogo">
</section>

element
<section>
<h2>A network of your own</h2>
<p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p>
</section> element

element
<section>
<h2>RocketSpace staff</h2>
</section> element

element
<section>
<h2>Your instructors</h2>
<h4>Yeti</h4>
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div>
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div>
<div class="footer">
</div>
</section> element

element
<h2>A network of your own</h2> element

element
<p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p> element

element

element
<h2>RocketSpace staff</h2> element

element

element
<h2>Your instructors</h2> element

element
<h4>Yeti</h4> element

element
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div> element

element
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div> element

element
<div class="footer">
</div> element

element

element
<h2>Your classmates</h2> element

element
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul> element

element
<p><a href="#/4">Back to top</a></p> element

element

element
<h2>Prove you can program.</h2> element

element
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p> element

element
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p> element

element
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul> element

element
<section>
        <h2>A network of your own</h2>
        <p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p>
    </section>
<section>
        <h2>Deleting records</h2>
        <div>
            <div class="col-4">
                <p>Deleting works a little differently. We don't actually need to go to a page to delete an object, we can simply delete the object in the view, and then redirect the user to the index page.</p>
            </div>
            <div class="col-7 col-offset-1">
                <h4>views.py</h4>
                <pre><code>
def delete_genre(request, genre_id):
    genre = Genre.objects.get(id=genre_id)
    genre.delete()
    return redirect("/genres")
                </code></pre>
            </div>
        </div>
        <div class="fragment">
            <div class="col-4">
                <p>As we did with edit, let's update the detail template so we can easily access the delete action.</p>
            </div>
            <div class="col-7 col-offset-1">
                <h4>view_genre.html</h4>
                <pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;a href="{% url "delete_genre" genre.id %}"&gt;Delete genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it yourself</h2>
        <p>Guess what? Add delete functionality for actors and movies!</p>
    </section>
<section>
    <h2>Recap: Basic Django app</h2>
    <p>Congratulations! You made a Django project. It's simple, but captures the functionality that powers most applications you use on the web and in mobile apps.</p>
    <p>You'll start to notice routes just like the ones you created all over the web.</p>
    <h4>urls.py</h4>
    <pre><code>
urlpatterns = patterns('',
    url(r'^genres/$', 'hollywood.views.genres', name='genres'),
    url(r'^genres/new/$', 'hollywood.views.new_genre', name='new_genre'),
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/$', 'hollywood.views.view_genre', name='view_genre'),
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/edit/$', 'hollywood.views.edit_genre', name='edit_genre'),
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/delete/$', 'hollywood.views.delete_genre', name='delete_genre'),
)
    </code></pre>
</section>
<section class="titleSlide" data-background="#168eae">
                    <h1>
    Basic Django App: Edit &amp; Delete
</h1>
                    <a id="yetiLogo" href="http://www.yetihq.com/"><img src="/static/img/yeti-power.png"></a>
                </section>
<section>
    <h2>Laying out our application</h2>
    <p>Our Django app will have this site map. This basic layout can be found in many applications.</p>
    <img src="/static/img/hollywood_site_map.png">
</section>
<section>
        <h2>Do it Yourself</h2>
        <ul>
            <li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
            <li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
        </ul>
    </section>

element
<section>
<h2>Reading a File</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
<li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
<li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
<li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
<li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre>

Hello world!
Hello universe!
                </pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="4">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="6">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Reading a File (Cont.)</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
<li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
<li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
<li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="2">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p>
<ul>
<li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
<li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
<li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
<li>Create new text files for testing out your function!</li>
</ul>
</section> element

element

element
<h2>Reading a File</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
<li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
<li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
<li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
<li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre>

Hello world!
Hello universe!
                </pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="4">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="6">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
</div>
</div> element

element

element
<h2>Reading a File (Cont.)</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
<li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
<li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
<li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="2">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p> element

element
<ul>
<li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
<li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
<li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
<li>Create new text files for testing out your function!</li>
</ul> element

element
<section>
        <h2>Reading a File</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
                <li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
                <li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
                <li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
                <li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre>

Hello world!
Hello universe!
                </pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="4">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="6">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>RocketSpace staff</h2>
    </section>

element
<h2>Your instructors</h2> element

element
<h4>Yeti</h4> element

element
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div> element

element
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div> element

element
<div class="footer">
</div> element

element

element
<h2>Your classmates</h2> element

element
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul> element

element
<p><a href="#/4">Back to top</a></p> element

element

element
<h2>Prove you can program.</h2> element

element
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p> element

element
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p> element

element
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul> element

element
<section>
        <h2>Your classmates</h2>
        <ul>
            <li>A brain</li>
            <li>An athlete</li>
            <li>A basket case</li>
            <li>A princess</li>
            <li>And a criminal</li>
        </ul>
        <p><a href="#/4">Back to top</a></p>
    </section>

element
<section>
<h2>Editing existing records</h2>
<p>Editing an existing object is a bit of a combination of the create view and the detail view -- you need a form to edit and process, but you are also finding an existing record.</p>
<p>Let's start by adding our route.</p>
<pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/edit/$', 'hollywood.views.edit_genre', name='edit_genre'),
)
        </code></pre>
</section> element

element
<section>
<h2>Editing existing records</h2>
<pre><code>
def edit_genre(request, genre_id):
    # Similar to the the detail view, we have to find the existing genre we are editing
    genre = Genre.objects.get(id=genre_id)

    # We still check to see if we are submitting the form
    if request.method == "POST":
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(request.POST, instance=genre)
        if form.is_valid():
            if form.save():
                return redirect("/genres/{}".format(genre_id))

    # Or just viewing the form
    else:
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(instance=genre)
    data = {"genre": genre, "form": form}
    return render(request, "genres/edit_genre.html", data)
        </code></pre>
</section> element

element
<section>
<h2>Editing existing records</h2>
<div>
<div class="col-3">
<p>Our edit template looks almost identical to our create template because it has the form, but when you actually load the page, the form will be prefilled.</p>
</div>
<div class="col-8 col-offset-1">
<h4>edit_genre.html</h4>
<pre><code>
<h1>Edit genre {{ genre.name }}</h1>
<form method="post">
    {% csrf_token %}
    {{ form }}
    <input type="submit" value="Update genre"/>
</form>
                </code></pre>
</div>
</div>
<div class="fragment">
<div class="col-3">
<p>Let's also update our detail view so that it's easy to edit a record we are looking at.</p>
</div>
<div class="col-8 col-offset-1">
<h4>view_genre.html</h4>
<pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it yourself</h2>
<p>Add edit functionality for movies and actors.</p>
</section> element

element

element
<h2>Editing existing records</h2> element

element
<p>Editing an existing object is a bit of a combination of the create view and the detail view -- you need a form to edit and process, but you are also finding an existing record.</p> element

element
<p>Let's start by adding our route.</p> element

element
<pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/edit/$', 'hollywood.views.edit_genre', name='edit_genre'),
)
        </code></pre> element

element

element
<h2>Editing existing records</h2> element

element
<pre><code>
def edit_genre(request, genre_id):
    # Similar to the the detail view, we have to find the existing genre we are editing
    genre = Genre.objects.get(id=genre_id)

    # We still check to see if we are submitting the form
    if request.method == "POST":
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(request.POST, instance=genre)
        if form.is_valid():
            if form.save():
                return redirect("/genres/{}".format(genre_id))

    # Or just viewing the form
    else:
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(instance=genre)
    data = {"genre": genre, "form": form}
    return render(request, "genres/edit_genre.html", data)
        </code></pre> element

element

element
<h2>Editing existing records</h2> element

element
<div>
<div class="col-3">
<p>Our edit template looks almost identical to our create template because it has the form, but when you actually load the page, the form will be prefilled.</p>
</div>
<div class="col-8 col-offset-1">
<h4>edit_genre.html</h4>
<pre><code>
<h1>Edit genre {{ genre.name }}</h1>
<form method="post">
    {% csrf_token %}
    {{ form }}
    <input type="submit" value="Update genre"/>
</form>
                </code></pre>
</div>
</div> element

element
<div class="fragment">
<div class="col-3">
<p>Let's also update our detail view so that it's easy to edit a record we are looking at.</p>
</div>
<div class="col-8 col-offset-1">
<h4>view_genre.html</h4>
<pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
</div>
</div> element

element

element
<h2>Do it yourself</h2> element

element
<p>Add edit functionality for movies and actors.</p> element

element
<section>
        <h2>Editing existing records</h2>
        <p>Editing an existing object is a bit of a combination of the create view and the detail view -- you need a form to edit and process, but you are also finding an existing record.</p>
        <p>Let's start by adding our route.</p>
        <pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/edit/$', 'hollywood.views.edit_genre', name='edit_genre'),
)
        </code></pre>
    </section>
<section>
        <h2>Editing existing records</h2>
        <pre><code>
def edit_genre(request, genre_id):
    # Similar to the the detail view, we have to find the existing genre we are editing
    genre = Genre.objects.get(id=genre_id)

    # We still check to see if we are submitting the form
    if request.method == "POST":
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(request.POST, instance=genre)
        if form.is_valid():
            if form.save():
                return redirect("/genres/{}".format(genre_id))

    # Or just viewing the form
    else:
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(instance=genre)
    data = {"genre": genre, "form": form}
    return render(request, "genres/edit_genre.html", data)
        </code></pre>
    </section>
<section>
        <h2>Editing existing records</h2>
        <div>
            <div class="col-3">
                <p>Our edit template looks almost identical to our create template because it has the form, but when you actually load the page, the form will be prefilled.</p>
            </div>
            <div class="col-8 col-offset-1">
                <h4>edit_genre.html</h4>
                <pre><code>
<h1>Edit genre {{ genre.name }}</h1>
<form method="post">
    {% csrf_token %}
    {{ form }}
    <input type="submit" value="Update genre">
</form>
                </code></pre>
            </div>
        </div>
        <div class="fragment">
            <div class="col-3">
                <p>Let's also update our detail view so that it's easy to edit a record we are looking at.</p>
            </div>
            <div class="col-8 col-offset-1">
                <h4>view_genre.html</h4>
                <pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Reading a File (Cont.)</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
                <li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
                <li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
                <li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="2">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p>
        <ul>
            <li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
            <li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
            <li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
            <li>Create new text files for testing out your function!</li>
        </ul>
    </section>

element
<section>
<h2>Writing a File</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
<li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
<li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Writing a File (Cont.)</h2>
<div class="col-4">
<br/>
<ul>
<li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Context Manager</h2>
<p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p>
<p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p>
<p>They are used to run certain functions before and after a block of code.</p>
<br/><br/>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
<li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
<li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p>
<p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p>
<div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div>
<p style="clear:both;"><br/>Will become</p>
<div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div>
<p style="clear:both"><br/>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p>
<div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div>
</section> element

element

element
<h2>Writing a File</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
<li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
<li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
</div>
</div> element

element

element
<h2>Writing a File (Cont.)</h2> element

element
<div class="col-4">
<br/>
<ul>
<li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
</div>
</div> element

element

element
<h2>Context Manager</h2> element

element
<p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p> element

element
<p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p> element

element
<p>They are used to run certain functions before and after a block of code.</p> element

element
<br/> element
<br/> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
<li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
<li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p> element

element
<p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p> element

element
<div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div> element

element
<p style="clear:both;"><br/>Will become</p> element

element
<div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div> element

element
<p style="clear:both"><br/>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p> element

element
<div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div> element

element
<section>
        <h2>Writing a File</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
                <li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
                <li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
            </div>
        </div>
    </section>
<section>
    <h2>Prove you can program.</h2>
    <p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
    <p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
    <ul>
        <li><a target="_blank" href="http://codingbat.com/python">Coding Bat</a></li>
        <li><a target="_blank" href="http://www.pythonchallenge.com/">Python Challenge</a></li>
        <li><a target="_blank" href="http://www.coderbyte.com/">Coderbyte</a></li>
    </ul>
</section>
<section>
    <h2>Learn web development. Build awesome things.</h2>
    <p>
        You quit your job, you told your friends and family you're doing something crazy, maybe you moved here. You're ready to learn, intensively, for the next twelve weeks. By the time you're done, you'll be able to build pretty much anything you see on the internet.
    </p>
</section>

element
<section>
<h2>What you'll be learning</h2>
<p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p>
<ul>
<li><a href="#/2/1">Prework</a></li>
<li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
<li><a href="#/2/3">Integrating JavaScript and Design</a></li>
<li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
<li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
<li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
</ul>
</section> element

element
<section>
<h2>Prework</h2>
<p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p>
<ul>
<li>Command Line: Give your computer instructions like a real programmer</li>
<li>HTML: Learn the basic building blocks of the front-facing web</li>
<li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
<li>Git: Version control is a lifesaver</li>
<li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
<li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
<li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
</ul>
</section> element

element
<section>
<h2>Object-oriented Python and Beginner Django</h2>
<ul>
<li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
<li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
<li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
<li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
<li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
<li>Project: Build a Django application with user authentication and database storage</li>
</ul>
</section> element

element
<section>
<h2>Integrating JavaScript and Design</h2>
<ul>
<li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
<li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
<li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
<li>Using third-party APIs: Query external services like Google and Instagram</li>
<li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
<li>Project: Integrate front-end technologies for a more interactive Django application</li>
</ul>
</section> element

element
<section>
<h2>Expand Your Developer Toolkit</h2>
<ul>
<li>Pair programming</li>
<li>Git strategies</li>
<li>Test-driven development</li>
<li>HTTP lifecycle</li>
<li>Computer science topics</li>
<li>Introduction to dev ops</li>
<li>Analytics and error reporting</li>
<li>Project: Work in a group to build a test-driven Django application</li>
</ul>
</section> element

element
<section>
<h2>AngularJS and Building Custom APIs</h2>
<ul>
<li>Basics of AngularJS</li>
<li>Build a Basecamp clone with AngularJS</li>
<li>Building your own custom API with Django and Tastypie</li>
<li>Integrating Django with AngularJS</li>
<li>Final Project: Demonstrate mastery with Django and AngularJS</li>
</ul>
</section> element

element
<section>
<h2>Prepping for Life After Bootcamp</h2>
<ul>
<li>Interview Prep</li>
<li>Presentation Prep</li>
<li>Development ecosystem</li>
</ul>
<p><a href="#/2">Back to top</a></p>
</section> element

element

element
<h2>What you'll be learning</h2> element

element
<p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p> element

element
<ul>
<li><a href="#/2/1">Prework</a></li>
<li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
<li><a href="#/2/3">Integrating JavaScript and Design</a></li>
<li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
<li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
<li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
</ul> element

element

element
<h2>Prework</h2> element

element
<p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p> element

element
<ul>
<li>Command Line: Give your computer instructions like a real programmer</li>
<li>HTML: Learn the basic building blocks of the front-facing web</li>
<li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
<li>Git: Version control is a lifesaver</li>
<li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
<li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
<li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
</ul> element

element

element
<h2>Object-oriented Python and Beginner Django</h2> element

element
<ul>
<li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
<li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
<li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
<li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
<li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
<li>Project: Build a Django application with user authentication and database storage</li>
</ul> element

element

element
<h2>Integrating JavaScript and Design</h2> element

element
<ul>
<li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
<li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
<li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
<li>Using third-party APIs: Query external services like Google and Instagram</li>
<li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
<li>Project: Integrate front-end technologies for a more interactive Django application</li>
</ul> element

element

element
<h2>Expand Your Developer Toolkit</h2> element

element
<ul>
<li>Pair programming</li>
<li>Git strategies</li>
<li>Test-driven development</li>
<li>HTTP lifecycle</li>
<li>Computer science topics</li>
<li>Introduction to dev ops</li>
<li>Analytics and error reporting</li>
<li>Project: Work in a group to build a test-driven Django application</li>
</ul> element

element

element
<h2>AngularJS and Building Custom APIs</h2> element

element
<ul>
<li>Basics of AngularJS</li>
<li>Build a Basecamp clone with AngularJS</li>
<li>Building your own custom API with Django and Tastypie</li>
<li>Integrating Django with AngularJS</li>
<li>Final Project: Demonstrate mastery with Django and AngularJS</li>
</ul> element

element

element
<h2>Prepping for Life After Bootcamp</h2> element

element
<ul>
<li>Interview Prep</li>
<li>Presentation Prep</li>
<li>Development ecosystem</li>
</ul> element

element
<p><a href="#/2">Back to top</a></p> element

element
<section>
        <h2>What you'll be learning</h2>
        <p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p>
        <ul>
            <li><a href="#/2/1">Prework</a></li>
            <li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
            <li><a href="#/2/3">Integrating JavaScript and Design</a></li>
            <li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
            <li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
            <li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
        </ul>
    </section>
<section>
        <h2>Do it yourself</h2>
        <p>Add edit functionality for movies and actors.</p>
    </section>

element
<section>
<h2>Deleting records</h2>
<p>Last but not least, we want to be able to delete records as well.</p>
<h4>urls.py</h4>
<pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/delete/$', 'hollywood.views.delete_genre', name='delete_genre'),
)
        </code></pre>
<p>This should be starting to look quite repetitive -- that's a good thing.</p>
</section> element

element
<section>
<h2>Deleting records</h2>
<div>
<div class="col-4">
<p>Deleting works a little differently. We don't actually need to go to a page to delete an object, we can simply delete the object in the view, and then redirect the user to the index page.</p>
</div>
<div class="col-7 col-offset-1">
<h4>views.py</h4>
<pre><code>
def delete_genre(request, genre_id):
    genre = Genre.objects.get(id=genre_id)
    genre.delete()
    return redirect("/genres")
                </code></pre>
</div>
</div>
<div class="fragment">
<div class="col-4">
<p>As we did with edit, let's update the detail template so we can easily access the delete action.</p>
</div>
<div class="col-7 col-offset-1">
<h4>view_genre.html</h4>
<pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;a href="{% url "delete_genre" genre.id %}"&gt;Delete genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it yourself</h2>
<p>Guess what? Add delete functionality for actors and movies!</p>
</section> element

element

element
<h2>Deleting records</h2> element

element
<p>Last but not least, we want to be able to delete records as well.</p> element

element
<h4>urls.py</h4> element

element
<pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/delete/$', 'hollywood.views.delete_genre', name='delete_genre'),
)
        </code></pre> element

element
<p>This should be starting to look quite repetitive -- that's a good thing.</p> element

element

element
<h2>Deleting records</h2> element

element
<div>
<div class="col-4">
<p>Deleting works a little differently. We don't actually need to go to a page to delete an object, we can simply delete the object in the view, and then redirect the user to the index page.</p>
</div>
<div class="col-7 col-offset-1">
<h4>views.py</h4>
<pre><code>
def delete_genre(request, genre_id):
    genre = Genre.objects.get(id=genre_id)
    genre.delete()
    return redirect("/genres")
                </code></pre>
</div>
</div> element

element
<div class="fragment">
<div class="col-4">
<p>As we did with edit, let's update the detail template so we can easily access the delete action.</p>
</div>
<div class="col-7 col-offset-1">
<h4>view_genre.html</h4>
<pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;a href="{% url "delete_genre" genre.id %}"&gt;Delete genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
</div>
</div> element

element

element
<h2>Do it yourself</h2> element

element
<p>Guess what? Add delete functionality for actors and movies!</p> element

element
<section>
        <h2>Deleting records</h2>
        <p>Last but not least, we want to be able to delete records as well.</p>
        <h4>urls.py</h4>
        <pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/delete/$', 'hollywood.views.delete_genre', name='delete_genre'),
)
        </code></pre>
        <p>This should be starting to look quite repetitive -- that's a good thing.</p>
    </section>
<section>
        <h2>Writing a File (Cont.)</h2>
        <div class="col-4">
            <br>
            <ul>
                <li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br><br><br><br><br></li>
                <li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br><br><br><br><br></li>
                <li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="3">
                <pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Context Manager</h2>
        <p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p>
        <p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p>
        <p>They are used to run certain functions before and after a block of code.</p>
        <br><br>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
                <li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
                <li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p>
        <p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p>
        <div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div>
        <p style="clear:both;"><br>Will become</p>
        <div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div>
        <p style="clear:both"><br>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p>
        <div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div>
    </section>
<section>
        <h2>Prework</h2>
        <p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p>
        <ul>
            <li>Command Line: Give your computer instructions like a real programmer</li>
            <li>HTML: Learn the basic building blocks of the front-facing web</li>
            <li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
            <li>Git: Version control is a lifesaver</li>
            <li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
            <li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
            <li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
        </ul>
    </section>
<section>
        <h2>Object-oriented Python and Beginner Django</h2>
        <ul>
            <li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
            <li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
            <li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
            <li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
            <li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
            <li>Project: Build a Django application with user authentication and database storage</li>
        </ul>
    </section>
<section>
        <h2>Integrating JavaScript and Design</h2>
        <ul>
            <li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
            <li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
            <li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
            <li>Using third-party APIs: Query external services like Google and Instagram</li>
            <li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
            <li>Project: Integrate front-end technologies for a more interactive Django application</li>
        </ul>
    </section>
<section>
        <h2>Deleting records</h2>
        <div>
            <div class="col-4">
                <p>Deleting works a little differently. We don't actually need to go to a page to delete an object, we can simply delete the object in the view, and then redirect the user to the index page.</p>
            </div>
            <div class="col-7 col-offset-1">
                <h4>views.py</h4>
                <pre><code>
def delete_genre(request, genre_id):
    genre = Genre.objects.get(id=genre_id)
    genre.delete()
    return redirect("/genres")
                </code></pre>
            </div>
        </div>
        <div class="fragment">
            <div class="col-4">
                <p>As we did with edit, let's update the detail template so we can easily access the delete action.</p>
            </div>
            <div class="col-7 col-offset-1">
                <h4>view_genre.html</h4>
                <pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;a href="{% url "delete_genre" genre.id %}"&gt;Delete genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it yourself</h2>
        <p>Guess what? Add delete functionality for actors and movies!</p>
    </section>
<section>
    <h2>Recap: Basic Django app</h2>
    <p>Congratulations! You made a Django project. It's simple, but captures the functionality that powers most applications you use on the web and in mobile apps.</p>
    <p>You'll start to notice routes just like the ones you created all over the web.</p>
    <h4>urls.py</h4>
    <pre><code>
urlpatterns = patterns('',
    url(r'^genres/$', 'hollywood.views.genres', name='genres'),
    url(r'^genres/new/$', 'hollywood.views.new_genre', name='new_genre'),
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/$', 'hollywood.views.view_genre', name='view_genre'),
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/edit/$', 'hollywood.views.edit_genre', name='edit_genre'),
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/delete/$', 'hollywood.views.delete_genre', name='delete_genre'),
)
    </code></pre>
</section>
<section class="titleSlide" data-background="#168eae">
                    <h1>
    File Manipulation
</h1>
                    <a id="yetiLogo" href="http://www.yetihq.com/"><img src="/static/img/yeti-power.png"></a>
                </section>
<section>
    <h2>Brief Python History</h2>
    <p>Python is a scripting language, which means at its core it has a bunch of functionality built in for operations like file manipulation.</p>
    <ul>
        <li>Python was created by Guido van Rossum, Benevolant Dictator for Life (BDFL), in the late 1980's.</li>
        <li>Python has released major versions 1, 2, and 3</li>
        <li>Version 3 of python had some backwards incompatible changes with version 2, so they also created 2.6 and 2.7.</li>
        <li>Many people still use python 2.7 over 3, especially because major operating systems have not converted over yet.</li>
        <li>The community is still slowly making the transition from python 2 to 3 even though 3 was released in December 2008.</li>
        <li>2.7 will be the last release in the version 2 line, it was released in July 2010.</li>
    </ul>
</section>

element
<section>
<h2>Directories and Files</h2>
<p>Python has a library called <code>os</code> which contains scripting utility functions.</p>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br/><br/></li>
<li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br/><br/></li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">import os

print os.getcwd()</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="7">
<pre><code class="python">
print os.getcwd()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<ul>
<li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
<li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
</ul>
</section> element

element

element
<h2>Directories and Files</h2> element

element
<p>Python has a library called <code>os</code> which contains scripting utility functions.</p> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br/><br/></li>
<li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br/><br/></li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">import os

print os.getcwd()</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="7">
<pre><code class="python">
print os.getcwd()
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<ul>
<li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
<li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
</ul> element

element
<section>
        <h2>Directories and Files</h2>
        <p>Python has a library called <code>os</code> which contains scripting utility functions.</p>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br><br><br></li>
                <li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br><br><br></li>
                <li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br><br></li>
                <li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br><br></li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">import os

print os.getcwd()</code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="3">
                <pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="7">
                <pre><code class="python">
print os.getcwd()
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Expand Your Developer Toolkit</h2>
        <ul>
            <li>Pair programming</li>
            <li>Git strategies</li>
            <li>Test-driven development</li>
            <li>HTTP lifecycle</li>
            <li>Computer science topics</li>
            <li>Introduction to dev ops</li>
            <li>Analytics and error reporting</li>
            <li>Project: Work in a group to build a test-driven Django application</li>
        </ul>
    </section>
<section>
        <h2>AngularJS and Building Custom APIs</h2>
        <ul>
            <li>Basics of AngularJS</li>
            <li>Build a Basecamp clone with AngularJS</li>
            <li>Building your own custom API with Django and Tastypie</li>
            <li>Integrating Django with AngularJS</li>
            <li>Final Project: Demonstrate mastery with Django and AngularJS</li>
        </ul>
    </section>
<section>
        <h2>Prepping for Life After Bootcamp</h2>
        <ul>
            <li>Interview Prep</li>
            <li>Presentation Prep</li>
            <li>Development ecosystem</li>
        </ul>
        <p><a href="#/2">Back to top</a></p>
    </section>
<section>
    <h2>More than an education</h2>
    <p>There are a lot of bootcamps out there. At RocketU, you'll be surrounded by the 170+ amazing tech startups at RocketSpace.</p>
    <br>
    <img src="/static/img/rocketspace-name-logo-large-300x116.png" id="rocketSpaceLogo">
</section>

element
<section>
<h2>A network of your own</h2>
<p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p>
</section> element

element
<section>
<h2>RocketSpace staff</h2>
</section> element

element
<section>
<h2>Your instructors</h2>
<h4>Yeti</h4>
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div>
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div>
<div class="footer">
</div>
</section> element

element
<h2>A network of your own</h2> element

element
<p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p> element

element

element
<h2>RocketSpace staff</h2> element

element

element
<h2>Your instructors</h2> element

element
<h4>Yeti</h4> element

element
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div> element

element
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div> element

element
<div class="footer">
</div> element

element

element
<h2>Your classmates</h2> element

element
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul> element

element
<p><a href="#/4">Back to top</a></p> element

element

element
<h2>Prove you can program.</h2> element

element
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p> element

element
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p> element

element
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul> element

element
<section>
        <h2>A network of your own</h2>
        <p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p>
    </section>
<section class="titleSlide" data-background="#168eae">
                    <h1>
    Basic Django App: Edit &amp; Delete
</h1>
                    <a id="yetiLogo" href="http://www.yetihq.com/"><img src="/static/img/yeti-power.png"></a>
                </section>
<section>
    <h2>Laying out our application</h2>
    <p>Our Django app will have this site map. This basic layout can be found in many applications.</p>
    <img src="/static/img/hollywood_site_map.png">
</section>

element
<section>
<h2>Editing existing records</h2>
<p>Editing an existing object is a bit of a combination of the create view and the detail view -- you need a form to edit and process, but you are also finding an existing record.</p>
<p>Let's start by adding our route.</p>
<pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/edit/$', 'hollywood.views.edit_genre', name='edit_genre'),
)
        </code></pre>
</section> element

element
<section>
<h2>Editing existing records</h2>
<pre><code>
def edit_genre(request, genre_id):
    # Similar to the the detail view, we have to find the existing genre we are editing
    genre = Genre.objects.get(id=genre_id)

    # We still check to see if we are submitting the form
    if request.method == "POST":
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(request.POST, instance=genre)
        if form.is_valid():
            if form.save():
                return redirect("/genres/{}".format(genre_id))

    # Or just viewing the form
    else:
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(instance=genre)
    data = {"genre": genre, "form": form}
    return render(request, "genres/edit_genre.html", data)
        </code></pre>
</section> element

element
<section>
<h2>Editing existing records</h2>
<div>
<div class="col-3">
<p>Our edit template looks almost identical to our create template because it has the form, but when you actually load the page, the form will be prefilled.</p>
</div>
<div class="col-8 col-offset-1">
<h4>edit_genre.html</h4>
<pre><code>
<h1>Edit genre {{ genre.name }}</h1>
<form method="post">
    {% csrf_token %}
    {{ form }}
    <input type="submit" value="Update genre"/>
</form>
                </code></pre>
</div>
</div>
<div class="fragment">
<div class="col-3">
<p>Let's also update our detail view so that it's easy to edit a record we are looking at.</p>
</div>
<div class="col-8 col-offset-1">
<h4>view_genre.html</h4>
<pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it yourself</h2>
<p>Add edit functionality for movies and actors.</p>
</section> element

element

element
<h2>Editing existing records</h2> element

element
<p>Editing an existing object is a bit of a combination of the create view and the detail view -- you need a form to edit and process, but you are also finding an existing record.</p> element

element
<p>Let's start by adding our route.</p> element

element
<pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/edit/$', 'hollywood.views.edit_genre', name='edit_genre'),
)
        </code></pre> element

element

element
<h2>Editing existing records</h2> element

element
<pre><code>
def edit_genre(request, genre_id):
    # Similar to the the detail view, we have to find the existing genre we are editing
    genre = Genre.objects.get(id=genre_id)

    # We still check to see if we are submitting the form
    if request.method == "POST":
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(request.POST, instance=genre)
        if form.is_valid():
            if form.save():
                return redirect("/genres/{}".format(genre_id))

    # Or just viewing the form
    else:
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(instance=genre)
    data = {"genre": genre, "form": form}
    return render(request, "genres/edit_genre.html", data)
        </code></pre> element

element

element
<h2>Editing existing records</h2> element

element
<div>
<div class="col-3">
<p>Our edit template looks almost identical to our create template because it has the form, but when you actually load the page, the form will be prefilled.</p>
</div>
<div class="col-8 col-offset-1">
<h4>edit_genre.html</h4>
<pre><code>
<h1>Edit genre {{ genre.name }}</h1>
<form method="post">
    {% csrf_token %}
    {{ form }}
    <input type="submit" value="Update genre"/>
</form>
                </code></pre>
</div>
</div> element

element
<div class="fragment">
<div class="col-3">
<p>Let's also update our detail view so that it's easy to edit a record we are looking at.</p>
</div>
<div class="col-8 col-offset-1">
<h4>view_genre.html</h4>
<pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
</div>
</div> element

element

element
<h2>Do it yourself</h2> element

element
<p>Add edit functionality for movies and actors.</p> element

element
<section>
        <h2>Editing existing records</h2>
        <p>Editing an existing object is a bit of a combination of the create view and the detail view -- you need a form to edit and process, but you are also finding an existing record.</p>
        <p>Let's start by adding our route.</p>
        <pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/edit/$', 'hollywood.views.edit_genre', name='edit_genre'),
)
        </code></pre>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <ul>
            <li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
            <li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
        </ul>
    </section>

element
<section>
<h2>Reading a File</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
<li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
<li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
<li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
<li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre>

Hello world!
Hello universe!
                </pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="4">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="6">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Reading a File (Cont.)</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
<li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
<li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
<li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="2">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p>
<ul>
<li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
<li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
<li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
<li>Create new text files for testing out your function!</li>
</ul>
</section> element

element

element
<h2>Reading a File</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
<li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
<li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
<li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
<li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre>

Hello world!
Hello universe!
                </pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="4">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="6">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
</div>
</div> element

element

element
<h2>Reading a File (Cont.)</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
<li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
<li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
<li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="2">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p> element

element
<ul>
<li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
<li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
<li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
<li>Create new text files for testing out your function!</li>
</ul> element

element
<section>
        <h2>Reading a File</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
                <li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
                <li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
                <li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
                <li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre>

Hello world!
Hello universe!
                </pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="4">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="6">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>RocketSpace staff</h2>
    </section>

element
<h2>Your instructors</h2> element

element
<h4>Yeti</h4> element

element
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div> element

element
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div> element

element
<div class="footer">
</div> element

element

element
<h2>Your classmates</h2> element

element
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul> element

element
<p><a href="#/4">Back to top</a></p> element

element

element
<h2>Prove you can program.</h2> element

element
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p> element

element
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p> element

element
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul> element

element
<section>
        <h2>Your classmates</h2>
        <ul>
            <li>A brain</li>
            <li>An athlete</li>
            <li>A basket case</li>
            <li>A princess</li>
            <li>And a criminal</li>
        </ul>
        <p><a href="#/4">Back to top</a></p>
    </section>
<section>
    <h2>Prove you can program.</h2>
    <p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
    <p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
    <ul>
        <li><a target="_blank" href="http://codingbat.com/python">Coding Bat</a></li>
        <li><a target="_blank" href="http://www.pythonchallenge.com/">Python Challenge</a></li>
        <li><a target="_blank" href="http://www.coderbyte.com/">Coderbyte</a></li>
    </ul>
</section>
<section>
        <h2>Editing existing records</h2>
        <pre><code>
def edit_genre(request, genre_id):
    # Similar to the the detail view, we have to find the existing genre we are editing
    genre = Genre.objects.get(id=genre_id)

    # We still check to see if we are submitting the form
    if request.method == "POST":
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(request.POST, instance=genre)
        if form.is_valid():
            if form.save():
                return redirect("/genres/{}".format(genre_id))

    # Or just viewing the form
    else:
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(instance=genre)
    data = {"genre": genre, "form": form}
    return render(request, "genres/edit_genre.html", data)
        </code></pre>
    </section>
<section>
        <h2>Editing existing records</h2>
        <div>
            <div class="col-3">
                <p>Our edit template looks almost identical to our create template because it has the form, but when you actually load the page, the form will be prefilled.</p>
            </div>
            <div class="col-8 col-offset-1">
                <h4>edit_genre.html</h4>
                <pre><code>
<h1>Edit genre {{ genre.name }}</h1>
<form method="post">
    {% csrf_token %}
    {{ form }}
    <input type="submit" value="Update genre">
</form>
                </code></pre>
            </div>
        </div>
        <div class="fragment">
            <div class="col-3">
                <p>Let's also update our detail view so that it's easy to edit a record we are looking at.</p>
            </div>
            <div class="col-8 col-offset-1">
                <h4>view_genre.html</h4>
                <pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it yourself</h2>
        <p>Add edit functionality for movies and actors.</p>
    </section>

element
<section>
<h2>Deleting records</h2>
<p>Last but not least, we want to be able to delete records as well.</p>
<h4>urls.py</h4>
<pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/delete/$', 'hollywood.views.delete_genre', name='delete_genre'),
)
        </code></pre>
<p>This should be starting to look quite repetitive -- that's a good thing.</p>
</section> element

element
<section>
<h2>Deleting records</h2>
<div>
<div class="col-4">
<p>Deleting works a little differently. We don't actually need to go to a page to delete an object, we can simply delete the object in the view, and then redirect the user to the index page.</p>
</div>
<div class="col-7 col-offset-1">
<h4>views.py</h4>
<pre><code>
def delete_genre(request, genre_id):
    genre = Genre.objects.get(id=genre_id)
    genre.delete()
    return redirect("/genres")
                </code></pre>
</div>
</div>
<div class="fragment">
<div class="col-4">
<p>As we did with edit, let's update the detail template so we can easily access the delete action.</p>
</div>
<div class="col-7 col-offset-1">
<h4>view_genre.html</h4>
<pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;a href="{% url "delete_genre" genre.id %}"&gt;Delete genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it yourself</h2>
<p>Guess what? Add delete functionality for actors and movies!</p>
</section> element

element

element
<h2>Deleting records</h2> element

element
<p>Last but not least, we want to be able to delete records as well.</p> element

element
<h4>urls.py</h4> element

element
<pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/delete/$', 'hollywood.views.delete_genre', name='delete_genre'),
)
        </code></pre> element

element
<p>This should be starting to look quite repetitive -- that's a good thing.</p> element

element

element
<h2>Deleting records</h2> element

element
<div>
<div class="col-4">
<p>Deleting works a little differently. We don't actually need to go to a page to delete an object, we can simply delete the object in the view, and then redirect the user to the index page.</p>
</div>
<div class="col-7 col-offset-1">
<h4>views.py</h4>
<pre><code>
def delete_genre(request, genre_id):
    genre = Genre.objects.get(id=genre_id)
    genre.delete()
    return redirect("/genres")
                </code></pre>
</div>
</div> element

element
<div class="fragment">
<div class="col-4">
<p>As we did with edit, let's update the detail template so we can easily access the delete action.</p>
</div>
<div class="col-7 col-offset-1">
<h4>view_genre.html</h4>
<pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;a href="{% url "delete_genre" genre.id %}"&gt;Delete genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
</div>
</div> element

element

element
<h2>Do it yourself</h2> element

element
<p>Guess what? Add delete functionality for actors and movies!</p> element

element
<section>
        <h2>Deleting records</h2>
        <p>Last but not least, we want to be able to delete records as well.</p>
        <h4>urls.py</h4>
        <pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/delete/$', 'hollywood.views.delete_genre', name='delete_genre'),
)
        </code></pre>
        <p>This should be starting to look quite repetitive -- that's a good thing.</p>
    </section>
<section>
        <h2>Reading a File (Cont.)</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
                <li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
                <li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
                <li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="2">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p>
        <ul>
            <li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
            <li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
            <li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
            <li>Create new text files for testing out your function!</li>
        </ul>
    </section>

element
<section>
<h2>Writing a File</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
<li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
<li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Writing a File (Cont.)</h2>
<div class="col-4">
<br/>
<ul>
<li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Context Manager</h2>
<p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p>
<p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p>
<p>They are used to run certain functions before and after a block of code.</p>
<br/><br/>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
<li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
<li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p>
<p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p>
<div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div>
<p style="clear:both;"><br/>Will become</p>
<div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div>
<p style="clear:both"><br/>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p>
<div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div>
</section> element

element

element
<h2>Writing a File</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
<li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
<li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
</div>
</div> element

element

element
<h2>Writing a File (Cont.)</h2> element

element
<div class="col-4">
<br/>
<ul>
<li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
</div>
</div> element

element

element
<h2>Context Manager</h2> element

element
<p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p> element

element
<p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p> element

element
<p>They are used to run certain functions before and after a block of code.</p> element

element
<br/> element
<br/> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
<li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
<li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p> element

element
<p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p> element

element
<div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div> element

element
<p style="clear:both;"><br/>Will become</p> element

element
<div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div> element

element
<p style="clear:both"><br/>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p> element

element
<div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div> element

element
<section>
        <h2>Writing a File</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
                <li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
                <li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
            </div>
        </div>
    </section>
<section>
    <h2>Learn web development. Build awesome things.</h2>
    <p>
        You quit your job, you told your friends and family you're doing something crazy, maybe you moved here. You're ready to learn, intensively, for the next twelve weeks. By the time you're done, you'll be able to build pretty much anything you see on the internet.
    </p>
</section>

element
<section>
<h2>What you'll be learning</h2>
<p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p>
<ul>
<li><a href="#/2/1">Prework</a></li>
<li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
<li><a href="#/2/3">Integrating JavaScript and Design</a></li>
<li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
<li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
<li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
</ul>
</section> element

element
<section>
<h2>Prework</h2>
<p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p>
<ul>
<li>Command Line: Give your computer instructions like a real programmer</li>
<li>HTML: Learn the basic building blocks of the front-facing web</li>
<li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
<li>Git: Version control is a lifesaver</li>
<li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
<li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
<li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
</ul>
</section> element

element
<section>
<h2>Object-oriented Python and Beginner Django</h2>
<ul>
<li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
<li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
<li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
<li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
<li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
<li>Project: Build a Django application with user authentication and database storage</li>
</ul>
</section> element

element
<section>
<h2>Integrating JavaScript and Design</h2>
<ul>
<li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
<li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
<li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
<li>Using third-party APIs: Query external services like Google and Instagram</li>
<li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
<li>Project: Integrate front-end technologies for a more interactive Django application</li>
</ul>
</section> element

element
<section>
<h2>Expand Your Developer Toolkit</h2>
<ul>
<li>Pair programming</li>
<li>Git strategies</li>
<li>Test-driven development</li>
<li>HTTP lifecycle</li>
<li>Computer science topics</li>
<li>Introduction to dev ops</li>
<li>Analytics and error reporting</li>
<li>Project: Work in a group to build a test-driven Django application</li>
</ul>
</section> element

element
<section>
<h2>AngularJS and Building Custom APIs</h2>
<ul>
<li>Basics of AngularJS</li>
<li>Build a Basecamp clone with AngularJS</li>
<li>Building your own custom API with Django and Tastypie</li>
<li>Integrating Django with AngularJS</li>
<li>Final Project: Demonstrate mastery with Django and AngularJS</li>
</ul>
</section> element

element
<section>
<h2>Prepping for Life After Bootcamp</h2>
<ul>
<li>Interview Prep</li>
<li>Presentation Prep</li>
<li>Development ecosystem</li>
</ul>
<p><a href="#/2">Back to top</a></p>
</section> element

element

element
<h2>What you'll be learning</h2> element

element
<p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p> element

element
<ul>
<li><a href="#/2/1">Prework</a></li>
<li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
<li><a href="#/2/3">Integrating JavaScript and Design</a></li>
<li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
<li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
<li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
</ul> element

element

element
<h2>Prework</h2> element

element
<p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p> element

element
<ul>
<li>Command Line: Give your computer instructions like a real programmer</li>
<li>HTML: Learn the basic building blocks of the front-facing web</li>
<li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
<li>Git: Version control is a lifesaver</li>
<li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
<li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
<li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
</ul> element

element

element
<h2>Object-oriented Python and Beginner Django</h2> element

element
<ul>
<li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
<li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
<li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
<li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
<li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
<li>Project: Build a Django application with user authentication and database storage</li>
</ul> element

element

element
<h2>Integrating JavaScript and Design</h2> element

element
<ul>
<li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
<li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
<li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
<li>Using third-party APIs: Query external services like Google and Instagram</li>
<li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
<li>Project: Integrate front-end technologies for a more interactive Django application</li>
</ul> element

element

element
<h2>Expand Your Developer Toolkit</h2> element

element
<ul>
<li>Pair programming</li>
<li>Git strategies</li>
<li>Test-driven development</li>
<li>HTTP lifecycle</li>
<li>Computer science topics</li>
<li>Introduction to dev ops</li>
<li>Analytics and error reporting</li>
<li>Project: Work in a group to build a test-driven Django application</li>
</ul> element

element

element
<h2>AngularJS and Building Custom APIs</h2> element

element
<ul>
<li>Basics of AngularJS</li>
<li>Build a Basecamp clone with AngularJS</li>
<li>Building your own custom API with Django and Tastypie</li>
<li>Integrating Django with AngularJS</li>
<li>Final Project: Demonstrate mastery with Django and AngularJS</li>
</ul> element

element

element
<h2>Prepping for Life After Bootcamp</h2> element

element
<ul>
<li>Interview Prep</li>
<li>Presentation Prep</li>
<li>Development ecosystem</li>
</ul> element

element
<p><a href="#/2">Back to top</a></p> element

element
<section>
        <h2>What you'll be learning</h2>
        <p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p>
        <ul>
            <li><a href="#/2/1">Prework</a></li>
            <li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
            <li><a href="#/2/3">Integrating JavaScript and Design</a></li>
            <li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
            <li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
            <li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
        </ul>
    </section>
<section>
        <h2>Deleting records</h2>
        <div>
            <div class="col-4">
                <p>Deleting works a little differently. We don't actually need to go to a page to delete an object, we can simply delete the object in the view, and then redirect the user to the index page.</p>
            </div>
            <div class="col-7 col-offset-1">
                <h4>views.py</h4>
                <pre><code>
def delete_genre(request, genre_id):
    genre = Genre.objects.get(id=genre_id)
    genre.delete()
    return redirect("/genres")
                </code></pre>
            </div>
        </div>
        <div class="fragment">
            <div class="col-4">
                <p>As we did with edit, let's update the detail template so we can easily access the delete action.</p>
            </div>
            <div class="col-7 col-offset-1">
                <h4>view_genre.html</h4>
                <pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;a href="{% url "delete_genre" genre.id %}"&gt;Delete genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Writing a File (Cont.)</h2>
        <div class="col-4">
            <br>
            <ul>
                <li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br><br><br><br><br></li>
                <li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br><br><br><br><br></li>
                <li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="3">
                <pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Context Manager</h2>
        <p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p>
        <p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p>
        <p>They are used to run certain functions before and after a block of code.</p>
        <br><br>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
                <li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
                <li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Prework</h2>
        <p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p>
        <ul>
            <li>Command Line: Give your computer instructions like a real programmer</li>
            <li>HTML: Learn the basic building blocks of the front-facing web</li>
            <li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
            <li>Git: Version control is a lifesaver</li>
            <li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
            <li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
            <li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
        </ul>
    </section>
<section>
        <h2>Object-oriented Python and Beginner Django</h2>
        <ul>
            <li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
            <li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
            <li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
            <li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
            <li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
            <li>Project: Build a Django application with user authentication and database storage</li>
        </ul>
    </section>
<section>
        <h2>Do it yourself</h2>
        <p>Guess what? Add delete functionality for actors and movies!</p>
    </section>
<section>
    <h2>Recap: Basic Django app</h2>
    <p>Congratulations! You made a Django project. It's simple, but captures the functionality that powers most applications you use on the web and in mobile apps.</p>
    <p>You'll start to notice routes just like the ones you created all over the web.</p>
    <h4>urls.py</h4>
    <pre><code>
urlpatterns = patterns('',
    url(r'^genres/$', 'hollywood.views.genres', name='genres'),
    url(r'^genres/new/$', 'hollywood.views.new_genre', name='new_genre'),
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/$', 'hollywood.views.view_genre', name='view_genre'),
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/edit/$', 'hollywood.views.edit_genre', name='edit_genre'),
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/delete/$', 'hollywood.views.delete_genre', name='delete_genre'),
)
    </code></pre>
</section>
<section class="titleSlide" data-background="#168eae">
                    <h1>
    Basic Django App: Edit &amp; Delete
</h1>
                    <a id="yetiLogo" href="http://www.yetihq.com/"><img src="/static/img/yeti-power.png"></a>
                </section>
<section>
        <h2>Do it Yourself</h2>
        <p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p>
        <p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p>
        <div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div>
        <p style="clear:both;"><br>Will become</p>
        <div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div>
        <p style="clear:both"><br>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p>
        <div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div>
    </section>
<section class="titleSlide" data-background="#168eae">
                    <h1>
    File Manipulation
</h1>
                    <a id="yetiLogo" href="http://www.yetihq.com/"><img src="/static/img/yeti-power.png"></a>
                </section>
<section>
    <h2>Brief Python History</h2>
    <p>Python is a scripting language, which means at its core it has a bunch of functionality built in for operations like file manipulation.</p>
    <ul>
        <li>Python was created by Guido van Rossum, Benevolant Dictator for Life (BDFL), in the late 1980's.</li>
        <li>Python has released major versions 1, 2, and 3</li>
        <li>Version 3 of python had some backwards incompatible changes with version 2, so they also created 2.6 and 2.7.</li>
        <li>Many people still use python 2.7 over 3, especially because major operating systems have not converted over yet.</li>
        <li>The community is still slowly making the transition from python 2 to 3 even though 3 was released in December 2008.</li>
        <li>2.7 will be the last release in the version 2 line, it was released in July 2010.</li>
    </ul>
</section>

element
<section>
<h2>Directories and Files</h2>
<p>Python has a library called <code>os</code> which contains scripting utility functions.</p>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br/><br/></li>
<li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br/><br/></li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">import os

print os.getcwd()</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="7">
<pre><code class="python">
print os.getcwd()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<ul>
<li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
<li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
</ul>
</section> element

element

element
<h2>Directories and Files</h2> element

element
<p>Python has a library called <code>os</code> which contains scripting utility functions.</p> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br/><br/></li>
<li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br/><br/></li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">import os

print os.getcwd()</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="7">
<pre><code class="python">
print os.getcwd()
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<ul>
<li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
<li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
</ul> element

element
<section>
        <h2>Directories and Files</h2>
        <p>Python has a library called <code>os</code> which contains scripting utility functions.</p>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br><br><br></li>
                <li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br><br><br></li>
                <li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br><br></li>
                <li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br><br></li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">import os

print os.getcwd()</code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="3">
                <pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="7">
                <pre><code class="python">
print os.getcwd()
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Integrating JavaScript and Design</h2>
        <ul>
            <li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
            <li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
            <li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
            <li>Using third-party APIs: Query external services like Google and Instagram</li>
            <li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
            <li>Project: Integrate front-end technologies for a more interactive Django application</li>
        </ul>
    </section>
<section>
        <h2>Expand Your Developer Toolkit</h2>
        <ul>
            <li>Pair programming</li>
            <li>Git strategies</li>
            <li>Test-driven development</li>
            <li>HTTP lifecycle</li>
            <li>Computer science topics</li>
            <li>Introduction to dev ops</li>
            <li>Analytics and error reporting</li>
            <li>Project: Work in a group to build a test-driven Django application</li>
        </ul>
    </section>
<section>
        <h2>AngularJS and Building Custom APIs</h2>
        <ul>
            <li>Basics of AngularJS</li>
            <li>Build a Basecamp clone with AngularJS</li>
            <li>Building your own custom API with Django and Tastypie</li>
            <li>Integrating Django with AngularJS</li>
            <li>Final Project: Demonstrate mastery with Django and AngularJS</li>
        </ul>
    </section>
<section>
    <h2>Laying out our application</h2>
    <p>Our Django app will have this site map. This basic layout can be found in many applications.</p>
    <img src="/static/img/hollywood_site_map.png">
</section>

element
<section>
<h2>Editing existing records</h2>
<p>Editing an existing object is a bit of a combination of the create view and the detail view -- you need a form to edit and process, but you are also finding an existing record.</p>
<p>Let's start by adding our route.</p>
<pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/edit/$', 'hollywood.views.edit_genre', name='edit_genre'),
)
        </code></pre>
</section> element

element
<section>
<h2>Editing existing records</h2>
<pre><code>
def edit_genre(request, genre_id):
    # Similar to the the detail view, we have to find the existing genre we are editing
    genre = Genre.objects.get(id=genre_id)

    # We still check to see if we are submitting the form
    if request.method == "POST":
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(request.POST, instance=genre)
        if form.is_valid():
            if form.save():
                return redirect("/genres/{}".format(genre_id))

    # Or just viewing the form
    else:
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(instance=genre)
    data = {"genre": genre, "form": form}
    return render(request, "genres/edit_genre.html", data)
        </code></pre>
</section> element

element
<section>
<h2>Editing existing records</h2>
<div>
<div class="col-3">
<p>Our edit template looks almost identical to our create template because it has the form, but when you actually load the page, the form will be prefilled.</p>
</div>
<div class="col-8 col-offset-1">
<h4>edit_genre.html</h4>
<pre><code>
<h1>Edit genre {{ genre.name }}</h1>
<form method="post">
    {% csrf_token %}
    {{ form }}
    <input type="submit" value="Update genre"/>
</form>
                </code></pre>
</div>
</div>
<div class="fragment">
<div class="col-3">
<p>Let's also update our detail view so that it's easy to edit a record we are looking at.</p>
</div>
<div class="col-8 col-offset-1">
<h4>view_genre.html</h4>
<pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it yourself</h2>
<p>Add edit functionality for movies and actors.</p>
</section> element

element

element
<h2>Editing existing records</h2> element

element
<p>Editing an existing object is a bit of a combination of the create view and the detail view -- you need a form to edit and process, but you are also finding an existing record.</p> element

element
<p>Let's start by adding our route.</p> element

element
<pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/edit/$', 'hollywood.views.edit_genre', name='edit_genre'),
)
        </code></pre> element

element

element
<h2>Editing existing records</h2> element

element
<pre><code>
def edit_genre(request, genre_id):
    # Similar to the the detail view, we have to find the existing genre we are editing
    genre = Genre.objects.get(id=genre_id)

    # We still check to see if we are submitting the form
    if request.method == "POST":
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(request.POST, instance=genre)
        if form.is_valid():
            if form.save():
                return redirect("/genres/{}".format(genre_id))

    # Or just viewing the form
    else:
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(instance=genre)
    data = {"genre": genre, "form": form}
    return render(request, "genres/edit_genre.html", data)
        </code></pre> element

element

element
<h2>Editing existing records</h2> element

element
<div>
<div class="col-3">
<p>Our edit template looks almost identical to our create template because it has the form, but when you actually load the page, the form will be prefilled.</p>
</div>
<div class="col-8 col-offset-1">
<h4>edit_genre.html</h4>
<pre><code>
<h1>Edit genre {{ genre.name }}</h1>
<form method="post">
    {% csrf_token %}
    {{ form }}
    <input type="submit" value="Update genre"/>
</form>
                </code></pre>
</div>
</div> element

element
<div class="fragment">
<div class="col-3">
<p>Let's also update our detail view so that it's easy to edit a record we are looking at.</p>
</div>
<div class="col-8 col-offset-1">
<h4>view_genre.html</h4>
<pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
</div>
</div> element

element

element
<h2>Do it yourself</h2> element

element
<p>Add edit functionality for movies and actors.</p> element

element
<section>
        <h2>Editing existing records</h2>
        <p>Editing an existing object is a bit of a combination of the create view and the detail view -- you need a form to edit and process, but you are also finding an existing record.</p>
        <p>Let's start by adding our route.</p>
        <pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/edit/$', 'hollywood.views.edit_genre', name='edit_genre'),
)
        </code></pre>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <ul>
            <li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
            <li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
        </ul>
    </section>

element
<section>
<h2>Reading a File</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
<li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
<li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
<li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
<li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre>

Hello world!
Hello universe!
                </pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="4">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="6">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Reading a File (Cont.)</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
<li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
<li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
<li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="2">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p>
<ul>
<li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
<li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
<li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
<li>Create new text files for testing out your function!</li>
</ul>
</section> element

element

element
<h2>Reading a File</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
<li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
<li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
<li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
<li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre>

Hello world!
Hello universe!
                </pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="4">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="6">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
</div>
</div> element

element

element
<h2>Reading a File (Cont.)</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
<li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
<li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
<li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="2">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p> element

element
<ul>
<li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
<li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
<li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
<li>Create new text files for testing out your function!</li>
</ul> element

element
<section>
        <h2>Reading a File</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
                <li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
                <li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
                <li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
                <li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre>

Hello world!
Hello universe!
                </pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="4">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="6">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Prepping for Life After Bootcamp</h2>
        <ul>
            <li>Interview Prep</li>
            <li>Presentation Prep</li>
            <li>Development ecosystem</li>
        </ul>
        <p><a href="#/2">Back to top</a></p>
    </section>
<section>
    <h2>More than an education</h2>
    <p>There are a lot of bootcamps out there. At RocketU, you'll be surrounded by the 170+ amazing tech startups at RocketSpace.</p>
    <br>
    <img src="/static/img/rocketspace-name-logo-large-300x116.png" id="rocketSpaceLogo">
</section>

element
<section>
<h2>A network of your own</h2>
<p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p>
</section> element

element
<section>
<h2>RocketSpace staff</h2>
</section> element

element
<section>
<h2>Your instructors</h2>
<h4>Yeti</h4>
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div>
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div>
<div class="footer">
</div>
</section> element

element
<h2>A network of your own</h2> element

element
<p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p> element

element

element
<h2>RocketSpace staff</h2> element

element

element
<h2>Your instructors</h2> element

element
<h4>Yeti</h4> element

element
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div> element

element
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div> element

element
<div class="footer">
</div> element

element

element
<h2>Your classmates</h2> element

element
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul> element

element
<p><a href="#/4">Back to top</a></p> element

element

element
<h2>Prove you can program.</h2> element

element
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p> element

element
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p> element

element
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul> element

element
<section>
        <h2>A network of your own</h2>
        <p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p>
    </section>
<section>
        <h2>Editing existing records</h2>
        <pre><code>
def edit_genre(request, genre_id):
    # Similar to the the detail view, we have to find the existing genre we are editing
    genre = Genre.objects.get(id=genre_id)

    # We still check to see if we are submitting the form
    if request.method == "POST":
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(request.POST, instance=genre)
        if form.is_valid():
            if form.save():
                return redirect("/genres/{}".format(genre_id))

    # Or just viewing the form
    else:
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(instance=genre)
    data = {"genre": genre, "form": form}
    return render(request, "genres/edit_genre.html", data)
        </code></pre>
    </section>
<section>
        <h2>Editing existing records</h2>
        <div>
            <div class="col-3">
                <p>Our edit template looks almost identical to our create template because it has the form, but when you actually load the page, the form will be prefilled.</p>
            </div>
            <div class="col-8 col-offset-1">
                <h4>edit_genre.html</h4>
                <pre><code>
<h1>Edit genre {{ genre.name }}</h1>
<form method="post">
    {% csrf_token %}
    {{ form }}
    <input type="submit" value="Update genre">
</form>
                </code></pre>
            </div>
        </div>
        <div class="fragment">
            <div class="col-3">
                <p>Let's also update our detail view so that it's easy to edit a record we are looking at.</p>
            </div>
            <div class="col-8 col-offset-1">
                <h4>view_genre.html</h4>
                <pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it yourself</h2>
        <p>Add edit functionality for movies and actors.</p>
    </section>

element
<section>
<h2>Deleting records</h2>
<p>Last but not least, we want to be able to delete records as well.</p>
<h4>urls.py</h4>
<pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/delete/$', 'hollywood.views.delete_genre', name='delete_genre'),
)
        </code></pre>
<p>This should be starting to look quite repetitive -- that's a good thing.</p>
</section> element

element
<section>
<h2>Deleting records</h2>
<div>
<div class="col-4">
<p>Deleting works a little differently. We don't actually need to go to a page to delete an object, we can simply delete the object in the view, and then redirect the user to the index page.</p>
</div>
<div class="col-7 col-offset-1">
<h4>views.py</h4>
<pre><code>
def delete_genre(request, genre_id):
    genre = Genre.objects.get(id=genre_id)
    genre.delete()
    return redirect("/genres")
                </code></pre>
</div>
</div>
<div class="fragment">
<div class="col-4">
<p>As we did with edit, let's update the detail template so we can easily access the delete action.</p>
</div>
<div class="col-7 col-offset-1">
<h4>view_genre.html</h4>
<pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;a href="{% url "delete_genre" genre.id %}"&gt;Delete genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it yourself</h2>
<p>Guess what? Add delete functionality for actors and movies!</p>
</section> element

element

element
<h2>Deleting records</h2> element

element
<p>Last but not least, we want to be able to delete records as well.</p> element

element
<h4>urls.py</h4> element

element
<pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/delete/$', 'hollywood.views.delete_genre', name='delete_genre'),
)
        </code></pre> element

element
<p>This should be starting to look quite repetitive -- that's a good thing.</p> element

element

element
<h2>Deleting records</h2> element

element
<div>
<div class="col-4">
<p>Deleting works a little differently. We don't actually need to go to a page to delete an object, we can simply delete the object in the view, and then redirect the user to the index page.</p>
</div>
<div class="col-7 col-offset-1">
<h4>views.py</h4>
<pre><code>
def delete_genre(request, genre_id):
    genre = Genre.objects.get(id=genre_id)
    genre.delete()
    return redirect("/genres")
                </code></pre>
</div>
</div> element

element
<div class="fragment">
<div class="col-4">
<p>As we did with edit, let's update the detail template so we can easily access the delete action.</p>
</div>
<div class="col-7 col-offset-1">
<h4>view_genre.html</h4>
<pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;a href="{% url "delete_genre" genre.id %}"&gt;Delete genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
</div>
</div> element

element

element
<h2>Do it yourself</h2> element

element
<p>Guess what? Add delete functionality for actors and movies!</p> element

element
<section>
        <h2>Deleting records</h2>
        <p>Last but not least, we want to be able to delete records as well.</p>
        <h4>urls.py</h4>
        <pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/delete/$', 'hollywood.views.delete_genre', name='delete_genre'),
)
        </code></pre>
        <p>This should be starting to look quite repetitive -- that's a good thing.</p>
    </section>
<section>
        <h2>Reading a File (Cont.)</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
                <li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
                <li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
                <li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="2">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p>
        <ul>
            <li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
            <li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
            <li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
            <li>Create new text files for testing out your function!</li>
        </ul>
    </section>

element
<section>
<h2>Writing a File</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
<li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
<li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Writing a File (Cont.)</h2>
<div class="col-4">
<br/>
<ul>
<li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Context Manager</h2>
<p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p>
<p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p>
<p>They are used to run certain functions before and after a block of code.</p>
<br/><br/>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
<li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
<li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p>
<p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p>
<div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div>
<p style="clear:both;"><br/>Will become</p>
<div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div>
<p style="clear:both"><br/>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p>
<div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div>
</section> element

element

element
<h2>Writing a File</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
<li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
<li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
</div>
</div> element

element

element
<h2>Writing a File (Cont.)</h2> element

element
<div class="col-4">
<br/>
<ul>
<li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
</div>
</div> element

element

element
<h2>Context Manager</h2> element

element
<p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p> element

element
<p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p> element

element
<p>They are used to run certain functions before and after a block of code.</p> element

element
<br/> element
<br/> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
<li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
<li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p> element

element
<p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p> element

element
<div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div> element

element
<p style="clear:both;"><br/>Will become</p> element

element
<div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div> element

element
<p style="clear:both"><br/>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p> element

element
<div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div> element

element
<section>
        <h2>Writing a File</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
                <li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
                <li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>RocketSpace staff</h2>
    </section>

element
<h2>Your instructors</h2> element

element
<h4>Yeti</h4> element

element
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div> element

element
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div> element

element
<div class="footer">
</div> element

element

element
<h2>Your classmates</h2> element

element
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul> element

element
<p><a href="#/4">Back to top</a></p> element

element

element
<h2>Prove you can program.</h2> element

element
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p> element

element
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p> element

element
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul> element

element
<section>
        <h2>Your classmates</h2>
        <ul>
            <li>A brain</li>
            <li>An athlete</li>
            <li>A basket case</li>
            <li>A princess</li>
            <li>And a criminal</li>
        </ul>
        <p><a href="#/4">Back to top</a></p>
    </section>
<section>
        <h2>Deleting records</h2>
        <div>
            <div class="col-4">
                <p>Deleting works a little differently. We don't actually need to go to a page to delete an object, we can simply delete the object in the view, and then redirect the user to the index page.</p>
            </div>
            <div class="col-7 col-offset-1">
                <h4>views.py</h4>
                <pre><code>
def delete_genre(request, genre_id):
    genre = Genre.objects.get(id=genre_id)
    genre.delete()
    return redirect("/genres")
                </code></pre>
            </div>
        </div>
        <div class="fragment">
            <div class="col-4">
                <p>As we did with edit, let's update the detail template so we can easily access the delete action.</p>
            </div>
            <div class="col-7 col-offset-1">
                <h4>view_genre.html</h4>
                <pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;a href="{% url "delete_genre" genre.id %}"&gt;Delete genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it yourself</h2>
        <p>Guess what? Add delete functionality for actors and movies!</p>
    </section>
<section>
    <h2>Recap: Basic Django app</h2>
    <p>Congratulations! You made a Django project. It's simple, but captures the functionality that powers most applications you use on the web and in mobile apps.</p>
    <p>You'll start to notice routes just like the ones you created all over the web.</p>
    <h4>urls.py</h4>
    <pre><code>
urlpatterns = patterns('',
    url(r'^genres/$', 'hollywood.views.genres', name='genres'),
    url(r'^genres/new/$', 'hollywood.views.new_genre', name='new_genre'),
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/$', 'hollywood.views.view_genre', name='view_genre'),
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/edit/$', 'hollywood.views.edit_genre', name='edit_genre'),
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/delete/$', 'hollywood.views.delete_genre', name='delete_genre'),
)
    </code></pre>
</section>
<section class="titleSlide" data-background="#168eae">
                    <h1>
    Basic Django App: Edit &amp; Delete
</h1>
                    <a id="yetiLogo" href="http://www.yetihq.com/"><img src="/static/img/yeti-power.png"></a>
                </section>
<section>
    <h2>Laying out our application</h2>
    <p>Our Django app will have this site map. This basic layout can be found in many applications.</p>
    <img src="/static/img/hollywood_site_map.png">
</section>

element
<section>
<h2>Editing existing records</h2>
<p>Editing an existing object is a bit of a combination of the create view and the detail view -- you need a form to edit and process, but you are also finding an existing record.</p>
<p>Let's start by adding our route.</p>
<pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/edit/$', 'hollywood.views.edit_genre', name='edit_genre'),
)
        </code></pre>
</section> element

element
<section>
<h2>Editing existing records</h2>
<pre><code>
def edit_genre(request, genre_id):
    # Similar to the the detail view, we have to find the existing genre we are editing
    genre = Genre.objects.get(id=genre_id)

    # We still check to see if we are submitting the form
    if request.method == "POST":
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(request.POST, instance=genre)
        if form.is_valid():
            if form.save():
                return redirect("/genres/{}".format(genre_id))

    # Or just viewing the form
    else:
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(instance=genre)
    data = {"genre": genre, "form": form}
    return render(request, "genres/edit_genre.html", data)
        </code></pre>
</section> element

element
<section>
<h2>Editing existing records</h2>
<div>
<div class="col-3">
<p>Our edit template looks almost identical to our create template because it has the form, but when you actually load the page, the form will be prefilled.</p>
</div>
<div class="col-8 col-offset-1">
<h4>edit_genre.html</h4>
<pre><code>
<h1>Edit genre {{ genre.name }}</h1>
<form method="post">
    {% csrf_token %}
    {{ form }}
    <input type="submit" value="Update genre"/>
</form>
                </code></pre>
</div>
</div>
<div class="fragment">
<div class="col-3">
<p>Let's also update our detail view so that it's easy to edit a record we are looking at.</p>
</div>
<div class="col-8 col-offset-1">
<h4>view_genre.html</h4>
<pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it yourself</h2>
<p>Add edit functionality for movies and actors.</p>
</section> element

element

element
<h2>Editing existing records</h2> element

element
<p>Editing an existing object is a bit of a combination of the create view and the detail view -- you need a form to edit and process, but you are also finding an existing record.</p> element

element
<p>Let's start by adding our route.</p> element

element
<pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/edit/$', 'hollywood.views.edit_genre', name='edit_genre'),
)
        </code></pre> element

element

element
<h2>Editing existing records</h2> element

element
<pre><code>
def edit_genre(request, genre_id):
    # Similar to the the detail view, we have to find the existing genre we are editing
    genre = Genre.objects.get(id=genre_id)

    # We still check to see if we are submitting the form
    if request.method == "POST":
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(request.POST, instance=genre)
        if form.is_valid():
            if form.save():
                return redirect("/genres/{}".format(genre_id))

    # Or just viewing the form
    else:
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(instance=genre)
    data = {"genre": genre, "form": form}
    return render(request, "genres/edit_genre.html", data)
        </code></pre> element

element

element
<h2>Editing existing records</h2> element

element
<div>
<div class="col-3">
<p>Our edit template looks almost identical to our create template because it has the form, but when you actually load the page, the form will be prefilled.</p>
</div>
<div class="col-8 col-offset-1">
<h4>edit_genre.html</h4>
<pre><code>
<h1>Edit genre {{ genre.name }}</h1>
<form method="post">
    {% csrf_token %}
    {{ form }}
    <input type="submit" value="Update genre"/>
</form>
                </code></pre>
</div>
</div> element

element
<div class="fragment">
<div class="col-3">
<p>Let's also update our detail view so that it's easy to edit a record we are looking at.</p>
</div>
<div class="col-8 col-offset-1">
<h4>view_genre.html</h4>
<pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
</div>
</div> element

element

element
<h2>Do it yourself</h2> element

element
<p>Add edit functionality for movies and actors.</p> element

element
<section>
        <h2>Editing existing records</h2>
        <p>Editing an existing object is a bit of a combination of the create view and the detail view -- you need a form to edit and process, but you are also finding an existing record.</p>
        <p>Let's start by adding our route.</p>
        <pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/edit/$', 'hollywood.views.edit_genre', name='edit_genre'),
)
        </code></pre>
    </section>
<section>
        <h2>Writing a File (Cont.)</h2>
        <div class="col-4">
            <br>
            <ul>
                <li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br><br><br><br><br></li>
                <li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br><br><br><br><br></li>
                <li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="3">
                <pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Context Manager</h2>
        <p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p>
        <p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p>
        <p>They are used to run certain functions before and after a block of code.</p>
        <br><br>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
                <li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
                <li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p>
        <p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p>
        <div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div>
        <p style="clear:both;"><br>Will become</p>
        <div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div>
        <p style="clear:both"><br>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p>
        <div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div>
    </section>
<section>
    <h2>Prove you can program.</h2>
    <p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
    <p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
    <ul>
        <li><a target="_blank" href="http://codingbat.com/python">Coding Bat</a></li>
        <li><a target="_blank" href="http://www.pythonchallenge.com/">Python Challenge</a></li>
        <li><a target="_blank" href="http://www.coderbyte.com/">Coderbyte</a></li>
    </ul>
</section>
<section>
    <h2>Learn web development. Build awesome things.</h2>
    <p>
        You quit your job, you told your friends and family you're doing something crazy, maybe you moved here. You're ready to learn, intensively, for the next twelve weeks. By the time you're done, you'll be able to build pretty much anything you see on the internet.
    </p>
</section>

element
<section>
<h2>What you'll be learning</h2>
<p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p>
<ul>
<li><a href="#/2/1">Prework</a></li>
<li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
<li><a href="#/2/3">Integrating JavaScript and Design</a></li>
<li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
<li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
<li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
</ul>
</section> element

element
<section>
<h2>Prework</h2>
<p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p>
<ul>
<li>Command Line: Give your computer instructions like a real programmer</li>
<li>HTML: Learn the basic building blocks of the front-facing web</li>
<li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
<li>Git: Version control is a lifesaver</li>
<li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
<li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
<li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
</ul>
</section> element

element
<section>
<h2>Object-oriented Python and Beginner Django</h2>
<ul>
<li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
<li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
<li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
<li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
<li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
<li>Project: Build a Django application with user authentication and database storage</li>
</ul>
</section> element

element
<section>
<h2>Integrating JavaScript and Design</h2>
<ul>
<li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
<li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
<li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
<li>Using third-party APIs: Query external services like Google and Instagram</li>
<li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
<li>Project: Integrate front-end technologies for a more interactive Django application</li>
</ul>
</section> element

element
<section>
<h2>Expand Your Developer Toolkit</h2>
<ul>
<li>Pair programming</li>
<li>Git strategies</li>
<li>Test-driven development</li>
<li>HTTP lifecycle</li>
<li>Computer science topics</li>
<li>Introduction to dev ops</li>
<li>Analytics and error reporting</li>
<li>Project: Work in a group to build a test-driven Django application</li>
</ul>
</section> element

element
<section>
<h2>AngularJS and Building Custom APIs</h2>
<ul>
<li>Basics of AngularJS</li>
<li>Build a Basecamp clone with AngularJS</li>
<li>Building your own custom API with Django and Tastypie</li>
<li>Integrating Django with AngularJS</li>
<li>Final Project: Demonstrate mastery with Django and AngularJS</li>
</ul>
</section> element

element
<section>
<h2>Prepping for Life After Bootcamp</h2>
<ul>
<li>Interview Prep</li>
<li>Presentation Prep</li>
<li>Development ecosystem</li>
</ul>
<p><a href="#/2">Back to top</a></p>
</section> element

element

element
<h2>What you'll be learning</h2> element

element
<p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p> element

element
<ul>
<li><a href="#/2/1">Prework</a></li>
<li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
<li><a href="#/2/3">Integrating JavaScript and Design</a></li>
<li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
<li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
<li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
</ul> element

element

element
<h2>Prework</h2> element

element
<p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p> element

element
<ul>
<li>Command Line: Give your computer instructions like a real programmer</li>
<li>HTML: Learn the basic building blocks of the front-facing web</li>
<li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
<li>Git: Version control is a lifesaver</li>
<li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
<li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
<li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
</ul> element

element

element
<h2>Object-oriented Python and Beginner Django</h2> element

element
<ul>
<li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
<li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
<li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
<li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
<li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
<li>Project: Build a Django application with user authentication and database storage</li>
</ul> element

element

element
<h2>Integrating JavaScript and Design</h2> element

element
<ul>
<li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
<li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
<li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
<li>Using third-party APIs: Query external services like Google and Instagram</li>
<li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
<li>Project: Integrate front-end technologies for a more interactive Django application</li>
</ul> element

element

element
<h2>Expand Your Developer Toolkit</h2> element

element
<ul>
<li>Pair programming</li>
<li>Git strategies</li>
<li>Test-driven development</li>
<li>HTTP lifecycle</li>
<li>Computer science topics</li>
<li>Introduction to dev ops</li>
<li>Analytics and error reporting</li>
<li>Project: Work in a group to build a test-driven Django application</li>
</ul> element

element

element
<h2>AngularJS and Building Custom APIs</h2> element

element
<ul>
<li>Basics of AngularJS</li>
<li>Build a Basecamp clone with AngularJS</li>
<li>Building your own custom API with Django and Tastypie</li>
<li>Integrating Django with AngularJS</li>
<li>Final Project: Demonstrate mastery with Django and AngularJS</li>
</ul> element

element

element
<h2>Prepping for Life After Bootcamp</h2> element

element
<ul>
<li>Interview Prep</li>
<li>Presentation Prep</li>
<li>Development ecosystem</li>
</ul> element

element
<p><a href="#/2">Back to top</a></p> element

element
<section>
        <h2>What you'll be learning</h2>
        <p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p>
        <ul>
            <li><a href="#/2/1">Prework</a></li>
            <li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
            <li><a href="#/2/3">Integrating JavaScript and Design</a></li>
            <li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
            <li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
            <li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
        </ul>
    </section>
<section>
        <h2>Editing existing records</h2>
        <pre><code>
def edit_genre(request, genre_id):
    # Similar to the the detail view, we have to find the existing genre we are editing
    genre = Genre.objects.get(id=genre_id)

    # We still check to see if we are submitting the form
    if request.method == "POST":
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(request.POST, instance=genre)
        if form.is_valid():
            if form.save():
                return redirect("/genres/{}".format(genre_id))

    # Or just viewing the form
    else:
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(instance=genre)
    data = {"genre": genre, "form": form}
    return render(request, "genres/edit_genre.html", data)
        </code></pre>
    </section>
<section>
        <h2>Editing existing records</h2>
        <div>
            <div class="col-3">
                <p>Our edit template looks almost identical to our create template because it has the form, but when you actually load the page, the form will be prefilled.</p>
            </div>
            <div class="col-8 col-offset-1">
                <h4>edit_genre.html</h4>
                <pre><code>
<h1>Edit genre {{ genre.name }}</h1>
<form method="post">
    {% csrf_token %}
    {{ form }}
    <input type="submit" value="Update genre">
</form>
                </code></pre>
            </div>
        </div>
        <div class="fragment">
            <div class="col-3">
                <p>Let's also update our detail view so that it's easy to edit a record we are looking at.</p>
            </div>
            <div class="col-8 col-offset-1">
                <h4>view_genre.html</h4>
                <pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it yourself</h2>
        <p>Add edit functionality for movies and actors.</p>
    </section>

element
<section>
<h2>Deleting records</h2>
<p>Last but not least, we want to be able to delete records as well.</p>
<h4>urls.py</h4>
<pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/delete/$', 'hollywood.views.delete_genre', name='delete_genre'),
)
        </code></pre>
<p>This should be starting to look quite repetitive -- that's a good thing.</p>
</section> element

element
<section>
<h2>Deleting records</h2>
<div>
<div class="col-4">
<p>Deleting works a little differently. We don't actually need to go to a page to delete an object, we can simply delete the object in the view, and then redirect the user to the index page.</p>
</div>
<div class="col-7 col-offset-1">
<h4>views.py</h4>
<pre><code>
def delete_genre(request, genre_id):
    genre = Genre.objects.get(id=genre_id)
    genre.delete()
    return redirect("/genres")
                </code></pre>
</div>
</div>
<div class="fragment">
<div class="col-4">
<p>As we did with edit, let's update the detail template so we can easily access the delete action.</p>
</div>
<div class="col-7 col-offset-1">
<h4>view_genre.html</h4>
<pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;a href="{% url "delete_genre" genre.id %}"&gt;Delete genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it yourself</h2>
<p>Guess what? Add delete functionality for actors and movies!</p>
</section> element

element

element
<h2>Deleting records</h2> element

element
<p>Last but not least, we want to be able to delete records as well.</p> element

element
<h4>urls.py</h4> element

element
<pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/delete/$', 'hollywood.views.delete_genre', name='delete_genre'),
)
        </code></pre> element

element
<p>This should be starting to look quite repetitive -- that's a good thing.</p> element

element

element
<h2>Deleting records</h2> element

element
<div>
<div class="col-4">
<p>Deleting works a little differently. We don't actually need to go to a page to delete an object, we can simply delete the object in the view, and then redirect the user to the index page.</p>
</div>
<div class="col-7 col-offset-1">
<h4>views.py</h4>
<pre><code>
def delete_genre(request, genre_id):
    genre = Genre.objects.get(id=genre_id)
    genre.delete()
    return redirect("/genres")
                </code></pre>
</div>
</div> element

element
<div class="fragment">
<div class="col-4">
<p>As we did with edit, let's update the detail template so we can easily access the delete action.</p>
</div>
<div class="col-7 col-offset-1">
<h4>view_genre.html</h4>
<pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;a href="{% url "delete_genre" genre.id %}"&gt;Delete genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
</div>
</div> element

element

element
<h2>Do it yourself</h2> element

element
<p>Guess what? Add delete functionality for actors and movies!</p> element

element
<section>
        <h2>Deleting records</h2>
        <p>Last but not least, we want to be able to delete records as well.</p>
        <h4>urls.py</h4>
        <pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/delete/$', 'hollywood.views.delete_genre', name='delete_genre'),
)
        </code></pre>
        <p>This should be starting to look quite repetitive -- that's a good thing.</p>
    </section>
<section class="titleSlide" data-background="#168eae">
                    <h1>
    File Manipulation
</h1>
                    <a id="yetiLogo" href="http://www.yetihq.com/"><img src="/static/img/yeti-power.png"></a>
                </section>
<section>
    <h2>Brief Python History</h2>
    <p>Python is a scripting language, which means at its core it has a bunch of functionality built in for operations like file manipulation.</p>
    <ul>
        <li>Python was created by Guido van Rossum, Benevolant Dictator for Life (BDFL), in the late 1980's.</li>
        <li>Python has released major versions 1, 2, and 3</li>
        <li>Version 3 of python had some backwards incompatible changes with version 2, so they also created 2.6 and 2.7.</li>
        <li>Many people still use python 2.7 over 3, especially because major operating systems have not converted over yet.</li>
        <li>The community is still slowly making the transition from python 2 to 3 even though 3 was released in December 2008.</li>
        <li>2.7 will be the last release in the version 2 line, it was released in July 2010.</li>
    </ul>
</section>

element
<section>
<h2>Directories and Files</h2>
<p>Python has a library called <code>os</code> which contains scripting utility functions.</p>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br/><br/></li>
<li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br/><br/></li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">import os

print os.getcwd()</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="7">
<pre><code class="python">
print os.getcwd()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<ul>
<li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
<li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
</ul>
</section> element

element

element
<h2>Directories and Files</h2> element

element
<p>Python has a library called <code>os</code> which contains scripting utility functions.</p> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br/><br/></li>
<li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br/><br/></li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">import os

print os.getcwd()</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="7">
<pre><code class="python">
print os.getcwd()
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<ul>
<li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
<li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
</ul> element

element
<section>
        <h2>Directories and Files</h2>
        <p>Python has a library called <code>os</code> which contains scripting utility functions.</p>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br><br><br></li>
                <li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br><br><br></li>
                <li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br><br></li>
                <li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br><br></li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">import os

print os.getcwd()</code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="3">
                <pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="7">
                <pre><code class="python">
print os.getcwd()
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Prework</h2>
        <p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p>
        <ul>
            <li>Command Line: Give your computer instructions like a real programmer</li>
            <li>HTML: Learn the basic building blocks of the front-facing web</li>
            <li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
            <li>Git: Version control is a lifesaver</li>
            <li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
            <li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
            <li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
        </ul>
    </section>
<section>
        <h2>Object-oriented Python and Beginner Django</h2>
        <ul>
            <li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
            <li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
            <li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
            <li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
            <li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
            <li>Project: Build a Django application with user authentication and database storage</li>
        </ul>
    </section>
<section>
        <h2>Integrating JavaScript and Design</h2>
        <ul>
            <li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
            <li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
            <li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
            <li>Using third-party APIs: Query external services like Google and Instagram</li>
            <li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
            <li>Project: Integrate front-end technologies for a more interactive Django application</li>
        </ul>
    </section>
<section>
        <h2>Deleting records</h2>
        <div>
            <div class="col-4">
                <p>Deleting works a little differently. We don't actually need to go to a page to delete an object, we can simply delete the object in the view, and then redirect the user to the index page.</p>
            </div>
            <div class="col-7 col-offset-1">
                <h4>views.py</h4>
                <pre><code>
def delete_genre(request, genre_id):
    genre = Genre.objects.get(id=genre_id)
    genre.delete()
    return redirect("/genres")
                </code></pre>
            </div>
        </div>
        <div class="fragment">
            <div class="col-4">
                <p>As we did with edit, let's update the detail template so we can easily access the delete action.</p>
            </div>
            <div class="col-7 col-offset-1">
                <h4>view_genre.html</h4>
                <pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;a href="{% url "delete_genre" genre.id %}"&gt;Delete genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it yourself</h2>
        <p>Guess what? Add delete functionality for actors and movies!</p>
    </section>
<section>
    <h2>Recap: Basic Django app</h2>
    <p>Congratulations! You made a Django project. It's simple, but captures the functionality that powers most applications you use on the web and in mobile apps.</p>
    <p>You'll start to notice routes just like the ones you created all over the web.</p>
    <h4>urls.py</h4>
    <pre><code>
urlpatterns = patterns('',
    url(r'^genres/$', 'hollywood.views.genres', name='genres'),
    url(r'^genres/new/$', 'hollywood.views.new_genre', name='new_genre'),
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/$', 'hollywood.views.view_genre', name='view_genre'),
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/edit/$', 'hollywood.views.edit_genre', name='edit_genre'),
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/delete/$', 'hollywood.views.delete_genre', name='delete_genre'),
)
    </code></pre>
</section>
<section class="titleSlide" data-background="#168eae">
                    <h1>
    Basic Django App: Edit &amp; Delete
</h1>
                    <a id="yetiLogo" href="http://www.yetihq.com/"><img src="/static/img/yeti-power.png"></a>
                </section>
<section>
        <h2>Do it Yourself</h2>
        <ul>
            <li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
            <li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
        </ul>
    </section>

element
<section>
<h2>Reading a File</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
<li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
<li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
<li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
<li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre>

Hello world!
Hello universe!
                </pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="4">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="6">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Reading a File (Cont.)</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
<li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
<li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
<li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="2">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p>
<ul>
<li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
<li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
<li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
<li>Create new text files for testing out your function!</li>
</ul>
</section> element

element

element
<h2>Reading a File</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
<li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
<li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
<li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
<li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre>

Hello world!
Hello universe!
                </pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="4">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="6">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
</div>
</div> element

element

element
<h2>Reading a File (Cont.)</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
<li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
<li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
<li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="2">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p> element

element
<ul>
<li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
<li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
<li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
<li>Create new text files for testing out your function!</li>
</ul> element

element
<section>
        <h2>Reading a File</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
                <li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
                <li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
                <li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
                <li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre>

Hello world!
Hello universe!
                </pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="4">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="6">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Expand Your Developer Toolkit</h2>
        <ul>
            <li>Pair programming</li>
            <li>Git strategies</li>
            <li>Test-driven development</li>
            <li>HTTP lifecycle</li>
            <li>Computer science topics</li>
            <li>Introduction to dev ops</li>
            <li>Analytics and error reporting</li>
            <li>Project: Work in a group to build a test-driven Django application</li>
        </ul>
    </section>
<section>
        <h2>AngularJS and Building Custom APIs</h2>
        <ul>
            <li>Basics of AngularJS</li>
            <li>Build a Basecamp clone with AngularJS</li>
            <li>Building your own custom API with Django and Tastypie</li>
            <li>Integrating Django with AngularJS</li>
            <li>Final Project: Demonstrate mastery with Django and AngularJS</li>
        </ul>
    </section>
<section>
        <h2>Prepping for Life After Bootcamp</h2>
        <ul>
            <li>Interview Prep</li>
            <li>Presentation Prep</li>
            <li>Development ecosystem</li>
        </ul>
        <p><a href="#/2">Back to top</a></p>
    </section>
<section>
    <h2>More than an education</h2>
    <p>There are a lot of bootcamps out there. At RocketU, you'll be surrounded by the 170+ amazing tech startups at RocketSpace.</p>
    <br>
    <img src="/static/img/rocketspace-name-logo-large-300x116.png" id="rocketSpaceLogo">
</section>

element
<section>
<h2>A network of your own</h2>
<p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p>
</section> element

element
<section>
<h2>RocketSpace staff</h2>
</section> element

element
<section>
<h2>Your instructors</h2>
<h4>Yeti</h4>
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div>
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div>
<div class="footer">
</div>
</section> element

element
<h2>A network of your own</h2> element

element
<p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p> element

element

element
<h2>RocketSpace staff</h2> element

element

element
<h2>Your instructors</h2> element

element
<h4>Yeti</h4> element

element
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div> element

element
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div> element

element
<div class="footer">
</div> element

element

element
<h2>Your classmates</h2> element

element
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul> element

element
<p><a href="#/4">Back to top</a></p> element

element

element
<h2>Prove you can program.</h2> element

element
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p> element

element
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p> element

element
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul> element

element
<section>
        <h2>A network of your own</h2>
        <p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p>
    </section>
<section>
    <h2>Laying out our application</h2>
    <p>Our Django app will have this site map. This basic layout can be found in many applications.</p>
    <img src="/static/img/hollywood_site_map.png">
</section>

element
<section>
<h2>Editing existing records</h2>
<p>Editing an existing object is a bit of a combination of the create view and the detail view -- you need a form to edit and process, but you are also finding an existing record.</p>
<p>Let's start by adding our route.</p>
<pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/edit/$', 'hollywood.views.edit_genre', name='edit_genre'),
)
        </code></pre>
</section> element

element
<section>
<h2>Editing existing records</h2>
<pre><code>
def edit_genre(request, genre_id):
    # Similar to the the detail view, we have to find the existing genre we are editing
    genre = Genre.objects.get(id=genre_id)

    # We still check to see if we are submitting the form
    if request.method == "POST":
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(request.POST, instance=genre)
        if form.is_valid():
            if form.save():
                return redirect("/genres/{}".format(genre_id))

    # Or just viewing the form
    else:
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(instance=genre)
    data = {"genre": genre, "form": form}
    return render(request, "genres/edit_genre.html", data)
        </code></pre>
</section> element

element
<section>
<h2>Editing existing records</h2>
<div>
<div class="col-3">
<p>Our edit template looks almost identical to our create template because it has the form, but when you actually load the page, the form will be prefilled.</p>
</div>
<div class="col-8 col-offset-1">
<h4>edit_genre.html</h4>
<pre><code>
<h1>Edit genre {{ genre.name }}</h1>
<form method="post">
    {% csrf_token %}
    {{ form }}
    <input type="submit" value="Update genre"/>
</form>
                </code></pre>
</div>
</div>
<div class="fragment">
<div class="col-3">
<p>Let's also update our detail view so that it's easy to edit a record we are looking at.</p>
</div>
<div class="col-8 col-offset-1">
<h4>view_genre.html</h4>
<pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it yourself</h2>
<p>Add edit functionality for movies and actors.</p>
</section> element

element

element
<h2>Editing existing records</h2> element

element
<p>Editing an existing object is a bit of a combination of the create view and the detail view -- you need a form to edit and process, but you are also finding an existing record.</p> element

element
<p>Let's start by adding our route.</p> element

element
<pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/edit/$', 'hollywood.views.edit_genre', name='edit_genre'),
)
        </code></pre> element

element

element
<h2>Editing existing records</h2> element

element
<pre><code>
def edit_genre(request, genre_id):
    # Similar to the the detail view, we have to find the existing genre we are editing
    genre = Genre.objects.get(id=genre_id)

    # We still check to see if we are submitting the form
    if request.method == "POST":
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(request.POST, instance=genre)
        if form.is_valid():
            if form.save():
                return redirect("/genres/{}".format(genre_id))

    # Or just viewing the form
    else:
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(instance=genre)
    data = {"genre": genre, "form": form}
    return render(request, "genres/edit_genre.html", data)
        </code></pre> element

element

element
<h2>Editing existing records</h2> element

element
<div>
<div class="col-3">
<p>Our edit template looks almost identical to our create template because it has the form, but when you actually load the page, the form will be prefilled.</p>
</div>
<div class="col-8 col-offset-1">
<h4>edit_genre.html</h4>
<pre><code>
<h1>Edit genre {{ genre.name }}</h1>
<form method="post">
    {% csrf_token %}
    {{ form }}
    <input type="submit" value="Update genre"/>
</form>
                </code></pre>
</div>
</div> element

element
<div class="fragment">
<div class="col-3">
<p>Let's also update our detail view so that it's easy to edit a record we are looking at.</p>
</div>
<div class="col-8 col-offset-1">
<h4>view_genre.html</h4>
<pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
</div>
</div> element

element

element
<h2>Do it yourself</h2> element

element
<p>Add edit functionality for movies and actors.</p> element

element
<section>
        <h2>Editing existing records</h2>
        <p>Editing an existing object is a bit of a combination of the create view and the detail view -- you need a form to edit and process, but you are also finding an existing record.</p>
        <p>Let's start by adding our route.</p>
        <pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/edit/$', 'hollywood.views.edit_genre', name='edit_genre'),
)
        </code></pre>
    </section>
<section>
        <h2>Reading a File (Cont.)</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
                <li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
                <li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
                <li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="2">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p>
        <ul>
            <li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
            <li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
            <li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
            <li>Create new text files for testing out your function!</li>
        </ul>
    </section>

element
<section>
<h2>Writing a File</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
<li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
<li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Writing a File (Cont.)</h2>
<div class="col-4">
<br/>
<ul>
<li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Context Manager</h2>
<p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p>
<p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p>
<p>They are used to run certain functions before and after a block of code.</p>
<br/><br/>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
<li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
<li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p>
<p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p>
<div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div>
<p style="clear:both;"><br/>Will become</p>
<div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div>
<p style="clear:both"><br/>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p>
<div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div>
</section> element

element

element
<h2>Writing a File</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
<li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
<li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
</div>
</div> element

element

element
<h2>Writing a File (Cont.)</h2> element

element
<div class="col-4">
<br/>
<ul>
<li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
</div>
</div> element

element

element
<h2>Context Manager</h2> element

element
<p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p> element

element
<p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p> element

element
<p>They are used to run certain functions before and after a block of code.</p> element

element
<br/> element
<br/> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
<li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
<li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p> element

element
<p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p> element

element
<div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div> element

element
<p style="clear:both;"><br/>Will become</p> element

element
<div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div> element

element
<p style="clear:both"><br/>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p> element

element
<div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div> element

element
<section>
        <h2>Writing a File</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
                <li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
                <li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>RocketSpace staff</h2>
    </section>

element
<h2>Your instructors</h2> element

element
<h4>Yeti</h4> element

element
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div> element

element
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div> element

element
<div class="footer">
</div> element

element

element
<h2>Your classmates</h2> element

element
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul> element

element
<p><a href="#/4">Back to top</a></p> element

element

element
<h2>Prove you can program.</h2> element

element
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p> element

element
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p> element

element
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul> element

element
<section>
        <h2>Your classmates</h2>
        <ul>
            <li>A brain</li>
            <li>An athlete</li>
            <li>A basket case</li>
            <li>A princess</li>
            <li>And a criminal</li>
        </ul>
        <p><a href="#/4">Back to top</a></p>
    </section>
<section>
        <h2>Editing existing records</h2>
        <pre><code>
def edit_genre(request, genre_id):
    # Similar to the the detail view, we have to find the existing genre we are editing
    genre = Genre.objects.get(id=genre_id)

    # We still check to see if we are submitting the form
    if request.method == "POST":
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(request.POST, instance=genre)
        if form.is_valid():
            if form.save():
                return redirect("/genres/{}".format(genre_id))

    # Or just viewing the form
    else:
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(instance=genre)
    data = {"genre": genre, "form": form}
    return render(request, "genres/edit_genre.html", data)
        </code></pre>
    </section>
<section>
        <h2>Editing existing records</h2>
        <div>
            <div class="col-3">
                <p>Our edit template looks almost identical to our create template because it has the form, but when you actually load the page, the form will be prefilled.</p>
            </div>
            <div class="col-8 col-offset-1">
                <h4>edit_genre.html</h4>
                <pre><code>
<h1>Edit genre {{ genre.name }}</h1>
<form method="post">
    {% csrf_token %}
    {{ form }}
    <input type="submit" value="Update genre">
</form>
                </code></pre>
            </div>
        </div>
        <div class="fragment">
            <div class="col-3">
                <p>Let's also update our detail view so that it's easy to edit a record we are looking at.</p>
            </div>
            <div class="col-8 col-offset-1">
                <h4>view_genre.html</h4>
                <pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it yourself</h2>
        <p>Add edit functionality for movies and actors.</p>
    </section>

element
<section>
<h2>Deleting records</h2>
<p>Last but not least, we want to be able to delete records as well.</p>
<h4>urls.py</h4>
<pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/delete/$', 'hollywood.views.delete_genre', name='delete_genre'),
)
        </code></pre>
<p>This should be starting to look quite repetitive -- that's a good thing.</p>
</section> element

element
<section>
<h2>Deleting records</h2>
<div>
<div class="col-4">
<p>Deleting works a little differently. We don't actually need to go to a page to delete an object, we can simply delete the object in the view, and then redirect the user to the index page.</p>
</div>
<div class="col-7 col-offset-1">
<h4>views.py</h4>
<pre><code>
def delete_genre(request, genre_id):
    genre = Genre.objects.get(id=genre_id)
    genre.delete()
    return redirect("/genres")
                </code></pre>
</div>
</div>
<div class="fragment">
<div class="col-4">
<p>As we did with edit, let's update the detail template so we can easily access the delete action.</p>
</div>
<div class="col-7 col-offset-1">
<h4>view_genre.html</h4>
<pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;a href="{% url "delete_genre" genre.id %}"&gt;Delete genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it yourself</h2>
<p>Guess what? Add delete functionality for actors and movies!</p>
</section> element

element

element
<h2>Deleting records</h2> element

element
<p>Last but not least, we want to be able to delete records as well.</p> element

element
<h4>urls.py</h4> element

element
<pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/delete/$', 'hollywood.views.delete_genre', name='delete_genre'),
)
        </code></pre> element

element
<p>This should be starting to look quite repetitive -- that's a good thing.</p> element

element

element
<h2>Deleting records</h2> element

element
<div>
<div class="col-4">
<p>Deleting works a little differently. We don't actually need to go to a page to delete an object, we can simply delete the object in the view, and then redirect the user to the index page.</p>
</div>
<div class="col-7 col-offset-1">
<h4>views.py</h4>
<pre><code>
def delete_genre(request, genre_id):
    genre = Genre.objects.get(id=genre_id)
    genre.delete()
    return redirect("/genres")
                </code></pre>
</div>
</div> element

element
<div class="fragment">
<div class="col-4">
<p>As we did with edit, let's update the detail template so we can easily access the delete action.</p>
</div>
<div class="col-7 col-offset-1">
<h4>view_genre.html</h4>
<pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;a href="{% url "delete_genre" genre.id %}"&gt;Delete genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
</div>
</div> element

element

element
<h2>Do it yourself</h2> element

element
<p>Guess what? Add delete functionality for actors and movies!</p> element

element
<section>
        <h2>Deleting records</h2>
        <p>Last but not least, we want to be able to delete records as well.</p>
        <h4>urls.py</h4>
        <pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/delete/$', 'hollywood.views.delete_genre', name='delete_genre'),
)
        </code></pre>
        <p>This should be starting to look quite repetitive -- that's a good thing.</p>
    </section>
<section>
        <h2>Deleting records</h2>
        <div>
            <div class="col-4">
                <p>Deleting works a little differently. We don't actually need to go to a page to delete an object, we can simply delete the object in the view, and then redirect the user to the index page.</p>
            </div>
            <div class="col-7 col-offset-1">
                <h4>views.py</h4>
                <pre><code>
def delete_genre(request, genre_id):
    genre = Genre.objects.get(id=genre_id)
    genre.delete()
    return redirect("/genres")
                </code></pre>
            </div>
        </div>
        <div class="fragment">
            <div class="col-4">
                <p>As we did with edit, let's update the detail template so we can easily access the delete action.</p>
            </div>
            <div class="col-7 col-offset-1">
                <h4>view_genre.html</h4>
                <pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;a href="{% url "delete_genre" genre.id %}"&gt;Delete genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Writing a File (Cont.)</h2>
        <div class="col-4">
            <br>
            <ul>
                <li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br><br><br><br><br></li>
                <li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br><br><br><br><br></li>
                <li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="3">
                <pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Context Manager</h2>
        <p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p>
        <p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p>
        <p>They are used to run certain functions before and after a block of code.</p>
        <br><br>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
                <li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
                <li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p>
        <p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p>
        <div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div>
        <p style="clear:both;"><br>Will become</p>
        <div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div>
        <p style="clear:both"><br>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p>
        <div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div>
    </section>
<section>
    <h2>Prove you can program.</h2>
    <p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
    <p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
    <ul>
        <li><a target="_blank" href="http://codingbat.com/python">Coding Bat</a></li>
        <li><a target="_blank" href="http://www.pythonchallenge.com/">Python Challenge</a></li>
        <li><a target="_blank" href="http://www.coderbyte.com/">Coderbyte</a></li>
    </ul>
</section>
<section>
    <h2>Learn web development. Build awesome things.</h2>
    <p>
        You quit your job, you told your friends and family you're doing something crazy, maybe you moved here. You're ready to learn, intensively, for the next twelve weeks. By the time you're done, you'll be able to build pretty much anything you see on the internet.
    </p>
</section>
<section>
        <h2>Do it yourself</h2>
        <p>Guess what? Add delete functionality for actors and movies!</p>
    </section>
<section>
    <h2>Recap: Basic Django app</h2>
    <p>Congratulations! You made a Django project. It's simple, but captures the functionality that powers most applications you use on the web and in mobile apps.</p>
    <p>You'll start to notice routes just like the ones you created all over the web.</p>
    <h4>urls.py</h4>
    <pre><code>
urlpatterns = patterns('',
    url(r'^genres/$', 'hollywood.views.genres', name='genres'),
    url(r'^genres/new/$', 'hollywood.views.new_genre', name='new_genre'),
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/$', 'hollywood.views.view_genre', name='view_genre'),
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/edit/$', 'hollywood.views.edit_genre', name='edit_genre'),
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/delete/$', 'hollywood.views.delete_genre', name='delete_genre'),
)
    </code></pre>
</section>
<section class="titleSlide" data-background="#168eae">
                    <h1>
    Basic Django App: Edit &amp; Delete
</h1>
                    <a id="yetiLogo" href="http://www.yetihq.com/"><img src="/static/img/yeti-power.png"></a>
                </section>
<section>
    <h2>Laying out our application</h2>
    <p>Our Django app will have this site map. This basic layout can be found in many applications.</p>
    <img src="/static/img/hollywood_site_map.png">
</section>

element
<section>
<h2>Editing existing records</h2>
<p>Editing an existing object is a bit of a combination of the create view and the detail view -- you need a form to edit and process, but you are also finding an existing record.</p>
<p>Let's start by adding our route.</p>
<pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/edit/$', 'hollywood.views.edit_genre', name='edit_genre'),
)
        </code></pre>
</section> element

element
<section>
<h2>Editing existing records</h2>
<pre><code>
def edit_genre(request, genre_id):
    # Similar to the the detail view, we have to find the existing genre we are editing
    genre = Genre.objects.get(id=genre_id)

    # We still check to see if we are submitting the form
    if request.method == "POST":
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(request.POST, instance=genre)
        if form.is_valid():
            if form.save():
                return redirect("/genres/{}".format(genre_id))

    # Or just viewing the form
    else:
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(instance=genre)
    data = {"genre": genre, "form": form}
    return render(request, "genres/edit_genre.html", data)
        </code></pre>
</section> element

element
<section>
<h2>Editing existing records</h2>
<div>
<div class="col-3">
<p>Our edit template looks almost identical to our create template because it has the form, but when you actually load the page, the form will be prefilled.</p>
</div>
<div class="col-8 col-offset-1">
<h4>edit_genre.html</h4>
<pre><code>
<h1>Edit genre {{ genre.name }}</h1>
<form method="post">
    {% csrf_token %}
    {{ form }}
    <input type="submit" value="Update genre"/>
</form>
                </code></pre>
</div>
</div>
<div class="fragment">
<div class="col-3">
<p>Let's also update our detail view so that it's easy to edit a record we are looking at.</p>
</div>
<div class="col-8 col-offset-1">
<h4>view_genre.html</h4>
<pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it yourself</h2>
<p>Add edit functionality for movies and actors.</p>
</section> element

element

element
<h2>Editing existing records</h2> element

element
<p>Editing an existing object is a bit of a combination of the create view and the detail view -- you need a form to edit and process, but you are also finding an existing record.</p> element

element
<p>Let's start by adding our route.</p> element

element
<pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/edit/$', 'hollywood.views.edit_genre', name='edit_genre'),
)
        </code></pre> element

element

element
<h2>Editing existing records</h2> element

element
<pre><code>
def edit_genre(request, genre_id):
    # Similar to the the detail view, we have to find the existing genre we are editing
    genre = Genre.objects.get(id=genre_id)

    # We still check to see if we are submitting the form
    if request.method == "POST":
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(request.POST, instance=genre)
        if form.is_valid():
            if form.save():
                return redirect("/genres/{}".format(genre_id))

    # Or just viewing the form
    else:
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(instance=genre)
    data = {"genre": genre, "form": form}
    return render(request, "genres/edit_genre.html", data)
        </code></pre> element

element

element
<h2>Editing existing records</h2> element

element
<div>
<div class="col-3">
<p>Our edit template looks almost identical to our create template because it has the form, but when you actually load the page, the form will be prefilled.</p>
</div>
<div class="col-8 col-offset-1">
<h4>edit_genre.html</h4>
<pre><code>
<h1>Edit genre {{ genre.name }}</h1>
<form method="post">
    {% csrf_token %}
    {{ form }}
    <input type="submit" value="Update genre"/>
</form>
                </code></pre>
</div>
</div> element

element
<div class="fragment">
<div class="col-3">
<p>Let's also update our detail view so that it's easy to edit a record we are looking at.</p>
</div>
<div class="col-8 col-offset-1">
<h4>view_genre.html</h4>
<pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
</div>
</div> element

element

element
<h2>Do it yourself</h2> element

element
<p>Add edit functionality for movies and actors.</p> element

element
<section>
        <h2>Editing existing records</h2>
        <p>Editing an existing object is a bit of a combination of the create view and the detail view -- you need a form to edit and process, but you are also finding an existing record.</p>
        <p>Let's start by adding our route.</p>
        <pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/edit/$', 'hollywood.views.edit_genre', name='edit_genre'),
)
        </code></pre>
    </section>
<section class="titleSlide" data-background="#168eae">
                    <h1>
    File Manipulation
</h1>
                    <a id="yetiLogo" href="http://www.yetihq.com/"><img src="/static/img/yeti-power.png"></a>
                </section>
<section>
    <h2>Brief Python History</h2>
    <p>Python is a scripting language, which means at its core it has a bunch of functionality built in for operations like file manipulation.</p>
    <ul>
        <li>Python was created by Guido van Rossum, Benevolant Dictator for Life (BDFL), in the late 1980's.</li>
        <li>Python has released major versions 1, 2, and 3</li>
        <li>Version 3 of python had some backwards incompatible changes with version 2, so they also created 2.6 and 2.7.</li>
        <li>Many people still use python 2.7 over 3, especially because major operating systems have not converted over yet.</li>
        <li>The community is still slowly making the transition from python 2 to 3 even though 3 was released in December 2008.</li>
        <li>2.7 will be the last release in the version 2 line, it was released in July 2010.</li>
    </ul>
</section>

element
<section>
<h2>Directories and Files</h2>
<p>Python has a library called <code>os</code> which contains scripting utility functions.</p>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br/><br/></li>
<li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br/><br/></li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">import os

print os.getcwd()</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="7">
<pre><code class="python">
print os.getcwd()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<ul>
<li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
<li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
</ul>
</section> element

element

element
<h2>Directories and Files</h2> element

element
<p>Python has a library called <code>os</code> which contains scripting utility functions.</p> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br/><br/></li>
<li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br/><br/></li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">import os

print os.getcwd()</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="7">
<pre><code class="python">
print os.getcwd()
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<ul>
<li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
<li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
</ul> element

element
<section>
        <h2>Directories and Files</h2>
        <p>Python has a library called <code>os</code> which contains scripting utility functions.</p>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br><br><br></li>
                <li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br><br><br></li>
                <li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br><br></li>
                <li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br><br></li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">import os

print os.getcwd()</code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="3">
                <pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="7">
                <pre><code class="python">
print os.getcwd()
                </code></pre>
            </div>
        </div>
    </section>

element
<section>
<h2>What you'll be learning</h2>
<p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p>
<ul>
<li><a href="#/2/1">Prework</a></li>
<li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
<li><a href="#/2/3">Integrating JavaScript and Design</a></li>
<li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
<li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
<li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
</ul>
</section> element

element
<section>
<h2>Prework</h2>
<p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p>
<ul>
<li>Command Line: Give your computer instructions like a real programmer</li>
<li>HTML: Learn the basic building blocks of the front-facing web</li>
<li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
<li>Git: Version control is a lifesaver</li>
<li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
<li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
<li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
</ul>
</section> element

element
<section>
<h2>Object-oriented Python and Beginner Django</h2>
<ul>
<li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
<li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
<li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
<li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
<li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
<li>Project: Build a Django application with user authentication and database storage</li>
</ul>
</section> element

element
<section>
<h2>Integrating JavaScript and Design</h2>
<ul>
<li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
<li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
<li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
<li>Using third-party APIs: Query external services like Google and Instagram</li>
<li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
<li>Project: Integrate front-end technologies for a more interactive Django application</li>
</ul>
</section> element

element
<section>
<h2>Expand Your Developer Toolkit</h2>
<ul>
<li>Pair programming</li>
<li>Git strategies</li>
<li>Test-driven development</li>
<li>HTTP lifecycle</li>
<li>Computer science topics</li>
<li>Introduction to dev ops</li>
<li>Analytics and error reporting</li>
<li>Project: Work in a group to build a test-driven Django application</li>
</ul>
</section> element

element
<section>
<h2>AngularJS and Building Custom APIs</h2>
<ul>
<li>Basics of AngularJS</li>
<li>Build a Basecamp clone with AngularJS</li>
<li>Building your own custom API with Django and Tastypie</li>
<li>Integrating Django with AngularJS</li>
<li>Final Project: Demonstrate mastery with Django and AngularJS</li>
</ul>
</section> element

element
<section>
<h2>Prepping for Life After Bootcamp</h2>
<ul>
<li>Interview Prep</li>
<li>Presentation Prep</li>
<li>Development ecosystem</li>
</ul>
<p><a href="#/2">Back to top</a></p>
</section> element

element

element
<h2>What you'll be learning</h2> element

element
<p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p> element

element
<ul>
<li><a href="#/2/1">Prework</a></li>
<li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
<li><a href="#/2/3">Integrating JavaScript and Design</a></li>
<li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
<li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
<li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
</ul> element

element

element
<h2>Prework</h2> element

element
<p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p> element

element
<ul>
<li>Command Line: Give your computer instructions like a real programmer</li>
<li>HTML: Learn the basic building blocks of the front-facing web</li>
<li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
<li>Git: Version control is a lifesaver</li>
<li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
<li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
<li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
</ul> element

element

element
<h2>Object-oriented Python and Beginner Django</h2> element

element
<ul>
<li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
<li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
<li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
<li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
<li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
<li>Project: Build a Django application with user authentication and database storage</li>
</ul> element

element

element
<h2>Integrating JavaScript and Design</h2> element

element
<ul>
<li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
<li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
<li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
<li>Using third-party APIs: Query external services like Google and Instagram</li>
<li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
<li>Project: Integrate front-end technologies for a more interactive Django application</li>
</ul> element

element

element
<h2>Expand Your Developer Toolkit</h2> element

element
<ul>
<li>Pair programming</li>
<li>Git strategies</li>
<li>Test-driven development</li>
<li>HTTP lifecycle</li>
<li>Computer science topics</li>
<li>Introduction to dev ops</li>
<li>Analytics and error reporting</li>
<li>Project: Work in a group to build a test-driven Django application</li>
</ul> element

element

element
<h2>AngularJS and Building Custom APIs</h2> element

element
<ul>
<li>Basics of AngularJS</li>
<li>Build a Basecamp clone with AngularJS</li>
<li>Building your own custom API with Django and Tastypie</li>
<li>Integrating Django with AngularJS</li>
<li>Final Project: Demonstrate mastery with Django and AngularJS</li>
</ul> element

element

element
<h2>Prepping for Life After Bootcamp</h2> element

element
<ul>
<li>Interview Prep</li>
<li>Presentation Prep</li>
<li>Development ecosystem</li>
</ul> element

element
<p><a href="#/2">Back to top</a></p> element

element
<section>
        <h2>What you'll be learning</h2>
        <p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p>
        <ul>
            <li><a href="#/2/1">Prework</a></li>
            <li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
            <li><a href="#/2/3">Integrating JavaScript and Design</a></li>
            <li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
            <li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
            <li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
        </ul>
    </section>
<section>
        <h2>Editing existing records</h2>
        <pre><code>
def edit_genre(request, genre_id):
    # Similar to the the detail view, we have to find the existing genre we are editing
    genre = Genre.objects.get(id=genre_id)

    # We still check to see if we are submitting the form
    if request.method == "POST":
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(request.POST, instance=genre)
        if form.is_valid():
            if form.save():
                return redirect("/genres/{}".format(genre_id))

    # Or just viewing the form
    else:
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(instance=genre)
    data = {"genre": genre, "form": form}
    return render(request, "genres/edit_genre.html", data)
        </code></pre>
    </section>
<section>
        <h2>Editing existing records</h2>
        <div>
            <div class="col-3">
                <p>Our edit template looks almost identical to our create template because it has the form, but when you actually load the page, the form will be prefilled.</p>
            </div>
            <div class="col-8 col-offset-1">
                <h4>edit_genre.html</h4>
                <pre><code>
<h1>Edit genre {{ genre.name }}</h1>
<form method="post">
    {% csrf_token %}
    {{ form }}
    <input type="submit" value="Update genre">
</form>
                </code></pre>
            </div>
        </div>
        <div class="fragment">
            <div class="col-3">
                <p>Let's also update our detail view so that it's easy to edit a record we are looking at.</p>
            </div>
            <div class="col-8 col-offset-1">
                <h4>view_genre.html</h4>
                <pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it yourself</h2>
        <p>Add edit functionality for movies and actors.</p>
    </section>

element
<section>
<h2>Deleting records</h2>
<p>Last but not least, we want to be able to delete records as well.</p>
<h4>urls.py</h4>
<pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/delete/$', 'hollywood.views.delete_genre', name='delete_genre'),
)
        </code></pre>
<p>This should be starting to look quite repetitive -- that's a good thing.</p>
</section> element

element
<section>
<h2>Deleting records</h2>
<div>
<div class="col-4">
<p>Deleting works a little differently. We don't actually need to go to a page to delete an object, we can simply delete the object in the view, and then redirect the user to the index page.</p>
</div>
<div class="col-7 col-offset-1">
<h4>views.py</h4>
<pre><code>
def delete_genre(request, genre_id):
    genre = Genre.objects.get(id=genre_id)
    genre.delete()
    return redirect("/genres")
                </code></pre>
</div>
</div>
<div class="fragment">
<div class="col-4">
<p>As we did with edit, let's update the detail template so we can easily access the delete action.</p>
</div>
<div class="col-7 col-offset-1">
<h4>view_genre.html</h4>
<pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;a href="{% url "delete_genre" genre.id %}"&gt;Delete genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it yourself</h2>
<p>Guess what? Add delete functionality for actors and movies!</p>
</section> element

element

element
<h2>Deleting records</h2> element

element
<p>Last but not least, we want to be able to delete records as well.</p> element

element
<h4>urls.py</h4> element

element
<pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/delete/$', 'hollywood.views.delete_genre', name='delete_genre'),
)
        </code></pre> element

element
<p>This should be starting to look quite repetitive -- that's a good thing.</p> element

element

element
<h2>Deleting records</h2> element

element
<div>
<div class="col-4">
<p>Deleting works a little differently. We don't actually need to go to a page to delete an object, we can simply delete the object in the view, and then redirect the user to the index page.</p>
</div>
<div class="col-7 col-offset-1">
<h4>views.py</h4>
<pre><code>
def delete_genre(request, genre_id):
    genre = Genre.objects.get(id=genre_id)
    genre.delete()
    return redirect("/genres")
                </code></pre>
</div>
</div> element

element
<div class="fragment">
<div class="col-4">
<p>As we did with edit, let's update the detail template so we can easily access the delete action.</p>
</div>
<div class="col-7 col-offset-1">
<h4>view_genre.html</h4>
<pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;a href="{% url "delete_genre" genre.id %}"&gt;Delete genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
</div>
</div> element

element

element
<h2>Do it yourself</h2> element

element
<p>Guess what? Add delete functionality for actors and movies!</p> element

element
<section>
        <h2>Deleting records</h2>
        <p>Last but not least, we want to be able to delete records as well.</p>
        <h4>urls.py</h4>
        <pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/delete/$', 'hollywood.views.delete_genre', name='delete_genre'),
)
        </code></pre>
        <p>This should be starting to look quite repetitive -- that's a good thing.</p>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <ul>
            <li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
            <li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
        </ul>
    </section>

element
<section>
<h2>Reading a File</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
<li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
<li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
<li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
<li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre>

Hello world!
Hello universe!
                </pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="4">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="6">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Reading a File (Cont.)</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
<li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
<li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
<li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="2">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p>
<ul>
<li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
<li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
<li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
<li>Create new text files for testing out your function!</li>
</ul>
</section> element

element

element
<h2>Reading a File</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
<li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
<li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
<li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
<li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre>

Hello world!
Hello universe!
                </pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="4">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="6">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
</div>
</div> element

element

element
<h2>Reading a File (Cont.)</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
<li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
<li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
<li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="2">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p> element

element
<ul>
<li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
<li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
<li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
<li>Create new text files for testing out your function!</li>
</ul> element

element
<section>
        <h2>Reading a File</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
                <li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
                <li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
                <li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
                <li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre>

Hello world!
Hello universe!
                </pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="4">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="6">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Prework</h2>
        <p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p>
        <ul>
            <li>Command Line: Give your computer instructions like a real programmer</li>
            <li>HTML: Learn the basic building blocks of the front-facing web</li>
            <li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
            <li>Git: Version control is a lifesaver</li>
            <li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
            <li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
            <li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
        </ul>
    </section>
<section>
        <h2>Object-oriented Python and Beginner Django</h2>
        <ul>
            <li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
            <li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
            <li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
            <li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
            <li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
            <li>Project: Build a Django application with user authentication and database storage</li>
        </ul>
    </section>
<section>
        <h2>Integrating JavaScript and Design</h2>
        <ul>
            <li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
            <li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
            <li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
            <li>Using third-party APIs: Query external services like Google and Instagram</li>
            <li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
            <li>Project: Integrate front-end technologies for a more interactive Django application</li>
        </ul>
    </section>
<section>
        <h2>Expand Your Developer Toolkit</h2>
        <ul>
            <li>Pair programming</li>
            <li>Git strategies</li>
            <li>Test-driven development</li>
            <li>HTTP lifecycle</li>
            <li>Computer science topics</li>
            <li>Introduction to dev ops</li>
            <li>Analytics and error reporting</li>
            <li>Project: Work in a group to build a test-driven Django application</li>
        </ul>
    </section>
<section>
        <h2>AngularJS and Building Custom APIs</h2>
        <ul>
            <li>Basics of AngularJS</li>
            <li>Build a Basecamp clone with AngularJS</li>
            <li>Building your own custom API with Django and Tastypie</li>
            <li>Integrating Django with AngularJS</li>
            <li>Final Project: Demonstrate mastery with Django and AngularJS</li>
        </ul>
    </section>
<section>
        <h2>Deleting records</h2>
        <div>
            <div class="col-4">
                <p>Deleting works a little differently. We don't actually need to go to a page to delete an object, we can simply delete the object in the view, and then redirect the user to the index page.</p>
            </div>
            <div class="col-7 col-offset-1">
                <h4>views.py</h4>
                <pre><code>
def delete_genre(request, genre_id):
    genre = Genre.objects.get(id=genre_id)
    genre.delete()
    return redirect("/genres")
                </code></pre>
            </div>
        </div>
        <div class="fragment">
            <div class="col-4">
                <p>As we did with edit, let's update the detail template so we can easily access the delete action.</p>
            </div>
            <div class="col-7 col-offset-1">
                <h4>view_genre.html</h4>
                <pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;a href="{% url "delete_genre" genre.id %}"&gt;Delete genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it yourself</h2>
        <p>Guess what? Add delete functionality for actors and movies!</p>
    </section>
<section>
    <h2>Recap: Basic Django app</h2>
    <p>Congratulations! You made a Django project. It's simple, but captures the functionality that powers most applications you use on the web and in mobile apps.</p>
    <p>You'll start to notice routes just like the ones you created all over the web.</p>
    <h4>urls.py</h4>
    <pre><code>
urlpatterns = patterns('',
    url(r'^genres/$', 'hollywood.views.genres', name='genres'),
    url(r'^genres/new/$', 'hollywood.views.new_genre', name='new_genre'),
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/$', 'hollywood.views.view_genre', name='view_genre'),
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/edit/$', 'hollywood.views.edit_genre', name='edit_genre'),
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/delete/$', 'hollywood.views.delete_genre', name='delete_genre'),
)
    </code></pre>
</section>
<section class="titleSlide" data-background="#168eae">
                    <h1>
    Basic Django App: Edit &amp; Delete
</h1>
                    <a id="yetiLogo" href="http://www.yetihq.com/"><img src="/static/img/yeti-power.png"></a>
                </section>
<section>
    <h2>Laying out our application</h2>
    <p>Our Django app will have this site map. This basic layout can be found in many applications.</p>
    <img src="/static/img/hollywood_site_map.png">
</section>

element
<section>
<h2>Editing existing records</h2>
<p>Editing an existing object is a bit of a combination of the create view and the detail view -- you need a form to edit and process, but you are also finding an existing record.</p>
<p>Let's start by adding our route.</p>
<pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/edit/$', 'hollywood.views.edit_genre', name='edit_genre'),
)
        </code></pre>
</section> element

element
<section>
<h2>Editing existing records</h2>
<pre><code>
def edit_genre(request, genre_id):
    # Similar to the the detail view, we have to find the existing genre we are editing
    genre = Genre.objects.get(id=genre_id)

    # We still check to see if we are submitting the form
    if request.method == "POST":
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(request.POST, instance=genre)
        if form.is_valid():
            if form.save():
                return redirect("/genres/{}".format(genre_id))

    # Or just viewing the form
    else:
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(instance=genre)
    data = {"genre": genre, "form": form}
    return render(request, "genres/edit_genre.html", data)
        </code></pre>
</section> element

element
<section>
<h2>Editing existing records</h2>
<div>
<div class="col-3">
<p>Our edit template looks almost identical to our create template because it has the form, but when you actually load the page, the form will be prefilled.</p>
</div>
<div class="col-8 col-offset-1">
<h4>edit_genre.html</h4>
<pre><code>
<h1>Edit genre {{ genre.name }}</h1>
<form method="post">
    {% csrf_token %}
    {{ form }}
    <input type="submit" value="Update genre"/>
</form>
                </code></pre>
</div>
</div>
<div class="fragment">
<div class="col-3">
<p>Let's also update our detail view so that it's easy to edit a record we are looking at.</p>
</div>
<div class="col-8 col-offset-1">
<h4>view_genre.html</h4>
<pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it yourself</h2>
<p>Add edit functionality for movies and actors.</p>
</section> element

element

element
<h2>Editing existing records</h2> element

element
<p>Editing an existing object is a bit of a combination of the create view and the detail view -- you need a form to edit and process, but you are also finding an existing record.</p> element

element
<p>Let's start by adding our route.</p> element

element
<pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/edit/$', 'hollywood.views.edit_genre', name='edit_genre'),
)
        </code></pre> element

element

element
<h2>Editing existing records</h2> element

element
<pre><code>
def edit_genre(request, genre_id):
    # Similar to the the detail view, we have to find the existing genre we are editing
    genre = Genre.objects.get(id=genre_id)

    # We still check to see if we are submitting the form
    if request.method == "POST":
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(request.POST, instance=genre)
        if form.is_valid():
            if form.save():
                return redirect("/genres/{}".format(genre_id))

    # Or just viewing the form
    else:
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(instance=genre)
    data = {"genre": genre, "form": form}
    return render(request, "genres/edit_genre.html", data)
        </code></pre> element

element

element
<h2>Editing existing records</h2> element

element
<div>
<div class="col-3">
<p>Our edit template looks almost identical to our create template because it has the form, but when you actually load the page, the form will be prefilled.</p>
</div>
<div class="col-8 col-offset-1">
<h4>edit_genre.html</h4>
<pre><code>
<h1>Edit genre {{ genre.name }}</h1>
<form method="post">
    {% csrf_token %}
    {{ form }}
    <input type="submit" value="Update genre"/>
</form>
                </code></pre>
</div>
</div> element

element
<div class="fragment">
<div class="col-3">
<p>Let's also update our detail view so that it's easy to edit a record we are looking at.</p>
</div>
<div class="col-8 col-offset-1">
<h4>view_genre.html</h4>
<pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
</div>
</div> element

element

element
<h2>Do it yourself</h2> element

element
<p>Add edit functionality for movies and actors.</p> element

element
<section>
        <h2>Editing existing records</h2>
        <p>Editing an existing object is a bit of a combination of the create view and the detail view -- you need a form to edit and process, but you are also finding an existing record.</p>
        <p>Let's start by adding our route.</p>
        <pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/edit/$', 'hollywood.views.edit_genre', name='edit_genre'),
)
        </code></pre>
    </section>
<section>
        <h2>Reading a File (Cont.)</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
                <li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
                <li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
                <li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="2">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p>
        <ul>
            <li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
            <li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
            <li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
            <li>Create new text files for testing out your function!</li>
        </ul>
    </section>

element
<section>
<h2>Writing a File</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
<li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
<li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Writing a File (Cont.)</h2>
<div class="col-4">
<br/>
<ul>
<li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Context Manager</h2>
<p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p>
<p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p>
<p>They are used to run certain functions before and after a block of code.</p>
<br/><br/>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
<li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
<li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p>
<p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p>
<div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div>
<p style="clear:both;"><br/>Will become</p>
<div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div>
<p style="clear:both"><br/>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p>
<div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div>
</section> element

element

element
<h2>Writing a File</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
<li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
<li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
</div>
</div> element

element

element
<h2>Writing a File (Cont.)</h2> element

element
<div class="col-4">
<br/>
<ul>
<li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
</div>
</div> element

element

element
<h2>Context Manager</h2> element

element
<p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p> element

element
<p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p> element

element
<p>They are used to run certain functions before and after a block of code.</p> element

element
<br/> element
<br/> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
<li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
<li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p> element

element
<p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p> element

element
<div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div> element

element
<p style="clear:both;"><br/>Will become</p> element

element
<div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div> element

element
<p style="clear:both"><br/>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p> element

element
<div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div> element

element
<section>
        <h2>Writing a File</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
                <li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
                <li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Prepping for Life After Bootcamp</h2>
        <ul>
            <li>Interview Prep</li>
            <li>Presentation Prep</li>
            <li>Development ecosystem</li>
        </ul>
        <p><a href="#/2">Back to top</a></p>
    </section>
<section>
    <h2>More than an education</h2>
    <p>There are a lot of bootcamps out there. At RocketU, you'll be surrounded by the 170+ amazing tech startups at RocketSpace.</p>
    <br>
    <img src="/static/img/rocketspace-name-logo-large-300x116.png" id="rocketSpaceLogo">
</section>

element
<section>
<h2>A network of your own</h2>
<p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p>
</section> element

element
<section>
<h2>RocketSpace staff</h2>
</section> element

element
<section>
<h2>Your instructors</h2>
<h4>Yeti</h4>
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div>
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div>
<div class="footer">
</div>
</section> element

element
<h2>A network of your own</h2> element

element
<p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p> element

element

element
<h2>RocketSpace staff</h2> element

element

element
<h2>Your instructors</h2> element

element
<h4>Yeti</h4> element

element
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div> element

element
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div> element

element
<div class="footer">
</div> element

element

element
<h2>Your classmates</h2> element

element
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul> element

element
<p><a href="#/4">Back to top</a></p> element

element

element
<h2>Prove you can program.</h2> element

element
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p> element

element
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p> element

element
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul> element

element
<section>
        <h2>A network of your own</h2>
        <p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p>
    </section>
<section>
        <h2>Editing existing records</h2>
        <pre><code>
def edit_genre(request, genre_id):
    # Similar to the the detail view, we have to find the existing genre we are editing
    genre = Genre.objects.get(id=genre_id)

    # We still check to see if we are submitting the form
    if request.method == "POST":
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(request.POST, instance=genre)
        if form.is_valid():
            if form.save():
                return redirect("/genres/{}".format(genre_id))

    # Or just viewing the form
    else:
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(instance=genre)
    data = {"genre": genre, "form": form}
    return render(request, "genres/edit_genre.html", data)
        </code></pre>
    </section>
<section>
        <h2>Editing existing records</h2>
        <div>
            <div class="col-3">
                <p>Our edit template looks almost identical to our create template because it has the form, but when you actually load the page, the form will be prefilled.</p>
            </div>
            <div class="col-8 col-offset-1">
                <h4>edit_genre.html</h4>
                <pre><code>
<h1>Edit genre {{ genre.name }}</h1>
<form method="post">
    {% csrf_token %}
    {{ form }}
    <input type="submit" value="Update genre">
</form>
                </code></pre>
            </div>
        </div>
        <div class="fragment">
            <div class="col-3">
                <p>Let's also update our detail view so that it's easy to edit a record we are looking at.</p>
            </div>
            <div class="col-8 col-offset-1">
                <h4>view_genre.html</h4>
                <pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it yourself</h2>
        <p>Add edit functionality for movies and actors.</p>
    </section>

element
<section>
<h2>Deleting records</h2>
<p>Last but not least, we want to be able to delete records as well.</p>
<h4>urls.py</h4>
<pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/delete/$', 'hollywood.views.delete_genre', name='delete_genre'),
)
        </code></pre>
<p>This should be starting to look quite repetitive -- that's a good thing.</p>
</section> element

element
<section>
<h2>Deleting records</h2>
<div>
<div class="col-4">
<p>Deleting works a little differently. We don't actually need to go to a page to delete an object, we can simply delete the object in the view, and then redirect the user to the index page.</p>
</div>
<div class="col-7 col-offset-1">
<h4>views.py</h4>
<pre><code>
def delete_genre(request, genre_id):
    genre = Genre.objects.get(id=genre_id)
    genre.delete()
    return redirect("/genres")
                </code></pre>
</div>
</div>
<div class="fragment">
<div class="col-4">
<p>As we did with edit, let's update the detail template so we can easily access the delete action.</p>
</div>
<div class="col-7 col-offset-1">
<h4>view_genre.html</h4>
<pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;a href="{% url "delete_genre" genre.id %}"&gt;Delete genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it yourself</h2>
<p>Guess what? Add delete functionality for actors and movies!</p>
</section> element

element

element
<h2>Deleting records</h2> element

element
<p>Last but not least, we want to be able to delete records as well.</p> element

element
<h4>urls.py</h4> element

element
<pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/delete/$', 'hollywood.views.delete_genre', name='delete_genre'),
)
        </code></pre> element

element
<p>This should be starting to look quite repetitive -- that's a good thing.</p> element

element

element
<h2>Deleting records</h2> element

element
<div>
<div class="col-4">
<p>Deleting works a little differently. We don't actually need to go to a page to delete an object, we can simply delete the object in the view, and then redirect the user to the index page.</p>
</div>
<div class="col-7 col-offset-1">
<h4>views.py</h4>
<pre><code>
def delete_genre(request, genre_id):
    genre = Genre.objects.get(id=genre_id)
    genre.delete()
    return redirect("/genres")
                </code></pre>
</div>
</div> element

element
<div class="fragment">
<div class="col-4">
<p>As we did with edit, let's update the detail template so we can easily access the delete action.</p>
</div>
<div class="col-7 col-offset-1">
<h4>view_genre.html</h4>
<pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;a href="{% url "delete_genre" genre.id %}"&gt;Delete genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
</div>
</div> element

element

element
<h2>Do it yourself</h2> element

element
<p>Guess what? Add delete functionality for actors and movies!</p> element

element
<section>
        <h2>Deleting records</h2>
        <p>Last but not least, we want to be able to delete records as well.</p>
        <h4>urls.py</h4>
        <pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/delete/$', 'hollywood.views.delete_genre', name='delete_genre'),
)
        </code></pre>
        <p>This should be starting to look quite repetitive -- that's a good thing.</p>
    </section>
<section>
        <h2>Writing a File (Cont.)</h2>
        <div class="col-4">
            <br>
            <ul>
                <li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br><br><br><br><br></li>
                <li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br><br><br><br><br></li>
                <li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="3">
                <pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Context Manager</h2>
        <p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p>
        <p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p>
        <p>They are used to run certain functions before and after a block of code.</p>
        <br><br>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
                <li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
                <li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p>
        <p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p>
        <div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div>
        <p style="clear:both;"><br>Will become</p>
        <div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div>
        <p style="clear:both"><br>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p>
        <div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div>
    </section>
<section>
        <h2>RocketSpace staff</h2>
    </section>

element
<h2>Your instructors</h2> element

element
<h4>Yeti</h4> element

element
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div> element

element
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div> element

element
<div class="footer">
</div> element

element

element
<h2>Your classmates</h2> element

element
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul> element

element
<p><a href="#/4">Back to top</a></p> element

element

element
<h2>Prove you can program.</h2> element

element
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p> element

element
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p> element

element
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul> element

element
<section>
        <h2>Your classmates</h2>
        <ul>
            <li>A brain</li>
            <li>An athlete</li>
            <li>A basket case</li>
            <li>A princess</li>
            <li>And a criminal</li>
        </ul>
        <p><a href="#/4">Back to top</a></p>
    </section>
<section>
        <h2>Deleting records</h2>
        <div>
            <div class="col-4">
                <p>Deleting works a little differently. We don't actually need to go to a page to delete an object, we can simply delete the object in the view, and then redirect the user to the index page.</p>
            </div>
            <div class="col-7 col-offset-1">
                <h4>views.py</h4>
                <pre><code>
def delete_genre(request, genre_id):
    genre = Genre.objects.get(id=genre_id)
    genre.delete()
    return redirect("/genres")
                </code></pre>
            </div>
        </div>
        <div class="fragment">
            <div class="col-4">
                <p>As we did with edit, let's update the detail template so we can easily access the delete action.</p>
            </div>
            <div class="col-7 col-offset-1">
                <h4>view_genre.html</h4>
                <pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;a href="{% url "delete_genre" genre.id %}"&gt;Delete genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it yourself</h2>
        <p>Guess what? Add delete functionality for actors and movies!</p>
    </section>
<section>
    <h2>Recap: Basic Django app</h2>
    <p>Congratulations! You made a Django project. It's simple, but captures the functionality that powers most applications you use on the web and in mobile apps.</p>
    <p>You'll start to notice routes just like the ones you created all over the web.</p>
    <h4>urls.py</h4>
    <pre><code>
urlpatterns = patterns('',
    url(r'^genres/$', 'hollywood.views.genres', name='genres'),
    url(r'^genres/new/$', 'hollywood.views.new_genre', name='new_genre'),
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/$', 'hollywood.views.view_genre', name='view_genre'),
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/edit/$', 'hollywood.views.edit_genre', name='edit_genre'),
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/delete/$', 'hollywood.views.delete_genre', name='delete_genre'),
)
    </code></pre>
</section>
<section class="titleSlide" data-background="#168eae">
                    <h1>
    Basic Django App: Edit &amp; Delete
</h1>
                    <a id="yetiLogo" href="http://www.yetihq.com/"><img src="/static/img/yeti-power.png"></a>
                </section>
<section class="titleSlide" data-background="#168eae">
                    <h1>
    File Manipulation
</h1>
                    <a id="yetiLogo" href="http://www.yetihq.com/"><img src="/static/img/yeti-power.png"></a>
                </section>
<section>
    <h2>Brief Python History</h2>
    <p>Python is a scripting language, which means at its core it has a bunch of functionality built in for operations like file manipulation.</p>
    <ul>
        <li>Python was created by Guido van Rossum, Benevolant Dictator for Life (BDFL), in the late 1980's.</li>
        <li>Python has released major versions 1, 2, and 3</li>
        <li>Version 3 of python had some backwards incompatible changes with version 2, so they also created 2.6 and 2.7.</li>
        <li>Many people still use python 2.7 over 3, especially because major operating systems have not converted over yet.</li>
        <li>The community is still slowly making the transition from python 2 to 3 even though 3 was released in December 2008.</li>
        <li>2.7 will be the last release in the version 2 line, it was released in July 2010.</li>
    </ul>
</section>

element
<section>
<h2>Directories and Files</h2>
<p>Python has a library called <code>os</code> which contains scripting utility functions.</p>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br/><br/></li>
<li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br/><br/></li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">import os

print os.getcwd()</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="7">
<pre><code class="python">
print os.getcwd()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<ul>
<li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
<li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
</ul>
</section> element

element

element
<h2>Directories and Files</h2> element

element
<p>Python has a library called <code>os</code> which contains scripting utility functions.</p> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br/><br/></li>
<li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br/><br/></li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">import os

print os.getcwd()</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="7">
<pre><code class="python">
print os.getcwd()
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<ul>
<li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
<li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
</ul> element

element
<section>
        <h2>Directories and Files</h2>
        <p>Python has a library called <code>os</code> which contains scripting utility functions.</p>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br><br><br></li>
                <li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br><br><br></li>
                <li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br><br></li>
                <li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br><br></li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">import os

print os.getcwd()</code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="3">
                <pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="7">
                <pre><code class="python">
print os.getcwd()
                </code></pre>
            </div>
        </div>
    </section>
<section>
    <h2>Prove you can program.</h2>
    <p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
    <p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
    <ul>
        <li><a target="_blank" href="http://codingbat.com/python">Coding Bat</a></li>
        <li><a target="_blank" href="http://www.pythonchallenge.com/">Python Challenge</a></li>
        <li><a target="_blank" href="http://www.coderbyte.com/">Coderbyte</a></li>
    </ul>
</section>
<section>
    <h2>Learn web development. Build awesome things.</h2>
    <p>
        You quit your job, you told your friends and family you're doing something crazy, maybe you moved here. You're ready to learn, intensively, for the next twelve weeks. By the time you're done, you'll be able to build pretty much anything you see on the internet.
    </p>
</section>

element
<section>
<h2>What you'll be learning</h2>
<p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p>
<ul>
<li><a href="#/2/1">Prework</a></li>
<li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
<li><a href="#/2/3">Integrating JavaScript and Design</a></li>
<li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
<li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
<li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
</ul>
</section> element

element
<section>
<h2>Prework</h2>
<p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p>
<ul>
<li>Command Line: Give your computer instructions like a real programmer</li>
<li>HTML: Learn the basic building blocks of the front-facing web</li>
<li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
<li>Git: Version control is a lifesaver</li>
<li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
<li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
<li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
</ul>
</section> element

element
<section>
<h2>Object-oriented Python and Beginner Django</h2>
<ul>
<li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
<li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
<li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
<li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
<li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
<li>Project: Build a Django application with user authentication and database storage</li>
</ul>
</section> element

element
<section>
<h2>Integrating JavaScript and Design</h2>
<ul>
<li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
<li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
<li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
<li>Using third-party APIs: Query external services like Google and Instagram</li>
<li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
<li>Project: Integrate front-end technologies for a more interactive Django application</li>
</ul>
</section> element

element
<section>
<h2>Expand Your Developer Toolkit</h2>
<ul>
<li>Pair programming</li>
<li>Git strategies</li>
<li>Test-driven development</li>
<li>HTTP lifecycle</li>
<li>Computer science topics</li>
<li>Introduction to dev ops</li>
<li>Analytics and error reporting</li>
<li>Project: Work in a group to build a test-driven Django application</li>
</ul>
</section> element

element
<section>
<h2>AngularJS and Building Custom APIs</h2>
<ul>
<li>Basics of AngularJS</li>
<li>Build a Basecamp clone with AngularJS</li>
<li>Building your own custom API with Django and Tastypie</li>
<li>Integrating Django with AngularJS</li>
<li>Final Project: Demonstrate mastery with Django and AngularJS</li>
</ul>
</section> element

element
<section>
<h2>Prepping for Life After Bootcamp</h2>
<ul>
<li>Interview Prep</li>
<li>Presentation Prep</li>
<li>Development ecosystem</li>
</ul>
<p><a href="#/2">Back to top</a></p>
</section> element

element

element
<h2>What you'll be learning</h2> element

element
<p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p> element

element
<ul>
<li><a href="#/2/1">Prework</a></li>
<li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
<li><a href="#/2/3">Integrating JavaScript and Design</a></li>
<li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
<li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
<li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
</ul> element

element

element
<h2>Prework</h2> element

element
<p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p> element

element
<ul>
<li>Command Line: Give your computer instructions like a real programmer</li>
<li>HTML: Learn the basic building blocks of the front-facing web</li>
<li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
<li>Git: Version control is a lifesaver</li>
<li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
<li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
<li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
</ul> element

element

element
<h2>Object-oriented Python and Beginner Django</h2> element

element
<ul>
<li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
<li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
<li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
<li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
<li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
<li>Project: Build a Django application with user authentication and database storage</li>
</ul> element

element

element
<h2>Integrating JavaScript and Design</h2> element

element
<ul>
<li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
<li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
<li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
<li>Using third-party APIs: Query external services like Google and Instagram</li>
<li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
<li>Project: Integrate front-end technologies for a more interactive Django application</li>
</ul> element

element

element
<h2>Expand Your Developer Toolkit</h2> element

element
<ul>
<li>Pair programming</li>
<li>Git strategies</li>
<li>Test-driven development</li>
<li>HTTP lifecycle</li>
<li>Computer science topics</li>
<li>Introduction to dev ops</li>
<li>Analytics and error reporting</li>
<li>Project: Work in a group to build a test-driven Django application</li>
</ul> element

element

element
<h2>AngularJS and Building Custom APIs</h2> element

element
<ul>
<li>Basics of AngularJS</li>
<li>Build a Basecamp clone with AngularJS</li>
<li>Building your own custom API with Django and Tastypie</li>
<li>Integrating Django with AngularJS</li>
<li>Final Project: Demonstrate mastery with Django and AngularJS</li>
</ul> element

element

element
<h2>Prepping for Life After Bootcamp</h2> element

element
<ul>
<li>Interview Prep</li>
<li>Presentation Prep</li>
<li>Development ecosystem</li>
</ul> element

element
<p><a href="#/2">Back to top</a></p> element

element
<section>
        <h2>What you'll be learning</h2>
        <p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p>
        <ul>
            <li><a href="#/2/1">Prework</a></li>
            <li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
            <li><a href="#/2/3">Integrating JavaScript and Design</a></li>
            <li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
            <li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
            <li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
        </ul>
    </section>
<section>
    <h2>Laying out our application</h2>
    <p>Our Django app will have this site map. This basic layout can be found in many applications.</p>
    <img src="/static/img/hollywood_site_map.png">
</section>

element
<section>
<h2>Editing existing records</h2>
<p>Editing an existing object is a bit of a combination of the create view and the detail view -- you need a form to edit and process, but you are also finding an existing record.</p>
<p>Let's start by adding our route.</p>
<pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/edit/$', 'hollywood.views.edit_genre', name='edit_genre'),
)
        </code></pre>
</section> element

element
<section>
<h2>Editing existing records</h2>
<pre><code>
def edit_genre(request, genre_id):
    # Similar to the the detail view, we have to find the existing genre we are editing
    genre = Genre.objects.get(id=genre_id)

    # We still check to see if we are submitting the form
    if request.method == "POST":
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(request.POST, instance=genre)
        if form.is_valid():
            if form.save():
                return redirect("/genres/{}".format(genre_id))

    # Or just viewing the form
    else:
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(instance=genre)
    data = {"genre": genre, "form": form}
    return render(request, "genres/edit_genre.html", data)
        </code></pre>
</section> element

element
<section>
<h2>Editing existing records</h2>
<div>
<div class="col-3">
<p>Our edit template looks almost identical to our create template because it has the form, but when you actually load the page, the form will be prefilled.</p>
</div>
<div class="col-8 col-offset-1">
<h4>edit_genre.html</h4>
<pre><code>
<h1>Edit genre {{ genre.name }}</h1>
<form method="post">
    {% csrf_token %}
    {{ form }}
    <input type="submit" value="Update genre"/>
</form>
                </code></pre>
</div>
</div>
<div class="fragment">
<div class="col-3">
<p>Let's also update our detail view so that it's easy to edit a record we are looking at.</p>
</div>
<div class="col-8 col-offset-1">
<h4>view_genre.html</h4>
<pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it yourself</h2>
<p>Add edit functionality for movies and actors.</p>
</section> element

element

element
<h2>Editing existing records</h2> element

element
<p>Editing an existing object is a bit of a combination of the create view and the detail view -- you need a form to edit and process, but you are also finding an existing record.</p> element

element
<p>Let's start by adding our route.</p> element

element
<pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/edit/$', 'hollywood.views.edit_genre', name='edit_genre'),
)
        </code></pre> element

element

element
<h2>Editing existing records</h2> element

element
<pre><code>
def edit_genre(request, genre_id):
    # Similar to the the detail view, we have to find the existing genre we are editing
    genre = Genre.objects.get(id=genre_id)

    # We still check to see if we are submitting the form
    if request.method == "POST":
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(request.POST, instance=genre)
        if form.is_valid():
            if form.save():
                return redirect("/genres/{}".format(genre_id))

    # Or just viewing the form
    else:
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(instance=genre)
    data = {"genre": genre, "form": form}
    return render(request, "genres/edit_genre.html", data)
        </code></pre> element

element

element
<h2>Editing existing records</h2> element

element
<div>
<div class="col-3">
<p>Our edit template looks almost identical to our create template because it has the form, but when you actually load the page, the form will be prefilled.</p>
</div>
<div class="col-8 col-offset-1">
<h4>edit_genre.html</h4>
<pre><code>
<h1>Edit genre {{ genre.name }}</h1>
<form method="post">
    {% csrf_token %}
    {{ form }}
    <input type="submit" value="Update genre"/>
</form>
                </code></pre>
</div>
</div> element

element
<div class="fragment">
<div class="col-3">
<p>Let's also update our detail view so that it's easy to edit a record we are looking at.</p>
</div>
<div class="col-8 col-offset-1">
<h4>view_genre.html</h4>
<pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
</div>
</div> element

element

element
<h2>Do it yourself</h2> element

element
<p>Add edit functionality for movies and actors.</p> element

element
<section>
        <h2>Editing existing records</h2>
        <p>Editing an existing object is a bit of a combination of the create view and the detail view -- you need a form to edit and process, but you are also finding an existing record.</p>
        <p>Let's start by adding our route.</p>
        <pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/edit/$', 'hollywood.views.edit_genre', name='edit_genre'),
)
        </code></pre>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <ul>
            <li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
            <li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
        </ul>
    </section>

element
<section>
<h2>Reading a File</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
<li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
<li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
<li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
<li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre>

Hello world!
Hello universe!
                </pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="4">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="6">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Reading a File (Cont.)</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
<li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
<li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
<li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="2">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p>
<ul>
<li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
<li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
<li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
<li>Create new text files for testing out your function!</li>
</ul>
</section> element

element

element
<h2>Reading a File</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
<li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
<li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
<li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
<li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre>

Hello world!
Hello universe!
                </pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="4">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="6">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
</div>
</div> element

element

element
<h2>Reading a File (Cont.)</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
<li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
<li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
<li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="2">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p> element

element
<ul>
<li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
<li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
<li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
<li>Create new text files for testing out your function!</li>
</ul> element

element
<section>
        <h2>Reading a File</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
                <li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
                <li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
                <li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
                <li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre>

Hello world!
Hello universe!
                </pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="4">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="6">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Prework</h2>
        <p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p>
        <ul>
            <li>Command Line: Give your computer instructions like a real programmer</li>
            <li>HTML: Learn the basic building blocks of the front-facing web</li>
            <li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
            <li>Git: Version control is a lifesaver</li>
            <li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
            <li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
            <li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
        </ul>
    </section>
<section>
        <h2>Object-oriented Python and Beginner Django</h2>
        <ul>
            <li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
            <li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
            <li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
            <li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
            <li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
            <li>Project: Build a Django application with user authentication and database storage</li>
        </ul>
    </section>
<section>
        <h2>Integrating JavaScript and Design</h2>
        <ul>
            <li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
            <li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
            <li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
            <li>Using third-party APIs: Query external services like Google and Instagram</li>
            <li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
            <li>Project: Integrate front-end technologies for a more interactive Django application</li>
        </ul>
    </section>
<section>
        <h2>Expand Your Developer Toolkit</h2>
        <ul>
            <li>Pair programming</li>
            <li>Git strategies</li>
            <li>Test-driven development</li>
            <li>HTTP lifecycle</li>
            <li>Computer science topics</li>
            <li>Introduction to dev ops</li>
            <li>Analytics and error reporting</li>
            <li>Project: Work in a group to build a test-driven Django application</li>
        </ul>
    </section>
<section>
        <h2>AngularJS and Building Custom APIs</h2>
        <ul>
            <li>Basics of AngularJS</li>
            <li>Build a Basecamp clone with AngularJS</li>
            <li>Building your own custom API with Django and Tastypie</li>
            <li>Integrating Django with AngularJS</li>
            <li>Final Project: Demonstrate mastery with Django and AngularJS</li>
        </ul>
    </section>
<section>
        <h2>Prepping for Life After Bootcamp</h2>
        <ul>
            <li>Interview Prep</li>
            <li>Presentation Prep</li>
            <li>Development ecosystem</li>
        </ul>
        <p><a href="#/2">Back to top</a></p>
    </section>
<section>
        <h2>Editing existing records</h2>
        <pre><code>
def edit_genre(request, genre_id):
    # Similar to the the detail view, we have to find the existing genre we are editing
    genre = Genre.objects.get(id=genre_id)

    # We still check to see if we are submitting the form
    if request.method == "POST":
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(request.POST, instance=genre)
        if form.is_valid():
            if form.save():
                return redirect("/genres/{}".format(genre_id))

    # Or just viewing the form
    else:
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(instance=genre)
    data = {"genre": genre, "form": form}
    return render(request, "genres/edit_genre.html", data)
        </code></pre>
    </section>
<section>
        <h2>Editing existing records</h2>
        <div>
            <div class="col-3">
                <p>Our edit template looks almost identical to our create template because it has the form, but when you actually load the page, the form will be prefilled.</p>
            </div>
            <div class="col-8 col-offset-1">
                <h4>edit_genre.html</h4>
                <pre><code>
<h1>Edit genre {{ genre.name }}</h1>
<form method="post">
    {% csrf_token %}
    {{ form }}
    <input type="submit" value="Update genre">
</form>
                </code></pre>
            </div>
        </div>
        <div class="fragment">
            <div class="col-3">
                <p>Let's also update our detail view so that it's easy to edit a record we are looking at.</p>
            </div>
            <div class="col-8 col-offset-1">
                <h4>view_genre.html</h4>
                <pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it yourself</h2>
        <p>Add edit functionality for movies and actors.</p>
    </section>

element
<section>
<h2>Deleting records</h2>
<p>Last but not least, we want to be able to delete records as well.</p>
<h4>urls.py</h4>
<pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/delete/$', 'hollywood.views.delete_genre', name='delete_genre'),
)
        </code></pre>
<p>This should be starting to look quite repetitive -- that's a good thing.</p>
</section> element

element
<section>
<h2>Deleting records</h2>
<div>
<div class="col-4">
<p>Deleting works a little differently. We don't actually need to go to a page to delete an object, we can simply delete the object in the view, and then redirect the user to the index page.</p>
</div>
<div class="col-7 col-offset-1">
<h4>views.py</h4>
<pre><code>
def delete_genre(request, genre_id):
    genre = Genre.objects.get(id=genre_id)
    genre.delete()
    return redirect("/genres")
                </code></pre>
</div>
</div>
<div class="fragment">
<div class="col-4">
<p>As we did with edit, let's update the detail template so we can easily access the delete action.</p>
</div>
<div class="col-7 col-offset-1">
<h4>view_genre.html</h4>
<pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;a href="{% url "delete_genre" genre.id %}"&gt;Delete genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it yourself</h2>
<p>Guess what? Add delete functionality for actors and movies!</p>
</section> element

element

element
<h2>Deleting records</h2> element

element
<p>Last but not least, we want to be able to delete records as well.</p> element

element
<h4>urls.py</h4> element

element
<pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/delete/$', 'hollywood.views.delete_genre', name='delete_genre'),
)
        </code></pre> element

element
<p>This should be starting to look quite repetitive -- that's a good thing.</p> element

element

element
<h2>Deleting records</h2> element

element
<div>
<div class="col-4">
<p>Deleting works a little differently. We don't actually need to go to a page to delete an object, we can simply delete the object in the view, and then redirect the user to the index page.</p>
</div>
<div class="col-7 col-offset-1">
<h4>views.py</h4>
<pre><code>
def delete_genre(request, genre_id):
    genre = Genre.objects.get(id=genre_id)
    genre.delete()
    return redirect("/genres")
                </code></pre>
</div>
</div> element

element
<div class="fragment">
<div class="col-4">
<p>As we did with edit, let's update the detail template so we can easily access the delete action.</p>
</div>
<div class="col-7 col-offset-1">
<h4>view_genre.html</h4>
<pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;a href="{% url "delete_genre" genre.id %}"&gt;Delete genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
</div>
</div> element

element

element
<h2>Do it yourself</h2> element

element
<p>Guess what? Add delete functionality for actors and movies!</p> element

element
<section>
        <h2>Deleting records</h2>
        <p>Last but not least, we want to be able to delete records as well.</p>
        <h4>urls.py</h4>
        <pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/delete/$', 'hollywood.views.delete_genre', name='delete_genre'),
)
        </code></pre>
        <p>This should be starting to look quite repetitive -- that's a good thing.</p>
    </section>
<section>
        <h2>Reading a File (Cont.)</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
                <li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
                <li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
                <li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="2">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p>
        <ul>
            <li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
            <li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
            <li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
            <li>Create new text files for testing out your function!</li>
        </ul>
    </section>

element
<section>
<h2>Writing a File</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
<li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
<li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Writing a File (Cont.)</h2>
<div class="col-4">
<br/>
<ul>
<li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Context Manager</h2>
<p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p>
<p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p>
<p>They are used to run certain functions before and after a block of code.</p>
<br/><br/>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
<li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
<li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p>
<p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p>
<div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div>
<p style="clear:both;"><br/>Will become</p>
<div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div>
<p style="clear:both"><br/>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p>
<div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div>
</section> element

element

element
<h2>Writing a File</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
<li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
<li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
</div>
</div> element

element

element
<h2>Writing a File (Cont.)</h2> element

element
<div class="col-4">
<br/>
<ul>
<li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
</div>
</div> element

element

element
<h2>Context Manager</h2> element

element
<p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p> element

element
<p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p> element

element
<p>They are used to run certain functions before and after a block of code.</p> element

element
<br/> element
<br/> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
<li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
<li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p> element

element
<p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p> element

element
<div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div> element

element
<p style="clear:both;"><br/>Will become</p> element

element
<div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div> element

element
<p style="clear:both"><br/>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p> element

element
<div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div> element

element
<section>
        <h2>Writing a File</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
                <li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
                <li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
            </div>
        </div>
    </section>
<section>
    <h2>More than an education</h2>
    <p>There are a lot of bootcamps out there. At RocketU, you'll be surrounded by the 170+ amazing tech startups at RocketSpace.</p>
    <br>
    <img src="/static/img/rocketspace-name-logo-large-300x116.png" id="rocketSpaceLogo">
</section>

element
<section>
<h2>A network of your own</h2>
<p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p>
</section> element

element
<section>
<h2>RocketSpace staff</h2>
</section> element

element
<section>
<h2>Your instructors</h2>
<h4>Yeti</h4>
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div>
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div>
<div class="footer">
</div>
</section> element

element
<h2>A network of your own</h2> element

element
<p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p> element

element

element
<h2>RocketSpace staff</h2> element

element

element
<h2>Your instructors</h2> element

element
<h4>Yeti</h4> element

element
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div> element

element
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div> element

element
<div class="footer">
</div> element

element

element
<h2>Your classmates</h2> element

element
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul> element

element
<p><a href="#/4">Back to top</a></p> element

element

element
<h2>Prove you can program.</h2> element

element
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p> element

element
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p> element

element
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul> element

element
<section>
        <h2>A network of your own</h2>
        <p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p>
    </section>
<section>
        <h2>Deleting records</h2>
        <div>
            <div class="col-4">
                <p>Deleting works a little differently. We don't actually need to go to a page to delete an object, we can simply delete the object in the view, and then redirect the user to the index page.</p>
            </div>
            <div class="col-7 col-offset-1">
                <h4>views.py</h4>
                <pre><code>
def delete_genre(request, genre_id):
    genre = Genre.objects.get(id=genre_id)
    genre.delete()
    return redirect("/genres")
                </code></pre>
            </div>
        </div>
        <div class="fragment">
            <div class="col-4">
                <p>As we did with edit, let's update the detail template so we can easily access the delete action.</p>
            </div>
            <div class="col-7 col-offset-1">
                <h4>view_genre.html</h4>
                <pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;a href="{% url "delete_genre" genre.id %}"&gt;Delete genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it yourself</h2>
        <p>Guess what? Add delete functionality for actors and movies!</p>
    </section>
<section>
    <h2>Recap: Basic Django app</h2>
    <p>Congratulations! You made a Django project. It's simple, but captures the functionality that powers most applications you use on the web and in mobile apps.</p>
    <p>You'll start to notice routes just like the ones you created all over the web.</p>
    <h4>urls.py</h4>
    <pre><code>
urlpatterns = patterns('',
    url(r'^genres/$', 'hollywood.views.genres', name='genres'),
    url(r'^genres/new/$', 'hollywood.views.new_genre', name='new_genre'),
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/$', 'hollywood.views.view_genre', name='view_genre'),
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/edit/$', 'hollywood.views.edit_genre', name='edit_genre'),
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/delete/$', 'hollywood.views.delete_genre', name='delete_genre'),
)
    </code></pre>
</section>
<section class="titleSlide" data-background="#168eae">
                    <h1>
    Basic Django App: Edit &amp; Delete
</h1>
                    <a id="yetiLogo" href="http://www.yetihq.com/"><img src="/static/img/yeti-power.png"></a>
                </section>
<section>
    <h2>Laying out our application</h2>
    <p>Our Django app will have this site map. This basic layout can be found in many applications.</p>
    <img src="/static/img/hollywood_site_map.png">
</section>

element
<section>
<h2>Editing existing records</h2>
<p>Editing an existing object is a bit of a combination of the create view and the detail view -- you need a form to edit and process, but you are also finding an existing record.</p>
<p>Let's start by adding our route.</p>
<pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/edit/$', 'hollywood.views.edit_genre', name='edit_genre'),
)
        </code></pre>
</section> element

element
<section>
<h2>Editing existing records</h2>
<pre><code>
def edit_genre(request, genre_id):
    # Similar to the the detail view, we have to find the existing genre we are editing
    genre = Genre.objects.get(id=genre_id)

    # We still check to see if we are submitting the form
    if request.method == "POST":
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(request.POST, instance=genre)
        if form.is_valid():
            if form.save():
                return redirect("/genres/{}".format(genre_id))

    # Or just viewing the form
    else:
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(instance=genre)
    data = {"genre": genre, "form": form}
    return render(request, "genres/edit_genre.html", data)
        </code></pre>
</section> element

element
<section>
<h2>Editing existing records</h2>
<div>
<div class="col-3">
<p>Our edit template looks almost identical to our create template because it has the form, but when you actually load the page, the form will be prefilled.</p>
</div>
<div class="col-8 col-offset-1">
<h4>edit_genre.html</h4>
<pre><code>
<h1>Edit genre {{ genre.name }}</h1>
<form method="post">
    {% csrf_token %}
    {{ form }}
    <input type="submit" value="Update genre"/>
</form>
                </code></pre>
</div>
</div>
<div class="fragment">
<div class="col-3">
<p>Let's also update our detail view so that it's easy to edit a record we are looking at.</p>
</div>
<div class="col-8 col-offset-1">
<h4>view_genre.html</h4>
<pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it yourself</h2>
<p>Add edit functionality for movies and actors.</p>
</section> element

element

element
<h2>Editing existing records</h2> element

element
<p>Editing an existing object is a bit of a combination of the create view and the detail view -- you need a form to edit and process, but you are also finding an existing record.</p> element

element
<p>Let's start by adding our route.</p> element

element
<pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/edit/$', 'hollywood.views.edit_genre', name='edit_genre'),
)
        </code></pre> element

element

element
<h2>Editing existing records</h2> element

element
<pre><code>
def edit_genre(request, genre_id):
    # Similar to the the detail view, we have to find the existing genre we are editing
    genre = Genre.objects.get(id=genre_id)

    # We still check to see if we are submitting the form
    if request.method == "POST":
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(request.POST, instance=genre)
        if form.is_valid():
            if form.save():
                return redirect("/genres/{}".format(genre_id))

    # Or just viewing the form
    else:
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(instance=genre)
    data = {"genre": genre, "form": form}
    return render(request, "genres/edit_genre.html", data)
        </code></pre> element

element

element
<h2>Editing existing records</h2> element

element
<div>
<div class="col-3">
<p>Our edit template looks almost identical to our create template because it has the form, but when you actually load the page, the form will be prefilled.</p>
</div>
<div class="col-8 col-offset-1">
<h4>edit_genre.html</h4>
<pre><code>
<h1>Edit genre {{ genre.name }}</h1>
<form method="post">
    {% csrf_token %}
    {{ form }}
    <input type="submit" value="Update genre"/>
</form>
                </code></pre>
</div>
</div> element

element
<div class="fragment">
<div class="col-3">
<p>Let's also update our detail view so that it's easy to edit a record we are looking at.</p>
</div>
<div class="col-8 col-offset-1">
<h4>view_genre.html</h4>
<pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
</div>
</div> element

element

element
<h2>Do it yourself</h2> element

element
<p>Add edit functionality for movies and actors.</p> element

element
<section>
        <h2>Editing existing records</h2>
        <p>Editing an existing object is a bit of a combination of the create view and the detail view -- you need a form to edit and process, but you are also finding an existing record.</p>
        <p>Let's start by adding our route.</p>
        <pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/edit/$', 'hollywood.views.edit_genre', name='edit_genre'),
)
        </code></pre>
    </section>
<section>
        <h2>Writing a File (Cont.)</h2>
        <div class="col-4">
            <br>
            <ul>
                <li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br><br><br><br><br></li>
                <li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br><br><br><br><br></li>
                <li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="3">
                <pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Context Manager</h2>
        <p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p>
        <p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p>
        <p>They are used to run certain functions before and after a block of code.</p>
        <br><br>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
                <li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
                <li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>RocketSpace staff</h2>
    </section>

element
<h2>Your instructors</h2> element

element
<h4>Yeti</h4> element

element
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div> element

element
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div> element

element
<div class="footer">
</div> element

element

element
<h2>Your classmates</h2> element

element
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul> element

element
<p><a href="#/4">Back to top</a></p> element

element

element
<h2>Prove you can program.</h2> element

element
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p> element

element
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p> element

element
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul> element

element
<section>
        <h2>Your classmates</h2>
        <ul>
            <li>A brain</li>
            <li>An athlete</li>
            <li>A basket case</li>
            <li>A princess</li>
            <li>And a criminal</li>
        </ul>
        <p><a href="#/4">Back to top</a></p>
    </section>
<section>
        <h2>Editing existing records</h2>
        <pre><code>
def edit_genre(request, genre_id):
    # Similar to the the detail view, we have to find the existing genre we are editing
    genre = Genre.objects.get(id=genre_id)

    # We still check to see if we are submitting the form
    if request.method == "POST":
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(request.POST, instance=genre)
        if form.is_valid():
            if form.save():
                return redirect("/genres/{}".format(genre_id))

    # Or just viewing the form
    else:
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(instance=genre)
    data = {"genre": genre, "form": form}
    return render(request, "genres/edit_genre.html", data)
        </code></pre>
    </section>
<section>
        <h2>Editing existing records</h2>
        <div>
            <div class="col-3">
                <p>Our edit template looks almost identical to our create template because it has the form, but when you actually load the page, the form will be prefilled.</p>
            </div>
            <div class="col-8 col-offset-1">
                <h4>edit_genre.html</h4>
                <pre><code>
<h1>Edit genre {{ genre.name }}</h1>
<form method="post">
    {% csrf_token %}
    {{ form }}
    <input type="submit" value="Update genre">
</form>
                </code></pre>
            </div>
        </div>
        <div class="fragment">
            <div class="col-3">
                <p>Let's also update our detail view so that it's easy to edit a record we are looking at.</p>
            </div>
            <div class="col-8 col-offset-1">
                <h4>view_genre.html</h4>
                <pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it yourself</h2>
        <p>Add edit functionality for movies and actors.</p>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p>
        <p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p>
        <div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div>
        <p style="clear:both;"><br>Will become</p>
        <div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div>
        <p style="clear:both"><br>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p>
        <div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div>
    </section>
<section class="titleSlide" data-background="#168eae">
                    <h1>
    File Manipulation
</h1>
                    <a id="yetiLogo" href="http://www.yetihq.com/"><img src="/static/img/yeti-power.png"></a>
                </section>
<section>
    <h2>Brief Python History</h2>
    <p>Python is a scripting language, which means at its core it has a bunch of functionality built in for operations like file manipulation.</p>
    <ul>
        <li>Python was created by Guido van Rossum, Benevolant Dictator for Life (BDFL), in the late 1980's.</li>
        <li>Python has released major versions 1, 2, and 3</li>
        <li>Version 3 of python had some backwards incompatible changes with version 2, so they also created 2.6 and 2.7.</li>
        <li>Many people still use python 2.7 over 3, especially because major operating systems have not converted over yet.</li>
        <li>The community is still slowly making the transition from python 2 to 3 even though 3 was released in December 2008.</li>
        <li>2.7 will be the last release in the version 2 line, it was released in July 2010.</li>
    </ul>
</section>

element
<section>
<h2>Directories and Files</h2>
<p>Python has a library called <code>os</code> which contains scripting utility functions.</p>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br/><br/></li>
<li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br/><br/></li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">import os

print os.getcwd()</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="7">
<pre><code class="python">
print os.getcwd()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<ul>
<li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
<li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
</ul>
</section> element

element

element
<h2>Directories and Files</h2> element

element
<p>Python has a library called <code>os</code> which contains scripting utility functions.</p> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br/><br/></li>
<li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br/><br/></li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">import os

print os.getcwd()</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="7">
<pre><code class="python">
print os.getcwd()
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<ul>
<li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
<li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
</ul> element

element
<section>
        <h2>Directories and Files</h2>
        <p>Python has a library called <code>os</code> which contains scripting utility functions.</p>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br><br><br></li>
                <li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br><br><br></li>
                <li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br><br></li>
                <li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br><br></li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">import os

print os.getcwd()</code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="3">
                <pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="7">
                <pre><code class="python">
print os.getcwd()
                </code></pre>
            </div>
        </div>
    </section>
<section>
    <h2>Prove you can program.</h2>
    <p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
    <p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
    <ul>
        <li><a target="_blank" href="http://codingbat.com/python">Coding Bat</a></li>
        <li><a target="_blank" href="http://www.pythonchallenge.com/">Python Challenge</a></li>
        <li><a target="_blank" href="http://www.coderbyte.com/">Coderbyte</a></li>
    </ul>
</section>
<section>
    <h2>Learn web development. Build awesome things.</h2>
    <p>
        You quit your job, you told your friends and family you're doing something crazy, maybe you moved here. You're ready to learn, intensively, for the next twelve weeks. By the time you're done, you'll be able to build pretty much anything you see on the internet.
    </p>
</section>

element
<section>
<h2>What you'll be learning</h2>
<p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p>
<ul>
<li><a href="#/2/1">Prework</a></li>
<li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
<li><a href="#/2/3">Integrating JavaScript and Design</a></li>
<li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
<li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
<li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
</ul>
</section> element

element
<section>
<h2>Prework</h2>
<p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p>
<ul>
<li>Command Line: Give your computer instructions like a real programmer</li>
<li>HTML: Learn the basic building blocks of the front-facing web</li>
<li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
<li>Git: Version control is a lifesaver</li>
<li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
<li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
<li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
</ul>
</section> element

element
<section>
<h2>Object-oriented Python and Beginner Django</h2>
<ul>
<li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
<li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
<li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
<li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
<li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
<li>Project: Build a Django application with user authentication and database storage</li>
</ul>
</section> element

element
<section>
<h2>Integrating JavaScript and Design</h2>
<ul>
<li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
<li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
<li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
<li>Using third-party APIs: Query external services like Google and Instagram</li>
<li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
<li>Project: Integrate front-end technologies for a more interactive Django application</li>
</ul>
</section> element

element
<section>
<h2>Expand Your Developer Toolkit</h2>
<ul>
<li>Pair programming</li>
<li>Git strategies</li>
<li>Test-driven development</li>
<li>HTTP lifecycle</li>
<li>Computer science topics</li>
<li>Introduction to dev ops</li>
<li>Analytics and error reporting</li>
<li>Project: Work in a group to build a test-driven Django application</li>
</ul>
</section> element

element
<section>
<h2>AngularJS and Building Custom APIs</h2>
<ul>
<li>Basics of AngularJS</li>
<li>Build a Basecamp clone with AngularJS</li>
<li>Building your own custom API with Django and Tastypie</li>
<li>Integrating Django with AngularJS</li>
<li>Final Project: Demonstrate mastery with Django and AngularJS</li>
</ul>
</section> element

element
<section>
<h2>Prepping for Life After Bootcamp</h2>
<ul>
<li>Interview Prep</li>
<li>Presentation Prep</li>
<li>Development ecosystem</li>
</ul>
<p><a href="#/2">Back to top</a></p>
</section> element

element

element
<h2>What you'll be learning</h2> element

element
<p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p> element

element
<ul>
<li><a href="#/2/1">Prework</a></li>
<li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
<li><a href="#/2/3">Integrating JavaScript and Design</a></li>
<li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
<li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
<li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
</ul> element

element

element
<h2>Prework</h2> element

element
<p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p> element

element
<ul>
<li>Command Line: Give your computer instructions like a real programmer</li>
<li>HTML: Learn the basic building blocks of the front-facing web</li>
<li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
<li>Git: Version control is a lifesaver</li>
<li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
<li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
<li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
</ul> element

element

element
<h2>Object-oriented Python and Beginner Django</h2> element

element
<ul>
<li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
<li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
<li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
<li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
<li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
<li>Project: Build a Django application with user authentication and database storage</li>
</ul> element

element

element
<h2>Integrating JavaScript and Design</h2> element

element
<ul>
<li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
<li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
<li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
<li>Using third-party APIs: Query external services like Google and Instagram</li>
<li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
<li>Project: Integrate front-end technologies for a more interactive Django application</li>
</ul> element

element

element
<h2>Expand Your Developer Toolkit</h2> element

element
<ul>
<li>Pair programming</li>
<li>Git strategies</li>
<li>Test-driven development</li>
<li>HTTP lifecycle</li>
<li>Computer science topics</li>
<li>Introduction to dev ops</li>
<li>Analytics and error reporting</li>
<li>Project: Work in a group to build a test-driven Django application</li>
</ul> element

element

element
<h2>AngularJS and Building Custom APIs</h2> element

element
<ul>
<li>Basics of AngularJS</li>
<li>Build a Basecamp clone with AngularJS</li>
<li>Building your own custom API with Django and Tastypie</li>
<li>Integrating Django with AngularJS</li>
<li>Final Project: Demonstrate mastery with Django and AngularJS</li>
</ul> element

element

element
<h2>Prepping for Life After Bootcamp</h2> element

element
<ul>
<li>Interview Prep</li>
<li>Presentation Prep</li>
<li>Development ecosystem</li>
</ul> element

element
<p><a href="#/2">Back to top</a></p> element

element
<section>
        <h2>What you'll be learning</h2>
        <p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p>
        <ul>
            <li><a href="#/2/1">Prework</a></li>
            <li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
            <li><a href="#/2/3">Integrating JavaScript and Design</a></li>
            <li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
            <li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
            <li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
        </ul>
    </section>

element
<section>
<h2>Deleting records</h2>
<p>Last but not least, we want to be able to delete records as well.</p>
<h4>urls.py</h4>
<pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/delete/$', 'hollywood.views.delete_genre', name='delete_genre'),
)
        </code></pre>
<p>This should be starting to look quite repetitive -- that's a good thing.</p>
</section> element

element
<section>
<h2>Deleting records</h2>
<div>
<div class="col-4">
<p>Deleting works a little differently. We don't actually need to go to a page to delete an object, we can simply delete the object in the view, and then redirect the user to the index page.</p>
</div>
<div class="col-7 col-offset-1">
<h4>views.py</h4>
<pre><code>
def delete_genre(request, genre_id):
    genre = Genre.objects.get(id=genre_id)
    genre.delete()
    return redirect("/genres")
                </code></pre>
</div>
</div>
<div class="fragment">
<div class="col-4">
<p>As we did with edit, let's update the detail template so we can easily access the delete action.</p>
</div>
<div class="col-7 col-offset-1">
<h4>view_genre.html</h4>
<pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;a href="{% url "delete_genre" genre.id %}"&gt;Delete genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it yourself</h2>
<p>Guess what? Add delete functionality for actors and movies!</p>
</section> element

element

element
<h2>Deleting records</h2> element

element
<p>Last but not least, we want to be able to delete records as well.</p> element

element
<h4>urls.py</h4> element

element
<pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/delete/$', 'hollywood.views.delete_genre', name='delete_genre'),
)
        </code></pre> element

element
<p>This should be starting to look quite repetitive -- that's a good thing.</p> element

element

element
<h2>Deleting records</h2> element

element
<div>
<div class="col-4">
<p>Deleting works a little differently. We don't actually need to go to a page to delete an object, we can simply delete the object in the view, and then redirect the user to the index page.</p>
</div>
<div class="col-7 col-offset-1">
<h4>views.py</h4>
<pre><code>
def delete_genre(request, genre_id):
    genre = Genre.objects.get(id=genre_id)
    genre.delete()
    return redirect("/genres")
                </code></pre>
</div>
</div> element

element
<div class="fragment">
<div class="col-4">
<p>As we did with edit, let's update the detail template so we can easily access the delete action.</p>
</div>
<div class="col-7 col-offset-1">
<h4>view_genre.html</h4>
<pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;a href="{% url "delete_genre" genre.id %}"&gt;Delete genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
</div>
</div> element

element

element
<h2>Do it yourself</h2> element

element
<p>Guess what? Add delete functionality for actors and movies!</p> element

element
<section>
        <h2>Deleting records</h2>
        <p>Last but not least, we want to be able to delete records as well.</p>
        <h4>urls.py</h4>
        <pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/delete/$', 'hollywood.views.delete_genre', name='delete_genre'),
)
        </code></pre>
        <p>This should be starting to look quite repetitive -- that's a good thing.</p>
    </section>
<section>
        <h2>Deleting records</h2>
        <div>
            <div class="col-4">
                <p>Deleting works a little differently. We don't actually need to go to a page to delete an object, we can simply delete the object in the view, and then redirect the user to the index page.</p>
            </div>
            <div class="col-7 col-offset-1">
                <h4>views.py</h4>
                <pre><code>
def delete_genre(request, genre_id):
    genre = Genre.objects.get(id=genre_id)
    genre.delete()
    return redirect("/genres")
                </code></pre>
            </div>
        </div>
        <div class="fragment">
            <div class="col-4">
                <p>As we did with edit, let's update the detail template so we can easily access the delete action.</p>
            </div>
            <div class="col-7 col-offset-1">
                <h4>view_genre.html</h4>
                <pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;a href="{% url "delete_genre" genre.id %}"&gt;Delete genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <ul>
            <li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
            <li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
        </ul>
    </section>

element
<section>
<h2>Reading a File</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
<li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
<li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
<li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
<li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre>

Hello world!
Hello universe!
                </pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="4">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="6">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Reading a File (Cont.)</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
<li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
<li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
<li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="2">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p>
<ul>
<li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
<li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
<li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
<li>Create new text files for testing out your function!</li>
</ul>
</section> element

element

element
<h2>Reading a File</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
<li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
<li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
<li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
<li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre>

Hello world!
Hello universe!
                </pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="4">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="6">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
</div>
</div> element

element

element
<h2>Reading a File (Cont.)</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
<li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
<li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
<li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="2">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p> element

element
<ul>
<li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
<li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
<li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
<li>Create new text files for testing out your function!</li>
</ul> element

element
<section>
        <h2>Reading a File</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
                <li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
                <li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
                <li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
                <li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre>

Hello world!
Hello universe!
                </pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="4">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="6">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Prework</h2>
        <p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p>
        <ul>
            <li>Command Line: Give your computer instructions like a real programmer</li>
            <li>HTML: Learn the basic building blocks of the front-facing web</li>
            <li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
            <li>Git: Version control is a lifesaver</li>
            <li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
            <li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
            <li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
        </ul>
    </section>
<section>
        <h2>Object-oriented Python and Beginner Django</h2>
        <ul>
            <li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
            <li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
            <li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
            <li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
            <li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
            <li>Project: Build a Django application with user authentication and database storage</li>
        </ul>
    </section>
<section>
        <h2>Integrating JavaScript and Design</h2>
        <ul>
            <li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
            <li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
            <li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
            <li>Using third-party APIs: Query external services like Google and Instagram</li>
            <li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
            <li>Project: Integrate front-end technologies for a more interactive Django application</li>
        </ul>
    </section>
<section>
        <h2>Expand Your Developer Toolkit</h2>
        <ul>
            <li>Pair programming</li>
            <li>Git strategies</li>
            <li>Test-driven development</li>
            <li>HTTP lifecycle</li>
            <li>Computer science topics</li>
            <li>Introduction to dev ops</li>
            <li>Analytics and error reporting</li>
            <li>Project: Work in a group to build a test-driven Django application</li>
        </ul>
    </section>
<section>
        <h2>AngularJS and Building Custom APIs</h2>
        <ul>
            <li>Basics of AngularJS</li>
            <li>Build a Basecamp clone with AngularJS</li>
            <li>Building your own custom API with Django and Tastypie</li>
            <li>Integrating Django with AngularJS</li>
            <li>Final Project: Demonstrate mastery with Django and AngularJS</li>
        </ul>
    </section>
<section>
        <h2>Prepping for Life After Bootcamp</h2>
        <ul>
            <li>Interview Prep</li>
            <li>Presentation Prep</li>
            <li>Development ecosystem</li>
        </ul>
        <p><a href="#/2">Back to top</a></p>
    </section>
<section>
        <h2>Do it yourself</h2>
        <p>Guess what? Add delete functionality for actors and movies!</p>
    </section>
<section>
    <h2>Recap: Basic Django app</h2>
    <p>Congratulations! You made a Django project. It's simple, but captures the functionality that powers most applications you use on the web and in mobile apps.</p>
    <p>You'll start to notice routes just like the ones you created all over the web.</p>
    <h4>urls.py</h4>
    <pre><code>
urlpatterns = patterns('',
    url(r'^genres/$', 'hollywood.views.genres', name='genres'),
    url(r'^genres/new/$', 'hollywood.views.new_genre', name='new_genre'),
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/$', 'hollywood.views.view_genre', name='view_genre'),
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/edit/$', 'hollywood.views.edit_genre', name='edit_genre'),
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/delete/$', 'hollywood.views.delete_genre', name='delete_genre'),
)
    </code></pre>
</section>
<section class="titleSlide" data-background="#168eae">
                    <h1>
    Basic Django App: Edit &amp; Delete
</h1>
                    <a id="yetiLogo" href="http://www.yetihq.com/"><img src="/static/img/yeti-power.png"></a>
                </section>
<section>
    <h2>Laying out our application</h2>
    <p>Our Django app will have this site map. This basic layout can be found in many applications.</p>
    <img src="/static/img/hollywood_site_map.png">
</section>
<section>
        <h2>Reading a File (Cont.)</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
                <li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
                <li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
                <li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="2">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
            </div>
        </div>
    </section>
<section>
    <h2>More than an education</h2>
    <p>There are a lot of bootcamps out there. At RocketU, you'll be surrounded by the 170+ amazing tech startups at RocketSpace.</p>
    <br>
    <img src="/static/img/rocketspace-name-logo-large-300x116.png" id="rocketSpaceLogo">
</section>

element
<section>
<h2>A network of your own</h2>
<p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p>
</section> element

element
<section>
<h2>RocketSpace staff</h2>
</section> element

element
<section>
<h2>Your instructors</h2>
<h4>Yeti</h4>
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div>
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div>
<div class="footer">
</div>
</section> element

element
<h2>A network of your own</h2> element

element
<p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p> element

element

element
<h2>RocketSpace staff</h2> element

element

element
<h2>Your instructors</h2> element

element
<h4>Yeti</h4> element

element
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div> element

element
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div> element

element
<div class="footer">
</div> element

element

element
<h2>Your classmates</h2> element

element
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul> element

element
<p><a href="#/4">Back to top</a></p> element

element

element
<h2>Prove you can program.</h2> element

element
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p> element

element
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p> element

element
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul> element

element
<section>
        <h2>A network of your own</h2>
        <p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p>
    </section>

element
<section>
<h2>Editing existing records</h2>
<p>Editing an existing object is a bit of a combination of the create view and the detail view -- you need a form to edit and process, but you are also finding an existing record.</p>
<p>Let's start by adding our route.</p>
<pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/edit/$', 'hollywood.views.edit_genre', name='edit_genre'),
)
        </code></pre>
</section> element

element
<section>
<h2>Editing existing records</h2>
<pre><code>
def edit_genre(request, genre_id):
    # Similar to the the detail view, we have to find the existing genre we are editing
    genre = Genre.objects.get(id=genre_id)

    # We still check to see if we are submitting the form
    if request.method == "POST":
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(request.POST, instance=genre)
        if form.is_valid():
            if form.save():
                return redirect("/genres/{}".format(genre_id))

    # Or just viewing the form
    else:
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(instance=genre)
    data = {"genre": genre, "form": form}
    return render(request, "genres/edit_genre.html", data)
        </code></pre>
</section> element

element
<section>
<h2>Editing existing records</h2>
<div>
<div class="col-3">
<p>Our edit template looks almost identical to our create template because it has the form, but when you actually load the page, the form will be prefilled.</p>
</div>
<div class="col-8 col-offset-1">
<h4>edit_genre.html</h4>
<pre><code>
<h1>Edit genre {{ genre.name }}</h1>
<form method="post">
    {% csrf_token %}
    {{ form }}
    <input type="submit" value="Update genre"/>
</form>
                </code></pre>
</div>
</div>
<div class="fragment">
<div class="col-3">
<p>Let's also update our detail view so that it's easy to edit a record we are looking at.</p>
</div>
<div class="col-8 col-offset-1">
<h4>view_genre.html</h4>
<pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it yourself</h2>
<p>Add edit functionality for movies and actors.</p>
</section> element

element

element
<h2>Editing existing records</h2> element

element
<p>Editing an existing object is a bit of a combination of the create view and the detail view -- you need a form to edit and process, but you are also finding an existing record.</p> element

element
<p>Let's start by adding our route.</p> element

element
<pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/edit/$', 'hollywood.views.edit_genre', name='edit_genre'),
)
        </code></pre> element

element

element
<h2>Editing existing records</h2> element

element
<pre><code>
def edit_genre(request, genre_id):
    # Similar to the the detail view, we have to find the existing genre we are editing
    genre = Genre.objects.get(id=genre_id)

    # We still check to see if we are submitting the form
    if request.method == "POST":
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(request.POST, instance=genre)
        if form.is_valid():
            if form.save():
                return redirect("/genres/{}".format(genre_id))

    # Or just viewing the form
    else:
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(instance=genre)
    data = {"genre": genre, "form": form}
    return render(request, "genres/edit_genre.html", data)
        </code></pre> element

element

element
<h2>Editing existing records</h2> element

element
<div>
<div class="col-3">
<p>Our edit template looks almost identical to our create template because it has the form, but when you actually load the page, the form will be prefilled.</p>
</div>
<div class="col-8 col-offset-1">
<h4>edit_genre.html</h4>
<pre><code>
<h1>Edit genre {{ genre.name }}</h1>
<form method="post">
    {% csrf_token %}
    {{ form }}
    <input type="submit" value="Update genre"/>
</form>
                </code></pre>
</div>
</div> element

element
<div class="fragment">
<div class="col-3">
<p>Let's also update our detail view so that it's easy to edit a record we are looking at.</p>
</div>
<div class="col-8 col-offset-1">
<h4>view_genre.html</h4>
<pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
</div>
</div> element

element

element
<h2>Do it yourself</h2> element

element
<p>Add edit functionality for movies and actors.</p> element

element
<section>
        <h2>Editing existing records</h2>
        <p>Editing an existing object is a bit of a combination of the create view and the detail view -- you need a form to edit and process, but you are also finding an existing record.</p>
        <p>Let's start by adding our route.</p>
        <pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/edit/$', 'hollywood.views.edit_genre', name='edit_genre'),
)
        </code></pre>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p>
        <ul>
            <li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
            <li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
            <li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
            <li>Create new text files for testing out your function!</li>
        </ul>
    </section>

element
<section>
<h2>Writing a File</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
<li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
<li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Writing a File (Cont.)</h2>
<div class="col-4">
<br/>
<ul>
<li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Context Manager</h2>
<p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p>
<p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p>
<p>They are used to run certain functions before and after a block of code.</p>
<br/><br/>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
<li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
<li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p>
<p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p>
<div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div>
<p style="clear:both;"><br/>Will become</p>
<div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div>
<p style="clear:both"><br/>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p>
<div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div>
</section> element

element

element
<h2>Writing a File</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
<li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
<li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
</div>
</div> element

element

element
<h2>Writing a File (Cont.)</h2> element

element
<div class="col-4">
<br/>
<ul>
<li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
</div>
</div> element

element

element
<h2>Context Manager</h2> element

element
<p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p> element

element
<p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p> element

element
<p>They are used to run certain functions before and after a block of code.</p> element

element
<br/> element
<br/> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
<li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
<li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p> element

element
<p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p> element

element
<div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div> element

element
<p style="clear:both;"><br/>Will become</p> element

element
<div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div> element

element
<p style="clear:both"><br/>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p> element

element
<div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div> element

element
<section>
        <h2>Writing a File</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
                <li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
                <li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>RocketSpace staff</h2>
    </section>

element
<h2>Your instructors</h2> element

element
<h4>Yeti</h4> element

element
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div> element

element
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div> element

element
<div class="footer">
</div> element

element

element
<h2>Your classmates</h2> element

element
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul> element

element
<p><a href="#/4">Back to top</a></p> element

element

element
<h2>Prove you can program.</h2> element

element
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p> element

element
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p> element

element
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul> element

element
<section>
        <h2>Your classmates</h2>
        <ul>
            <li>A brain</li>
            <li>An athlete</li>
            <li>A basket case</li>
            <li>A princess</li>
            <li>And a criminal</li>
        </ul>
        <p><a href="#/4">Back to top</a></p>
    </section>
<section>
        <h2>Editing existing records</h2>
        <pre><code>
def edit_genre(request, genre_id):
    # Similar to the the detail view, we have to find the existing genre we are editing
    genre = Genre.objects.get(id=genre_id)

    # We still check to see if we are submitting the form
    if request.method == "POST":
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(request.POST, instance=genre)
        if form.is_valid():
            if form.save():
                return redirect("/genres/{}".format(genre_id))

    # Or just viewing the form
    else:
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(instance=genre)
    data = {"genre": genre, "form": form}
    return render(request, "genres/edit_genre.html", data)
        </code></pre>
    </section>
<section>
        <h2>Editing existing records</h2>
        <div>
            <div class="col-3">
                <p>Our edit template looks almost identical to our create template because it has the form, but when you actually load the page, the form will be prefilled.</p>
            </div>
            <div class="col-8 col-offset-1">
                <h4>edit_genre.html</h4>
                <pre><code>
<h1>Edit genre {{ genre.name }}</h1>
<form method="post">
    {% csrf_token %}
    {{ form }}
    <input type="submit" value="Update genre">
</form>
                </code></pre>
            </div>
        </div>
        <div class="fragment">
            <div class="col-3">
                <p>Let's also update our detail view so that it's easy to edit a record we are looking at.</p>
            </div>
            <div class="col-8 col-offset-1">
                <h4>view_genre.html</h4>
                <pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it yourself</h2>
        <p>Add edit functionality for movies and actors.</p>
    </section>

element
<section>
<h2>Deleting records</h2>
<p>Last but not least, we want to be able to delete records as well.</p>
<h4>urls.py</h4>
<pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/delete/$', 'hollywood.views.delete_genre', name='delete_genre'),
)
        </code></pre>
<p>This should be starting to look quite repetitive -- that's a good thing.</p>
</section> element

element
<section>
<h2>Deleting records</h2>
<div>
<div class="col-4">
<p>Deleting works a little differently. We don't actually need to go to a page to delete an object, we can simply delete the object in the view, and then redirect the user to the index page.</p>
</div>
<div class="col-7 col-offset-1">
<h4>views.py</h4>
<pre><code>
def delete_genre(request, genre_id):
    genre = Genre.objects.get(id=genre_id)
    genre.delete()
    return redirect("/genres")
                </code></pre>
</div>
</div>
<div class="fragment">
<div class="col-4">
<p>As we did with edit, let's update the detail template so we can easily access the delete action.</p>
</div>
<div class="col-7 col-offset-1">
<h4>view_genre.html</h4>
<pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;a href="{% url "delete_genre" genre.id %}"&gt;Delete genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it yourself</h2>
<p>Guess what? Add delete functionality for actors and movies!</p>
</section> element

element

element
<h2>Deleting records</h2> element

element
<p>Last but not least, we want to be able to delete records as well.</p> element

element
<h4>urls.py</h4> element

element
<pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/delete/$', 'hollywood.views.delete_genre', name='delete_genre'),
)
        </code></pre> element

element
<p>This should be starting to look quite repetitive -- that's a good thing.</p> element

element

element
<h2>Deleting records</h2> element

element
<div>
<div class="col-4">
<p>Deleting works a little differently. We don't actually need to go to a page to delete an object, we can simply delete the object in the view, and then redirect the user to the index page.</p>
</div>
<div class="col-7 col-offset-1">
<h4>views.py</h4>
<pre><code>
def delete_genre(request, genre_id):
    genre = Genre.objects.get(id=genre_id)
    genre.delete()
    return redirect("/genres")
                </code></pre>
</div>
</div> element

element
<div class="fragment">
<div class="col-4">
<p>As we did with edit, let's update the detail template so we can easily access the delete action.</p>
</div>
<div class="col-7 col-offset-1">
<h4>view_genre.html</h4>
<pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;a href="{% url "delete_genre" genre.id %}"&gt;Delete genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
</div>
</div> element

element

element
<h2>Do it yourself</h2> element

element
<p>Guess what? Add delete functionality for actors and movies!</p> element

element
<section>
        <h2>Deleting records</h2>
        <p>Last but not least, we want to be able to delete records as well.</p>
        <h4>urls.py</h4>
        <pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/delete/$', 'hollywood.views.delete_genre', name='delete_genre'),
)
        </code></pre>
        <p>This should be starting to look quite repetitive -- that's a good thing.</p>
    </section>
<section>
        <h2>Writing a File (Cont.)</h2>
        <div class="col-4">
            <br>
            <ul>
                <li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br><br><br><br><br></li>
                <li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br><br><br><br><br></li>
                <li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="3">
                <pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Context Manager</h2>
        <p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p>
        <p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p>
        <p>They are used to run certain functions before and after a block of code.</p>
        <br><br>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
                <li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
                <li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p>
        <p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p>
        <div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div>
        <p style="clear:both;"><br>Will become</p>
        <div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div>
        <p style="clear:both"><br>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p>
        <div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div>
    </section>
<section class="titleSlide" data-background="#168eae">
                    <h1>
    File Manipulation
</h1>
                    <a id="yetiLogo" href="http://www.yetihq.com/"><img src="/static/img/yeti-power.png"></a>
                </section>
<section>
    <h2>Prove you can program.</h2>
    <p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
    <p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
    <ul>
        <li><a target="_blank" href="http://codingbat.com/python">Coding Bat</a></li>
        <li><a target="_blank" href="http://www.pythonchallenge.com/">Python Challenge</a></li>
        <li><a target="_blank" href="http://www.coderbyte.com/">Coderbyte</a></li>
    </ul>
</section>
<section>
    <h2>Learn web development. Build awesome things.</h2>
    <p>
        You quit your job, you told your friends and family you're doing something crazy, maybe you moved here. You're ready to learn, intensively, for the next twelve weeks. By the time you're done, you'll be able to build pretty much anything you see on the internet.
    </p>
</section>

element
<section>
<h2>What you'll be learning</h2>
<p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p>
<ul>
<li><a href="#/2/1">Prework</a></li>
<li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
<li><a href="#/2/3">Integrating JavaScript and Design</a></li>
<li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
<li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
<li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
</ul>
</section> element

element
<section>
<h2>Prework</h2>
<p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p>
<ul>
<li>Command Line: Give your computer instructions like a real programmer</li>
<li>HTML: Learn the basic building blocks of the front-facing web</li>
<li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
<li>Git: Version control is a lifesaver</li>
<li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
<li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
<li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
</ul>
</section> element

element
<section>
<h2>Object-oriented Python and Beginner Django</h2>
<ul>
<li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
<li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
<li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
<li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
<li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
<li>Project: Build a Django application with user authentication and database storage</li>
</ul>
</section> element

element
<section>
<h2>Integrating JavaScript and Design</h2>
<ul>
<li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
<li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
<li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
<li>Using third-party APIs: Query external services like Google and Instagram</li>
<li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
<li>Project: Integrate front-end technologies for a more interactive Django application</li>
</ul>
</section> element

element
<section>
<h2>Expand Your Developer Toolkit</h2>
<ul>
<li>Pair programming</li>
<li>Git strategies</li>
<li>Test-driven development</li>
<li>HTTP lifecycle</li>
<li>Computer science topics</li>
<li>Introduction to dev ops</li>
<li>Analytics and error reporting</li>
<li>Project: Work in a group to build a test-driven Django application</li>
</ul>
</section> element

element
<section>
<h2>AngularJS and Building Custom APIs</h2>
<ul>
<li>Basics of AngularJS</li>
<li>Build a Basecamp clone with AngularJS</li>
<li>Building your own custom API with Django and Tastypie</li>
<li>Integrating Django with AngularJS</li>
<li>Final Project: Demonstrate mastery with Django and AngularJS</li>
</ul>
</section> element

element
<section>
<h2>Prepping for Life After Bootcamp</h2>
<ul>
<li>Interview Prep</li>
<li>Presentation Prep</li>
<li>Development ecosystem</li>
</ul>
<p><a href="#/2">Back to top</a></p>
</section> element

element

element
<h2>What you'll be learning</h2> element

element
<p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p> element

element
<ul>
<li><a href="#/2/1">Prework</a></li>
<li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
<li><a href="#/2/3">Integrating JavaScript and Design</a></li>
<li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
<li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
<li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
</ul> element

element

element
<h2>Prework</h2> element

element
<p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p> element

element
<ul>
<li>Command Line: Give your computer instructions like a real programmer</li>
<li>HTML: Learn the basic building blocks of the front-facing web</li>
<li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
<li>Git: Version control is a lifesaver</li>
<li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
<li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
<li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
</ul> element

element

element
<h2>Object-oriented Python and Beginner Django</h2> element

element
<ul>
<li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
<li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
<li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
<li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
<li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
<li>Project: Build a Django application with user authentication and database storage</li>
</ul> element

element

element
<h2>Integrating JavaScript and Design</h2> element

element
<ul>
<li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
<li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
<li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
<li>Using third-party APIs: Query external services like Google and Instagram</li>
<li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
<li>Project: Integrate front-end technologies for a more interactive Django application</li>
</ul> element

element

element
<h2>Expand Your Developer Toolkit</h2> element

element
<ul>
<li>Pair programming</li>
<li>Git strategies</li>
<li>Test-driven development</li>
<li>HTTP lifecycle</li>
<li>Computer science topics</li>
<li>Introduction to dev ops</li>
<li>Analytics and error reporting</li>
<li>Project: Work in a group to build a test-driven Django application</li>
</ul> element

element

element
<h2>AngularJS and Building Custom APIs</h2> element

element
<ul>
<li>Basics of AngularJS</li>
<li>Build a Basecamp clone with AngularJS</li>
<li>Building your own custom API with Django and Tastypie</li>
<li>Integrating Django with AngularJS</li>
<li>Final Project: Demonstrate mastery with Django and AngularJS</li>
</ul> element

element

element
<h2>Prepping for Life After Bootcamp</h2> element

element
<ul>
<li>Interview Prep</li>
<li>Presentation Prep</li>
<li>Development ecosystem</li>
</ul> element

element
<p><a href="#/2">Back to top</a></p> element

element
<section>
        <h2>What you'll be learning</h2>
        <p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p>
        <ul>
            <li><a href="#/2/1">Prework</a></li>
            <li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
            <li><a href="#/2/3">Integrating JavaScript and Design</a></li>
            <li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
            <li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
            <li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
        </ul>
    </section>
<section>
        <h2>Deleting records</h2>
        <div>
            <div class="col-4">
                <p>Deleting works a little differently. We don't actually need to go to a page to delete an object, we can simply delete the object in the view, and then redirect the user to the index page.</p>
            </div>
            <div class="col-7 col-offset-1">
                <h4>views.py</h4>
                <pre><code>
def delete_genre(request, genre_id):
    genre = Genre.objects.get(id=genre_id)
    genre.delete()
    return redirect("/genres")
                </code></pre>
            </div>
        </div>
        <div class="fragment">
            <div class="col-4">
                <p>As we did with edit, let's update the detail template so we can easily access the delete action.</p>
            </div>
            <div class="col-7 col-offset-1">
                <h4>view_genre.html</h4>
                <pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;a href="{% url "delete_genre" genre.id %}"&gt;Delete genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it yourself</h2>
        <p>Guess what? Add delete functionality for actors and movies!</p>
    </section>
<section>
    <h2>Recap: Basic Django app</h2>
    <p>Congratulations! You made a Django project. It's simple, but captures the functionality that powers most applications you use on the web and in mobile apps.</p>
    <p>You'll start to notice routes just like the ones you created all over the web.</p>
    <h4>urls.py</h4>
    <pre><code>
urlpatterns = patterns('',
    url(r'^genres/$', 'hollywood.views.genres', name='genres'),
    url(r'^genres/new/$', 'hollywood.views.new_genre', name='new_genre'),
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/$', 'hollywood.views.view_genre', name='view_genre'),
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/edit/$', 'hollywood.views.edit_genre', name='edit_genre'),
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/delete/$', 'hollywood.views.delete_genre', name='delete_genre'),
)
    </code></pre>
</section>
<section>
    <h2>Brief Python History</h2>
    <p>Python is a scripting language, which means at its core it has a bunch of functionality built in for operations like file manipulation.</p>
    <ul>
        <li>Python was created by Guido van Rossum, Benevolant Dictator for Life (BDFL), in the late 1980's.</li>
        <li>Python has released major versions 1, 2, and 3</li>
        <li>Version 3 of python had some backwards incompatible changes with version 2, so they also created 2.6 and 2.7.</li>
        <li>Many people still use python 2.7 over 3, especially because major operating systems have not converted over yet.</li>
        <li>The community is still slowly making the transition from python 2 to 3 even though 3 was released in December 2008.</li>
        <li>2.7 will be the last release in the version 2 line, it was released in July 2010.</li>
    </ul>
</section>

element
<section>
<h2>Directories and Files</h2>
<p>Python has a library called <code>os</code> which contains scripting utility functions.</p>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br/><br/></li>
<li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br/><br/></li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">import os

print os.getcwd()</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="7">
<pre><code class="python">
print os.getcwd()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<ul>
<li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
<li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
</ul>
</section> element

element

element
<h2>Directories and Files</h2> element

element
<p>Python has a library called <code>os</code> which contains scripting utility functions.</p> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br/><br/></li>
<li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br/><br/></li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">import os

print os.getcwd()</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="7">
<pre><code class="python">
print os.getcwd()
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<ul>
<li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
<li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
</ul> element

element
<section>
        <h2>Directories and Files</h2>
        <p>Python has a library called <code>os</code> which contains scripting utility functions.</p>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br><br><br></li>
                <li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br><br><br></li>
                <li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br><br></li>
                <li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br><br></li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">import os

print os.getcwd()</code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="3">
                <pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="7">
                <pre><code class="python">
print os.getcwd()
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Prework</h2>
        <p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p>
        <ul>
            <li>Command Line: Give your computer instructions like a real programmer</li>
            <li>HTML: Learn the basic building blocks of the front-facing web</li>
            <li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
            <li>Git: Version control is a lifesaver</li>
            <li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
            <li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
            <li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
        </ul>
    </section>
<section>
        <h2>Object-oriented Python and Beginner Django</h2>
        <ul>
            <li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
            <li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
            <li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
            <li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
            <li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
            <li>Project: Build a Django application with user authentication and database storage</li>
        </ul>
    </section>
<section>
        <h2>Integrating JavaScript and Design</h2>
        <ul>
            <li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
            <li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
            <li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
            <li>Using third-party APIs: Query external services like Google and Instagram</li>
            <li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
            <li>Project: Integrate front-end technologies for a more interactive Django application</li>
        </ul>
    </section>
<section>
        <h2>Expand Your Developer Toolkit</h2>
        <ul>
            <li>Pair programming</li>
            <li>Git strategies</li>
            <li>Test-driven development</li>
            <li>HTTP lifecycle</li>
            <li>Computer science topics</li>
            <li>Introduction to dev ops</li>
            <li>Analytics and error reporting</li>
            <li>Project: Work in a group to build a test-driven Django application</li>
        </ul>
    </section>
<section>
        <h2>AngularJS and Building Custom APIs</h2>
        <ul>
            <li>Basics of AngularJS</li>
            <li>Build a Basecamp clone with AngularJS</li>
            <li>Building your own custom API with Django and Tastypie</li>
            <li>Integrating Django with AngularJS</li>
            <li>Final Project: Demonstrate mastery with Django and AngularJS</li>
        </ul>
    </section>
<section>
        <h2>Prepping for Life After Bootcamp</h2>
        <ul>
            <li>Interview Prep</li>
            <li>Presentation Prep</li>
            <li>Development ecosystem</li>
        </ul>
        <p><a href="#/2">Back to top</a></p>
    </section>
<section class="titleSlide" data-background="#168eae">
                    <h1>
    Basic Django App: Edit &amp; Delete
</h1>
                    <a id="yetiLogo" href="http://www.yetihq.com/"><img src="/static/img/yeti-power.png"></a>
                </section>
<section>
    <h2>Laying out our application</h2>
    <p>Our Django app will have this site map. This basic layout can be found in many applications.</p>
    <img src="/static/img/hollywood_site_map.png">
</section>

element
<section>
<h2>Editing existing records</h2>
<p>Editing an existing object is a bit of a combination of the create view and the detail view -- you need a form to edit and process, but you are also finding an existing record.</p>
<p>Let's start by adding our route.</p>
<pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/edit/$', 'hollywood.views.edit_genre', name='edit_genre'),
)
        </code></pre>
</section> element

element
<section>
<h2>Editing existing records</h2>
<pre><code>
def edit_genre(request, genre_id):
    # Similar to the the detail view, we have to find the existing genre we are editing
    genre = Genre.objects.get(id=genre_id)

    # We still check to see if we are submitting the form
    if request.method == "POST":
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(request.POST, instance=genre)
        if form.is_valid():
            if form.save():
                return redirect("/genres/{}".format(genre_id))

    # Or just viewing the form
    else:
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(instance=genre)
    data = {"genre": genre, "form": form}
    return render(request, "genres/edit_genre.html", data)
        </code></pre>
</section> element

element
<section>
<h2>Editing existing records</h2>
<div>
<div class="col-3">
<p>Our edit template looks almost identical to our create template because it has the form, but when you actually load the page, the form will be prefilled.</p>
</div>
<div class="col-8 col-offset-1">
<h4>edit_genre.html</h4>
<pre><code>
<h1>Edit genre {{ genre.name }}</h1>
<form method="post">
    {% csrf_token %}
    {{ form }}
    <input type="submit" value="Update genre"/>
</form>
                </code></pre>
</div>
</div>
<div class="fragment">
<div class="col-3">
<p>Let's also update our detail view so that it's easy to edit a record we are looking at.</p>
</div>
<div class="col-8 col-offset-1">
<h4>view_genre.html</h4>
<pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it yourself</h2>
<p>Add edit functionality for movies and actors.</p>
</section> element

element

element
<h2>Editing existing records</h2> element

element
<p>Editing an existing object is a bit of a combination of the create view and the detail view -- you need a form to edit and process, but you are also finding an existing record.</p> element

element
<p>Let's start by adding our route.</p> element

element
<pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/edit/$', 'hollywood.views.edit_genre', name='edit_genre'),
)
        </code></pre> element

element

element
<h2>Editing existing records</h2> element

element
<pre><code>
def edit_genre(request, genre_id):
    # Similar to the the detail view, we have to find the existing genre we are editing
    genre = Genre.objects.get(id=genre_id)

    # We still check to see if we are submitting the form
    if request.method == "POST":
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(request.POST, instance=genre)
        if form.is_valid():
            if form.save():
                return redirect("/genres/{}".format(genre_id))

    # Or just viewing the form
    else:
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(instance=genre)
    data = {"genre": genre, "form": form}
    return render(request, "genres/edit_genre.html", data)
        </code></pre> element

element

element
<h2>Editing existing records</h2> element

element
<div>
<div class="col-3">
<p>Our edit template looks almost identical to our create template because it has the form, but when you actually load the page, the form will be prefilled.</p>
</div>
<div class="col-8 col-offset-1">
<h4>edit_genre.html</h4>
<pre><code>
<h1>Edit genre {{ genre.name }}</h1>
<form method="post">
    {% csrf_token %}
    {{ form }}
    <input type="submit" value="Update genre"/>
</form>
                </code></pre>
</div>
</div> element

element
<div class="fragment">
<div class="col-3">
<p>Let's also update our detail view so that it's easy to edit a record we are looking at.</p>
</div>
<div class="col-8 col-offset-1">
<h4>view_genre.html</h4>
<pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
</div>
</div> element

element

element
<h2>Do it yourself</h2> element

element
<p>Add edit functionality for movies and actors.</p> element

element
<section>
        <h2>Editing existing records</h2>
        <p>Editing an existing object is a bit of a combination of the create view and the detail view -- you need a form to edit and process, but you are also finding an existing record.</p>
        <p>Let's start by adding our route.</p>
        <pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/edit/$', 'hollywood.views.edit_genre', name='edit_genre'),
)
        </code></pre>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <ul>
            <li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
            <li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
        </ul>
    </section>

element
<section>
<h2>Reading a File</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
<li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
<li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
<li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
<li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre>

Hello world!
Hello universe!
                </pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="4">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="6">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Reading a File (Cont.)</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
<li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
<li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
<li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="2">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p>
<ul>
<li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
<li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
<li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
<li>Create new text files for testing out your function!</li>
</ul>
</section> element

element

element
<h2>Reading a File</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
<li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
<li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
<li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
<li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre>

Hello world!
Hello universe!
                </pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="4">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="6">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
</div>
</div> element

element

element
<h2>Reading a File (Cont.)</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
<li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
<li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
<li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="2">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p> element

element
<ul>
<li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
<li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
<li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
<li>Create new text files for testing out your function!</li>
</ul> element

element
<section>
        <h2>Reading a File</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
                <li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
                <li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
                <li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
                <li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre>

Hello world!
Hello universe!
                </pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="4">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="6">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
            </div>
        </div>
    </section>
<section>
    <h2>More than an education</h2>
    <p>There are a lot of bootcamps out there. At RocketU, you'll be surrounded by the 170+ amazing tech startups at RocketSpace.</p>
    <br>
    <img src="/static/img/rocketspace-name-logo-large-300x116.png" id="rocketSpaceLogo">
</section>

element
<section>
<h2>A network of your own</h2>
<p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p>
</section> element

element
<section>
<h2>RocketSpace staff</h2>
</section> element

element
<section>
<h2>Your instructors</h2>
<h4>Yeti</h4>
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div>
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div>
<div class="footer">
</div>
</section> element

element
<h2>A network of your own</h2> element

element
<p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p> element

element

element
<h2>RocketSpace staff</h2> element

element

element
<h2>Your instructors</h2> element

element
<h4>Yeti</h4> element

element
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div> element

element
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div> element

element
<div class="footer">
</div> element

element

element
<h2>Your classmates</h2> element

element
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul> element

element
<p><a href="#/4">Back to top</a></p> element

element

element
<h2>Prove you can program.</h2> element

element
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p> element

element
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p> element

element
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul> element

element
<section>
        <h2>A network of your own</h2>
        <p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p>
    </section>
<section>
        <h2>Editing existing records</h2>
        <pre><code>
def edit_genre(request, genre_id):
    # Similar to the the detail view, we have to find the existing genre we are editing
    genre = Genre.objects.get(id=genre_id)

    # We still check to see if we are submitting the form
    if request.method == "POST":
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(request.POST, instance=genre)
        if form.is_valid():
            if form.save():
                return redirect("/genres/{}".format(genre_id))

    # Or just viewing the form
    else:
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(instance=genre)
    data = {"genre": genre, "form": form}
    return render(request, "genres/edit_genre.html", data)
        </code></pre>
    </section>
<section>
        <h2>Editing existing records</h2>
        <div>
            <div class="col-3">
                <p>Our edit template looks almost identical to our create template because it has the form, but when you actually load the page, the form will be prefilled.</p>
            </div>
            <div class="col-8 col-offset-1">
                <h4>edit_genre.html</h4>
                <pre><code>
<h1>Edit genre {{ genre.name }}</h1>
<form method="post">
    {% csrf_token %}
    {{ form }}
    <input type="submit" value="Update genre">
</form>
                </code></pre>
            </div>
        </div>
        <div class="fragment">
            <div class="col-3">
                <p>Let's also update our detail view so that it's easy to edit a record we are looking at.</p>
            </div>
            <div class="col-8 col-offset-1">
                <h4>view_genre.html</h4>
                <pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it yourself</h2>
        <p>Add edit functionality for movies and actors.</p>
    </section>

element
<section>
<h2>Deleting records</h2>
<p>Last but not least, we want to be able to delete records as well.</p>
<h4>urls.py</h4>
<pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/delete/$', 'hollywood.views.delete_genre', name='delete_genre'),
)
        </code></pre>
<p>This should be starting to look quite repetitive -- that's a good thing.</p>
</section> element

element
<section>
<h2>Deleting records</h2>
<div>
<div class="col-4">
<p>Deleting works a little differently. We don't actually need to go to a page to delete an object, we can simply delete the object in the view, and then redirect the user to the index page.</p>
</div>
<div class="col-7 col-offset-1">
<h4>views.py</h4>
<pre><code>
def delete_genre(request, genre_id):
    genre = Genre.objects.get(id=genre_id)
    genre.delete()
    return redirect("/genres")
                </code></pre>
</div>
</div>
<div class="fragment">
<div class="col-4">
<p>As we did with edit, let's update the detail template so we can easily access the delete action.</p>
</div>
<div class="col-7 col-offset-1">
<h4>view_genre.html</h4>
<pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;a href="{% url "delete_genre" genre.id %}"&gt;Delete genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it yourself</h2>
<p>Guess what? Add delete functionality for actors and movies!</p>
</section> element

element

element
<h2>Deleting records</h2> element

element
<p>Last but not least, we want to be able to delete records as well.</p> element

element
<h4>urls.py</h4> element

element
<pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/delete/$', 'hollywood.views.delete_genre', name='delete_genre'),
)
        </code></pre> element

element
<p>This should be starting to look quite repetitive -- that's a good thing.</p> element

element

element
<h2>Deleting records</h2> element

element
<div>
<div class="col-4">
<p>Deleting works a little differently. We don't actually need to go to a page to delete an object, we can simply delete the object in the view, and then redirect the user to the index page.</p>
</div>
<div class="col-7 col-offset-1">
<h4>views.py</h4>
<pre><code>
def delete_genre(request, genre_id):
    genre = Genre.objects.get(id=genre_id)
    genre.delete()
    return redirect("/genres")
                </code></pre>
</div>
</div> element

element
<div class="fragment">
<div class="col-4">
<p>As we did with edit, let's update the detail template so we can easily access the delete action.</p>
</div>
<div class="col-7 col-offset-1">
<h4>view_genre.html</h4>
<pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;a href="{% url "delete_genre" genre.id %}"&gt;Delete genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
</div>
</div> element

element

element
<h2>Do it yourself</h2> element

element
<p>Guess what? Add delete functionality for actors and movies!</p> element

element
<section>
        <h2>Deleting records</h2>
        <p>Last but not least, we want to be able to delete records as well.</p>
        <h4>urls.py</h4>
        <pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/delete/$', 'hollywood.views.delete_genre', name='delete_genre'),
)
        </code></pre>
        <p>This should be starting to look quite repetitive -- that's a good thing.</p>
    </section>
<section>
        <h2>Reading a File (Cont.)</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
                <li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
                <li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
                <li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="2">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p>
        <ul>
            <li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
            <li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
            <li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
            <li>Create new text files for testing out your function!</li>
        </ul>
    </section>

element
<section>
<h2>Writing a File</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
<li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
<li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Writing a File (Cont.)</h2>
<div class="col-4">
<br/>
<ul>
<li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Context Manager</h2>
<p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p>
<p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p>
<p>They are used to run certain functions before and after a block of code.</p>
<br/><br/>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
<li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
<li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p>
<p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p>
<div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div>
<p style="clear:both;"><br/>Will become</p>
<div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div>
<p style="clear:both"><br/>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p>
<div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div>
</section> element

element

element
<h2>Writing a File</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
<li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
<li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
</div>
</div> element

element

element
<h2>Writing a File (Cont.)</h2> element

element
<div class="col-4">
<br/>
<ul>
<li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
</div>
</div> element

element

element
<h2>Context Manager</h2> element

element
<p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p> element

element
<p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p> element

element
<p>They are used to run certain functions before and after a block of code.</p> element

element
<br/> element
<br/> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
<li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
<li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p> element

element
<p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p> element

element
<div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div> element

element
<p style="clear:both;"><br/>Will become</p> element

element
<div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div> element

element
<p style="clear:both"><br/>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p> element

element
<div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div> element

element
<section>
        <h2>Writing a File</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
                <li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
                <li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>RocketSpace staff</h2>
    </section>

element
<h2>Your instructors</h2> element

element
<h4>Yeti</h4> element

element
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div> element

element
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div> element

element
<div class="footer">
</div> element

element

element
<h2>Your classmates</h2> element

element
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul> element

element
<p><a href="#/4">Back to top</a></p> element

element

element
<h2>Prove you can program.</h2> element

element
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p> element

element
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p> element

element
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul> element

element
<section>
        <h2>Your classmates</h2>
        <ul>
            <li>A brain</li>
            <li>An athlete</li>
            <li>A basket case</li>
            <li>A princess</li>
            <li>And a criminal</li>
        </ul>
        <p><a href="#/4">Back to top</a></p>
    </section>
<section>
        <h2>Deleting records</h2>
        <div>
            <div class="col-4">
                <p>Deleting works a little differently. We don't actually need to go to a page to delete an object, we can simply delete the object in the view, and then redirect the user to the index page.</p>
            </div>
            <div class="col-7 col-offset-1">
                <h4>views.py</h4>
                <pre><code>
def delete_genre(request, genre_id):
    genre = Genre.objects.get(id=genre_id)
    genre.delete()
    return redirect("/genres")
                </code></pre>
            </div>
        </div>
        <div class="fragment">
            <div class="col-4">
                <p>As we did with edit, let's update the detail template so we can easily access the delete action.</p>
            </div>
            <div class="col-7 col-offset-1">
                <h4>view_genre.html</h4>
                <pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;a href="{% url "delete_genre" genre.id %}"&gt;Delete genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it yourself</h2>
        <p>Guess what? Add delete functionality for actors and movies!</p>
    </section>
<section>
    <h2>Recap: Basic Django app</h2>
    <p>Congratulations! You made a Django project. It's simple, but captures the functionality that powers most applications you use on the web and in mobile apps.</p>
    <p>You'll start to notice routes just like the ones you created all over the web.</p>
    <h4>urls.py</h4>
    <pre><code>
urlpatterns = patterns('',
    url(r'^genres/$', 'hollywood.views.genres', name='genres'),
    url(r'^genres/new/$', 'hollywood.views.new_genre', name='new_genre'),
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/$', 'hollywood.views.view_genre', name='view_genre'),
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/edit/$', 'hollywood.views.edit_genre', name='edit_genre'),
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/delete/$', 'hollywood.views.delete_genre', name='delete_genre'),
)
    </code></pre>
</section>
<section class="titleSlide" data-background="#168eae">
                    <h1>
    Basic Django App: Edit &amp; Delete
</h1>
                    <a id="yetiLogo" href="http://www.yetihq.com/"><img src="/static/img/yeti-power.png"></a>
                </section>
<section>
    <h2>Laying out our application</h2>
    <p>Our Django app will have this site map. This basic layout can be found in many applications.</p>
    <img src="/static/img/hollywood_site_map.png">
</section>

element
<section>
<h2>Editing existing records</h2>
<p>Editing an existing object is a bit of a combination of the create view and the detail view -- you need a form to edit and process, but you are also finding an existing record.</p>
<p>Let's start by adding our route.</p>
<pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/edit/$', 'hollywood.views.edit_genre', name='edit_genre'),
)
        </code></pre>
</section> element

element
<section>
<h2>Editing existing records</h2>
<pre><code>
def edit_genre(request, genre_id):
    # Similar to the the detail view, we have to find the existing genre we are editing
    genre = Genre.objects.get(id=genre_id)

    # We still check to see if we are submitting the form
    if request.method == "POST":
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(request.POST, instance=genre)
        if form.is_valid():
            if form.save():
                return redirect("/genres/{}".format(genre_id))

    # Or just viewing the form
    else:
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(instance=genre)
    data = {"genre": genre, "form": form}
    return render(request, "genres/edit_genre.html", data)
        </code></pre>
</section> element

element
<section>
<h2>Editing existing records</h2>
<div>
<div class="col-3">
<p>Our edit template looks almost identical to our create template because it has the form, but when you actually load the page, the form will be prefilled.</p>
</div>
<div class="col-8 col-offset-1">
<h4>edit_genre.html</h4>
<pre><code>
<h1>Edit genre {{ genre.name }}</h1>
<form method="post">
    {% csrf_token %}
    {{ form }}
    <input type="submit" value="Update genre"/>
</form>
                </code></pre>
</div>
</div>
<div class="fragment">
<div class="col-3">
<p>Let's also update our detail view so that it's easy to edit a record we are looking at.</p>
</div>
<div class="col-8 col-offset-1">
<h4>view_genre.html</h4>
<pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it yourself</h2>
<p>Add edit functionality for movies and actors.</p>
</section> element

element

element
<h2>Editing existing records</h2> element

element
<p>Editing an existing object is a bit of a combination of the create view and the detail view -- you need a form to edit and process, but you are also finding an existing record.</p> element

element
<p>Let's start by adding our route.</p> element

element
<pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/edit/$', 'hollywood.views.edit_genre', name='edit_genre'),
)
        </code></pre> element

element

element
<h2>Editing existing records</h2> element

element
<pre><code>
def edit_genre(request, genre_id):
    # Similar to the the detail view, we have to find the existing genre we are editing
    genre = Genre.objects.get(id=genre_id)

    # We still check to see if we are submitting the form
    if request.method == "POST":
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(request.POST, instance=genre)
        if form.is_valid():
            if form.save():
                return redirect("/genres/{}".format(genre_id))

    # Or just viewing the form
    else:
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(instance=genre)
    data = {"genre": genre, "form": form}
    return render(request, "genres/edit_genre.html", data)
        </code></pre> element

element

element
<h2>Editing existing records</h2> element

element
<div>
<div class="col-3">
<p>Our edit template looks almost identical to our create template because it has the form, but when you actually load the page, the form will be prefilled.</p>
</div>
<div class="col-8 col-offset-1">
<h4>edit_genre.html</h4>
<pre><code>
<h1>Edit genre {{ genre.name }}</h1>
<form method="post">
    {% csrf_token %}
    {{ form }}
    <input type="submit" value="Update genre"/>
</form>
                </code></pre>
</div>
</div> element

element
<div class="fragment">
<div class="col-3">
<p>Let's also update our detail view so that it's easy to edit a record we are looking at.</p>
</div>
<div class="col-8 col-offset-1">
<h4>view_genre.html</h4>
<pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
</div>
</div> element

element

element
<h2>Do it yourself</h2> element

element
<p>Add edit functionality for movies and actors.</p> element

element
<section>
        <h2>Editing existing records</h2>
        <p>Editing an existing object is a bit of a combination of the create view and the detail view -- you need a form to edit and process, but you are also finding an existing record.</p>
        <p>Let's start by adding our route.</p>
        <pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/edit/$', 'hollywood.views.edit_genre', name='edit_genre'),
)
        </code></pre>
    </section>
<section>
        <h2>Writing a File (Cont.)</h2>
        <div class="col-4">
            <br>
            <ul>
                <li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br><br><br><br><br></li>
                <li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br><br><br><br><br></li>
                <li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="3">
                <pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Context Manager</h2>
        <p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p>
        <p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p>
        <p>They are used to run certain functions before and after a block of code.</p>
        <br><br>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
                <li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
                <li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p>
        <p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p>
        <div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div>
        <p style="clear:both;"><br>Will become</p>
        <div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div>
        <p style="clear:both"><br>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p>
        <div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div>
    </section>
<section>
    <h2>Prove you can program.</h2>
    <p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
    <p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
    <ul>
        <li><a target="_blank" href="http://codingbat.com/python">Coding Bat</a></li>
        <li><a target="_blank" href="http://www.pythonchallenge.com/">Python Challenge</a></li>
        <li><a target="_blank" href="http://www.coderbyte.com/">Coderbyte</a></li>
    </ul>
</section>
<section>
    <h2>Learn web development. Build awesome things.</h2>
    <p>
        You quit your job, you told your friends and family you're doing something crazy, maybe you moved here. You're ready to learn, intensively, for the next twelve weeks. By the time you're done, you'll be able to build pretty much anything you see on the internet.
    </p>
</section>

element
<section>
<h2>What you'll be learning</h2>
<p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p>
<ul>
<li><a href="#/2/1">Prework</a></li>
<li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
<li><a href="#/2/3">Integrating JavaScript and Design</a></li>
<li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
<li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
<li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
</ul>
</section> element

element
<section>
<h2>Prework</h2>
<p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p>
<ul>
<li>Command Line: Give your computer instructions like a real programmer</li>
<li>HTML: Learn the basic building blocks of the front-facing web</li>
<li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
<li>Git: Version control is a lifesaver</li>
<li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
<li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
<li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
</ul>
</section> element

element
<section>
<h2>Object-oriented Python and Beginner Django</h2>
<ul>
<li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
<li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
<li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
<li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
<li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
<li>Project: Build a Django application with user authentication and database storage</li>
</ul>
</section> element

element
<section>
<h2>Integrating JavaScript and Design</h2>
<ul>
<li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
<li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
<li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
<li>Using third-party APIs: Query external services like Google and Instagram</li>
<li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
<li>Project: Integrate front-end technologies for a more interactive Django application</li>
</ul>
</section> element

element
<section>
<h2>Expand Your Developer Toolkit</h2>
<ul>
<li>Pair programming</li>
<li>Git strategies</li>
<li>Test-driven development</li>
<li>HTTP lifecycle</li>
<li>Computer science topics</li>
<li>Introduction to dev ops</li>
<li>Analytics and error reporting</li>
<li>Project: Work in a group to build a test-driven Django application</li>
</ul>
</section> element

element
<section>
<h2>AngularJS and Building Custom APIs</h2>
<ul>
<li>Basics of AngularJS</li>
<li>Build a Basecamp clone with AngularJS</li>
<li>Building your own custom API with Django and Tastypie</li>
<li>Integrating Django with AngularJS</li>
<li>Final Project: Demonstrate mastery with Django and AngularJS</li>
</ul>
</section> element

element
<section>
<h2>Prepping for Life After Bootcamp</h2>
<ul>
<li>Interview Prep</li>
<li>Presentation Prep</li>
<li>Development ecosystem</li>
</ul>
<p><a href="#/2">Back to top</a></p>
</section> element

element

element
<h2>What you'll be learning</h2> element

element
<p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p> element

element
<ul>
<li><a href="#/2/1">Prework</a></li>
<li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
<li><a href="#/2/3">Integrating JavaScript and Design</a></li>
<li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
<li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
<li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
</ul> element

element

element
<h2>Prework</h2> element

element
<p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p> element

element
<ul>
<li>Command Line: Give your computer instructions like a real programmer</li>
<li>HTML: Learn the basic building blocks of the front-facing web</li>
<li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
<li>Git: Version control is a lifesaver</li>
<li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
<li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
<li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
</ul> element

element

element
<h2>Object-oriented Python and Beginner Django</h2> element

element
<ul>
<li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
<li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
<li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
<li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
<li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
<li>Project: Build a Django application with user authentication and database storage</li>
</ul> element

element

element
<h2>Integrating JavaScript and Design</h2> element

element
<ul>
<li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
<li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
<li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
<li>Using third-party APIs: Query external services like Google and Instagram</li>
<li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
<li>Project: Integrate front-end technologies for a more interactive Django application</li>
</ul> element

element

element
<h2>Expand Your Developer Toolkit</h2> element

element
<ul>
<li>Pair programming</li>
<li>Git strategies</li>
<li>Test-driven development</li>
<li>HTTP lifecycle</li>
<li>Computer science topics</li>
<li>Introduction to dev ops</li>
<li>Analytics and error reporting</li>
<li>Project: Work in a group to build a test-driven Django application</li>
</ul> element

element

element
<h2>AngularJS and Building Custom APIs</h2> element

element
<ul>
<li>Basics of AngularJS</li>
<li>Build a Basecamp clone with AngularJS</li>
<li>Building your own custom API with Django and Tastypie</li>
<li>Integrating Django with AngularJS</li>
<li>Final Project: Demonstrate mastery with Django and AngularJS</li>
</ul> element

element

element
<h2>Prepping for Life After Bootcamp</h2> element

element
<ul>
<li>Interview Prep</li>
<li>Presentation Prep</li>
<li>Development ecosystem</li>
</ul> element

element
<p><a href="#/2">Back to top</a></p> element

element
<section>
        <h2>What you'll be learning</h2>
        <p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p>
        <ul>
            <li><a href="#/2/1">Prework</a></li>
            <li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
            <li><a href="#/2/3">Integrating JavaScript and Design</a></li>
            <li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
            <li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
            <li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
        </ul>
    </section>
<section>
        <h2>Editing existing records</h2>
        <pre><code>
def edit_genre(request, genre_id):
    # Similar to the the detail view, we have to find the existing genre we are editing
    genre = Genre.objects.get(id=genre_id)

    # We still check to see if we are submitting the form
    if request.method == "POST":
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(request.POST, instance=genre)
        if form.is_valid():
            if form.save():
                return redirect("/genres/{}".format(genre_id))

    # Or just viewing the form
    else:
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(instance=genre)
    data = {"genre": genre, "form": form}
    return render(request, "genres/edit_genre.html", data)
        </code></pre>
    </section>
<section>
        <h2>Editing existing records</h2>
        <div>
            <div class="col-3">
                <p>Our edit template looks almost identical to our create template because it has the form, but when you actually load the page, the form will be prefilled.</p>
            </div>
            <div class="col-8 col-offset-1">
                <h4>edit_genre.html</h4>
                <pre><code>
<h1>Edit genre {{ genre.name }}</h1>
<form method="post">
    {% csrf_token %}
    {{ form }}
    <input type="submit" value="Update genre">
</form>
                </code></pre>
            </div>
        </div>
        <div class="fragment">
            <div class="col-3">
                <p>Let's also update our detail view so that it's easy to edit a record we are looking at.</p>
            </div>
            <div class="col-8 col-offset-1">
                <h4>view_genre.html</h4>
                <pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it yourself</h2>
        <p>Add edit functionality for movies and actors.</p>
    </section>
<section class="titleSlide" data-background="#168eae">
                    <h1>
    File Manipulation
</h1>
                    <a id="yetiLogo" href="http://www.yetihq.com/"><img src="/static/img/yeti-power.png"></a>
                </section>
<section>
    <h2>Brief Python History</h2>
    <p>Python is a scripting language, which means at its core it has a bunch of functionality built in for operations like file manipulation.</p>
    <ul>
        <li>Python was created by Guido van Rossum, Benevolant Dictator for Life (BDFL), in the late 1980's.</li>
        <li>Python has released major versions 1, 2, and 3</li>
        <li>Version 3 of python had some backwards incompatible changes with version 2, so they also created 2.6 and 2.7.</li>
        <li>Many people still use python 2.7 over 3, especially because major operating systems have not converted over yet.</li>
        <li>The community is still slowly making the transition from python 2 to 3 even though 3 was released in December 2008.</li>
        <li>2.7 will be the last release in the version 2 line, it was released in July 2010.</li>
    </ul>
</section>

element
<section>
<h2>Directories and Files</h2>
<p>Python has a library called <code>os</code> which contains scripting utility functions.</p>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br/><br/></li>
<li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br/><br/></li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">import os

print os.getcwd()</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="7">
<pre><code class="python">
print os.getcwd()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<ul>
<li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
<li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
</ul>
</section> element

element

element
<h2>Directories and Files</h2> element

element
<p>Python has a library called <code>os</code> which contains scripting utility functions.</p> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br/><br/></li>
<li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br/><br/></li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">import os

print os.getcwd()</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="7">
<pre><code class="python">
print os.getcwd()
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<ul>
<li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
<li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
</ul> element

element
<section>
        <h2>Directories and Files</h2>
        <p>Python has a library called <code>os</code> which contains scripting utility functions.</p>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br><br><br></li>
                <li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br><br><br></li>
                <li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br><br></li>
                <li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br><br></li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">import os

print os.getcwd()</code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="3">
                <pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="7">
                <pre><code class="python">
print os.getcwd()
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Prework</h2>
        <p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p>
        <ul>
            <li>Command Line: Give your computer instructions like a real programmer</li>
            <li>HTML: Learn the basic building blocks of the front-facing web</li>
            <li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
            <li>Git: Version control is a lifesaver</li>
            <li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
            <li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
            <li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
        </ul>
    </section>
<section>
        <h2>Object-oriented Python and Beginner Django</h2>
        <ul>
            <li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
            <li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
            <li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
            <li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
            <li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
            <li>Project: Build a Django application with user authentication and database storage</li>
        </ul>
    </section>
<section>
        <h2>Integrating JavaScript and Design</h2>
        <ul>
            <li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
            <li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
            <li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
            <li>Using third-party APIs: Query external services like Google and Instagram</li>
            <li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
            <li>Project: Integrate front-end technologies for a more interactive Django application</li>
        </ul>
    </section>

element
<section>
<h2>Deleting records</h2>
<p>Last but not least, we want to be able to delete records as well.</p>
<h4>urls.py</h4>
<pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/delete/$', 'hollywood.views.delete_genre', name='delete_genre'),
)
        </code></pre>
<p>This should be starting to look quite repetitive -- that's a good thing.</p>
</section> element

element
<section>
<h2>Deleting records</h2>
<div>
<div class="col-4">
<p>Deleting works a little differently. We don't actually need to go to a page to delete an object, we can simply delete the object in the view, and then redirect the user to the index page.</p>
</div>
<div class="col-7 col-offset-1">
<h4>views.py</h4>
<pre><code>
def delete_genre(request, genre_id):
    genre = Genre.objects.get(id=genre_id)
    genre.delete()
    return redirect("/genres")
                </code></pre>
</div>
</div>
<div class="fragment">
<div class="col-4">
<p>As we did with edit, let's update the detail template so we can easily access the delete action.</p>
</div>
<div class="col-7 col-offset-1">
<h4>view_genre.html</h4>
<pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;a href="{% url "delete_genre" genre.id %}"&gt;Delete genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it yourself</h2>
<p>Guess what? Add delete functionality for actors and movies!</p>
</section> element

element

element
<h2>Deleting records</h2> element

element
<p>Last but not least, we want to be able to delete records as well.</p> element

element
<h4>urls.py</h4> element

element
<pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/delete/$', 'hollywood.views.delete_genre', name='delete_genre'),
)
        </code></pre> element

element
<p>This should be starting to look quite repetitive -- that's a good thing.</p> element

element

element
<h2>Deleting records</h2> element

element
<div>
<div class="col-4">
<p>Deleting works a little differently. We don't actually need to go to a page to delete an object, we can simply delete the object in the view, and then redirect the user to the index page.</p>
</div>
<div class="col-7 col-offset-1">
<h4>views.py</h4>
<pre><code>
def delete_genre(request, genre_id):
    genre = Genre.objects.get(id=genre_id)
    genre.delete()
    return redirect("/genres")
                </code></pre>
</div>
</div> element

element
<div class="fragment">
<div class="col-4">
<p>As we did with edit, let's update the detail template so we can easily access the delete action.</p>
</div>
<div class="col-7 col-offset-1">
<h4>view_genre.html</h4>
<pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;a href="{% url "delete_genre" genre.id %}"&gt;Delete genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
</div>
</div> element

element

element
<h2>Do it yourself</h2> element

element
<p>Guess what? Add delete functionality for actors and movies!</p> element

element
<section>
        <h2>Deleting records</h2>
        <p>Last but not least, we want to be able to delete records as well.</p>
        <h4>urls.py</h4>
        <pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/delete/$', 'hollywood.views.delete_genre', name='delete_genre'),
)
        </code></pre>
        <p>This should be starting to look quite repetitive -- that's a good thing.</p>
    </section>
<section>
        <h2>Deleting records</h2>
        <div>
            <div class="col-4">
                <p>Deleting works a little differently. We don't actually need to go to a page to delete an object, we can simply delete the object in the view, and then redirect the user to the index page.</p>
            </div>
            <div class="col-7 col-offset-1">
                <h4>views.py</h4>
                <pre><code>
def delete_genre(request, genre_id):
    genre = Genre.objects.get(id=genre_id)
    genre.delete()
    return redirect("/genres")
                </code></pre>
            </div>
        </div>
        <div class="fragment">
            <div class="col-4">
                <p>As we did with edit, let's update the detail template so we can easily access the delete action.</p>
            </div>
            <div class="col-7 col-offset-1">
                <h4>view_genre.html</h4>
                <pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;a href="{% url "delete_genre" genre.id %}"&gt;Delete genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <ul>
            <li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
            <li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
        </ul>
    </section>

element
<section>
<h2>Reading a File</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
<li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
<li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
<li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
<li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre>

Hello world!
Hello universe!
                </pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="4">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="6">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Reading a File (Cont.)</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
<li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
<li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
<li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="2">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p>
<ul>
<li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
<li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
<li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
<li>Create new text files for testing out your function!</li>
</ul>
</section> element

element

element
<h2>Reading a File</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
<li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
<li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
<li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
<li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre>

Hello world!
Hello universe!
                </pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="4">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="6">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
</div>
</div> element

element

element
<h2>Reading a File (Cont.)</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
<li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
<li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
<li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="2">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p> element

element
<ul>
<li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
<li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
<li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
<li>Create new text files for testing out your function!</li>
</ul> element

element
<section>
        <h2>Reading a File</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
                <li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
                <li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
                <li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
                <li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre>

Hello world!
Hello universe!
                </pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="4">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="6">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Expand Your Developer Toolkit</h2>
        <ul>
            <li>Pair programming</li>
            <li>Git strategies</li>
            <li>Test-driven development</li>
            <li>HTTP lifecycle</li>
            <li>Computer science topics</li>
            <li>Introduction to dev ops</li>
            <li>Analytics and error reporting</li>
            <li>Project: Work in a group to build a test-driven Django application</li>
        </ul>
    </section>
<section>
        <h2>AngularJS and Building Custom APIs</h2>
        <ul>
            <li>Basics of AngularJS</li>
            <li>Build a Basecamp clone with AngularJS</li>
            <li>Building your own custom API with Django and Tastypie</li>
            <li>Integrating Django with AngularJS</li>
            <li>Final Project: Demonstrate mastery with Django and AngularJS</li>
        </ul>
    </section>
<section>
        <h2>Prepping for Life After Bootcamp</h2>
        <ul>
            <li>Interview Prep</li>
            <li>Presentation Prep</li>
            <li>Development ecosystem</li>
        </ul>
        <p><a href="#/2">Back to top</a></p>
    </section>
<section>
    <h2>More than an education</h2>
    <p>There are a lot of bootcamps out there. At RocketU, you'll be surrounded by the 170+ amazing tech startups at RocketSpace.</p>
    <br>
    <img src="/static/img/rocketspace-name-logo-large-300x116.png" id="rocketSpaceLogo">
</section>

element
<section>
<h2>A network of your own</h2>
<p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p>
</section> element

element
<section>
<h2>RocketSpace staff</h2>
</section> element

element
<section>
<h2>Your instructors</h2>
<h4>Yeti</h4>
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div>
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div>
<div class="footer">
</div>
</section> element

element
<h2>A network of your own</h2> element

element
<p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p> element

element

element
<h2>RocketSpace staff</h2> element

element

element
<h2>Your instructors</h2> element

element
<h4>Yeti</h4> element

element
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div> element

element
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div> element

element
<div class="footer">
</div> element

element

element
<h2>Your classmates</h2> element

element
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul> element

element
<p><a href="#/4">Back to top</a></p> element

element

element
<h2>Prove you can program.</h2> element

element
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p> element

element
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p> element

element
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul> element

element
<section>
        <h2>A network of your own</h2>
        <p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p>
    </section>
<section>
        <h2>Do it yourself</h2>
        <p>Guess what? Add delete functionality for actors and movies!</p>
    </section>
<section>
    <h2>Recap: Basic Django app</h2>
    <p>Congratulations! You made a Django project. It's simple, but captures the functionality that powers most applications you use on the web and in mobile apps.</p>
    <p>You'll start to notice routes just like the ones you created all over the web.</p>
    <h4>urls.py</h4>
    <pre><code>
urlpatterns = patterns('',
    url(r'^genres/$', 'hollywood.views.genres', name='genres'),
    url(r'^genres/new/$', 'hollywood.views.new_genre', name='new_genre'),
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/$', 'hollywood.views.view_genre', name='view_genre'),
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/edit/$', 'hollywood.views.edit_genre', name='edit_genre'),
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/delete/$', 'hollywood.views.delete_genre', name='delete_genre'),
)
    </code></pre>
</section>
<section class="titleSlide" data-background="#168eae">
                    <h1>
    Basic Django App: Edit &amp; Delete
</h1>
                    <a id="yetiLogo" href="http://www.yetihq.com/"><img src="/static/img/yeti-power.png"></a>
                </section>
<section>
        <h2>Reading a File (Cont.)</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
                <li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
                <li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
                <li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="2">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p>
        <ul>
            <li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
            <li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
            <li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
            <li>Create new text files for testing out your function!</li>
        </ul>
    </section>
<section>
        <h2>RocketSpace staff</h2>
    </section>

element
<h2>Your instructors</h2> element

element
<h4>Yeti</h4> element

element
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div> element

element
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div> element

element
<div class="footer">
</div> element

element

element
<h2>Your classmates</h2> element

element
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul> element

element
<p><a href="#/4">Back to top</a></p> element

element

element
<h2>Prove you can program.</h2> element

element
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p> element

element
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p> element

element
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul> element

element
<section>
        <h2>Your classmates</h2>
        <ul>
            <li>A brain</li>
            <li>An athlete</li>
            <li>A basket case</li>
            <li>A princess</li>
            <li>And a criminal</li>
        </ul>
        <p><a href="#/4">Back to top</a></p>
    </section>
<section>
    <h2>Laying out our application</h2>
    <p>Our Django app will have this site map. This basic layout can be found in many applications.</p>
    <img src="/static/img/hollywood_site_map.png">
</section>

element
<section>
<h2>Editing existing records</h2>
<p>Editing an existing object is a bit of a combination of the create view and the detail view -- you need a form to edit and process, but you are also finding an existing record.</p>
<p>Let's start by adding our route.</p>
<pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/edit/$', 'hollywood.views.edit_genre', name='edit_genre'),
)
        </code></pre>
</section> element

element
<section>
<h2>Editing existing records</h2>
<pre><code>
def edit_genre(request, genre_id):
    # Similar to the the detail view, we have to find the existing genre we are editing
    genre = Genre.objects.get(id=genre_id)

    # We still check to see if we are submitting the form
    if request.method == "POST":
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(request.POST, instance=genre)
        if form.is_valid():
            if form.save():
                return redirect("/genres/{}".format(genre_id))

    # Or just viewing the form
    else:
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(instance=genre)
    data = {"genre": genre, "form": form}
    return render(request, "genres/edit_genre.html", data)
        </code></pre>
</section> element

element
<section>
<h2>Editing existing records</h2>
<div>
<div class="col-3">
<p>Our edit template looks almost identical to our create template because it has the form, but when you actually load the page, the form will be prefilled.</p>
</div>
<div class="col-8 col-offset-1">
<h4>edit_genre.html</h4>
<pre><code>
<h1>Edit genre {{ genre.name }}</h1>
<form method="post">
    {% csrf_token %}
    {{ form }}
    <input type="submit" value="Update genre"/>
</form>
                </code></pre>
</div>
</div>
<div class="fragment">
<div class="col-3">
<p>Let's also update our detail view so that it's easy to edit a record we are looking at.</p>
</div>
<div class="col-8 col-offset-1">
<h4>view_genre.html</h4>
<pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it yourself</h2>
<p>Add edit functionality for movies and actors.</p>
</section> element

element

element
<h2>Editing existing records</h2> element

element
<p>Editing an existing object is a bit of a combination of the create view and the detail view -- you need a form to edit and process, but you are also finding an existing record.</p> element

element
<p>Let's start by adding our route.</p> element

element
<pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/edit/$', 'hollywood.views.edit_genre', name='edit_genre'),
)
        </code></pre> element

element

element
<h2>Editing existing records</h2> element

element
<pre><code>
def edit_genre(request, genre_id):
    # Similar to the the detail view, we have to find the existing genre we are editing
    genre = Genre.objects.get(id=genre_id)

    # We still check to see if we are submitting the form
    if request.method == "POST":
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(request.POST, instance=genre)
        if form.is_valid():
            if form.save():
                return redirect("/genres/{}".format(genre_id))

    # Or just viewing the form
    else:
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(instance=genre)
    data = {"genre": genre, "form": form}
    return render(request, "genres/edit_genre.html", data)
        </code></pre> element

element

element
<h2>Editing existing records</h2> element

element
<div>
<div class="col-3">
<p>Our edit template looks almost identical to our create template because it has the form, but when you actually load the page, the form will be prefilled.</p>
</div>
<div class="col-8 col-offset-1">
<h4>edit_genre.html</h4>
<pre><code>
<h1>Edit genre {{ genre.name }}</h1>
<form method="post">
    {% csrf_token %}
    {{ form }}
    <input type="submit" value="Update genre"/>
</form>
                </code></pre>
</div>
</div> element

element
<div class="fragment">
<div class="col-3">
<p>Let's also update our detail view so that it's easy to edit a record we are looking at.</p>
</div>
<div class="col-8 col-offset-1">
<h4>view_genre.html</h4>
<pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
</div>
</div> element

element

element
<h2>Do it yourself</h2> element

element
<p>Add edit functionality for movies and actors.</p> element

element
<section>
        <h2>Editing existing records</h2>
        <p>Editing an existing object is a bit of a combination of the create view and the detail view -- you need a form to edit and process, but you are also finding an existing record.</p>
        <p>Let's start by adding our route.</p>
        <pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/edit/$', 'hollywood.views.edit_genre', name='edit_genre'),
)
        </code></pre>
    </section>

element
<section>
<h2>Writing a File</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
<li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
<li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Writing a File (Cont.)</h2>
<div class="col-4">
<br/>
<ul>
<li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Context Manager</h2>
<p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p>
<p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p>
<p>They are used to run certain functions before and after a block of code.</p>
<br/><br/>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
<li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
<li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p>
<p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p>
<div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div>
<p style="clear:both;"><br/>Will become</p>
<div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div>
<p style="clear:both"><br/>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p>
<div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div>
</section> element

element

element
<h2>Writing a File</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
<li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
<li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
</div>
</div> element

element

element
<h2>Writing a File (Cont.)</h2> element

element
<div class="col-4">
<br/>
<ul>
<li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
</div>
</div> element

element

element
<h2>Context Manager</h2> element

element
<p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p> element

element
<p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p> element

element
<p>They are used to run certain functions before and after a block of code.</p> element

element
<br/> element
<br/> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
<li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
<li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p> element

element
<p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p> element

element
<div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div> element

element
<p style="clear:both;"><br/>Will become</p> element

element
<div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div> element

element
<p style="clear:both"><br/>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p> element

element
<div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div> element

element
<section>
        <h2>Writing a File</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
                <li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
                <li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
            </div>
        </div>
    </section>
<section>
    <h2>Prove you can program.</h2>
    <p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
    <p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
    <ul>
        <li><a target="_blank" href="http://codingbat.com/python">Coding Bat</a></li>
        <li><a target="_blank" href="http://www.pythonchallenge.com/">Python Challenge</a></li>
        <li><a target="_blank" href="http://www.coderbyte.com/">Coderbyte</a></li>
    </ul>
</section>
<section>
    <h2>Learn web development. Build awesome things.</h2>
    <p>
        You quit your job, you told your friends and family you're doing something crazy, maybe you moved here. You're ready to learn, intensively, for the next twelve weeks. By the time you're done, you'll be able to build pretty much anything you see on the internet.
    </p>
</section>

element
<section>
<h2>What you'll be learning</h2>
<p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p>
<ul>
<li><a href="#/2/1">Prework</a></li>
<li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
<li><a href="#/2/3">Integrating JavaScript and Design</a></li>
<li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
<li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
<li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
</ul>
</section> element

element
<section>
<h2>Prework</h2>
<p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p>
<ul>
<li>Command Line: Give your computer instructions like a real programmer</li>
<li>HTML: Learn the basic building blocks of the front-facing web</li>
<li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
<li>Git: Version control is a lifesaver</li>
<li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
<li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
<li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
</ul>
</section> element

element
<section>
<h2>Object-oriented Python and Beginner Django</h2>
<ul>
<li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
<li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
<li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
<li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
<li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
<li>Project: Build a Django application with user authentication and database storage</li>
</ul>
</section> element

element
<section>
<h2>Integrating JavaScript and Design</h2>
<ul>
<li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
<li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
<li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
<li>Using third-party APIs: Query external services like Google and Instagram</li>
<li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
<li>Project: Integrate front-end technologies for a more interactive Django application</li>
</ul>
</section> element

element
<section>
<h2>Expand Your Developer Toolkit</h2>
<ul>
<li>Pair programming</li>
<li>Git strategies</li>
<li>Test-driven development</li>
<li>HTTP lifecycle</li>
<li>Computer science topics</li>
<li>Introduction to dev ops</li>
<li>Analytics and error reporting</li>
<li>Project: Work in a group to build a test-driven Django application</li>
</ul>
</section> element

element
<section>
<h2>AngularJS and Building Custom APIs</h2>
<ul>
<li>Basics of AngularJS</li>
<li>Build a Basecamp clone with AngularJS</li>
<li>Building your own custom API with Django and Tastypie</li>
<li>Integrating Django with AngularJS</li>
<li>Final Project: Demonstrate mastery with Django and AngularJS</li>
</ul>
</section> element

element
<section>
<h2>Prepping for Life After Bootcamp</h2>
<ul>
<li>Interview Prep</li>
<li>Presentation Prep</li>
<li>Development ecosystem</li>
</ul>
<p><a href="#/2">Back to top</a></p>
</section> element

element

element
<h2>What you'll be learning</h2> element

element
<p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p> element

element
<ul>
<li><a href="#/2/1">Prework</a></li>
<li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
<li><a href="#/2/3">Integrating JavaScript and Design</a></li>
<li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
<li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
<li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
</ul> element

element

element
<h2>Prework</h2> element

element
<p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p> element

element
<ul>
<li>Command Line: Give your computer instructions like a real programmer</li>
<li>HTML: Learn the basic building blocks of the front-facing web</li>
<li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
<li>Git: Version control is a lifesaver</li>
<li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
<li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
<li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
</ul> element

element

element
<h2>Object-oriented Python and Beginner Django</h2> element

element
<ul>
<li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
<li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
<li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
<li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
<li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
<li>Project: Build a Django application with user authentication and database storage</li>
</ul> element

element

element
<h2>Integrating JavaScript and Design</h2> element

element
<ul>
<li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
<li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
<li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
<li>Using third-party APIs: Query external services like Google and Instagram</li>
<li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
<li>Project: Integrate front-end technologies for a more interactive Django application</li>
</ul> element

element

element
<h2>Expand Your Developer Toolkit</h2> element

element
<ul>
<li>Pair programming</li>
<li>Git strategies</li>
<li>Test-driven development</li>
<li>HTTP lifecycle</li>
<li>Computer science topics</li>
<li>Introduction to dev ops</li>
<li>Analytics and error reporting</li>
<li>Project: Work in a group to build a test-driven Django application</li>
</ul> element

element

element
<h2>AngularJS and Building Custom APIs</h2> element

element
<ul>
<li>Basics of AngularJS</li>
<li>Build a Basecamp clone with AngularJS</li>
<li>Building your own custom API with Django and Tastypie</li>
<li>Integrating Django with AngularJS</li>
<li>Final Project: Demonstrate mastery with Django and AngularJS</li>
</ul> element

element

element
<h2>Prepping for Life After Bootcamp</h2> element

element
<ul>
<li>Interview Prep</li>
<li>Presentation Prep</li>
<li>Development ecosystem</li>
</ul> element

element
<p><a href="#/2">Back to top</a></p> element

element
<section>
        <h2>What you'll be learning</h2>
        <p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p>
        <ul>
            <li><a href="#/2/1">Prework</a></li>
            <li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
            <li><a href="#/2/3">Integrating JavaScript and Design</a></li>
            <li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
            <li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
            <li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
        </ul>
    </section>
<section>
        <h2>Editing existing records</h2>
        <pre><code>
def edit_genre(request, genre_id):
    # Similar to the the detail view, we have to find the existing genre we are editing
    genre = Genre.objects.get(id=genre_id)

    # We still check to see if we are submitting the form
    if request.method == "POST":
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(request.POST, instance=genre)
        if form.is_valid():
            if form.save():
                return redirect("/genres/{}".format(genre_id))

    # Or just viewing the form
    else:
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(instance=genre)
    data = {"genre": genre, "form": form}
    return render(request, "genres/edit_genre.html", data)
        </code></pre>
    </section>
<section>
        <h2>Editing existing records</h2>
        <div>
            <div class="col-3">
                <p>Our edit template looks almost identical to our create template because it has the form, but when you actually load the page, the form will be prefilled.</p>
            </div>
            <div class="col-8 col-offset-1">
                <h4>edit_genre.html</h4>
                <pre><code>
<h1>Edit genre {{ genre.name }}</h1>
<form method="post">
    {% csrf_token %}
    {{ form }}
    <input type="submit" value="Update genre">
</form>
                </code></pre>
            </div>
        </div>
        <div class="fragment">
            <div class="col-3">
                <p>Let's also update our detail view so that it's easy to edit a record we are looking at.</p>
            </div>
            <div class="col-8 col-offset-1">
                <h4>view_genre.html</h4>
                <pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it yourself</h2>
        <p>Add edit functionality for movies and actors.</p>
    </section>
<section>
        <h2>Writing a File (Cont.)</h2>
        <div class="col-4">
            <br>
            <ul>
                <li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br><br><br><br><br></li>
                <li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br><br><br><br><br></li>
                <li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="3">
                <pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Context Manager</h2>
        <p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p>
        <p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p>
        <p>They are used to run certain functions before and after a block of code.</p>
        <br><br>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
                <li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
                <li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p>
        <p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p>
        <div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div>
        <p style="clear:both;"><br>Will become</p>
        <div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div>
        <p style="clear:both"><br>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p>
        <div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div>
    </section>
<section>
        <h2>Prework</h2>
        <p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p>
        <ul>
            <li>Command Line: Give your computer instructions like a real programmer</li>
            <li>HTML: Learn the basic building blocks of the front-facing web</li>
            <li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
            <li>Git: Version control is a lifesaver</li>
            <li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
            <li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
            <li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
        </ul>
    </section>
<section>
        <h2>Object-oriented Python and Beginner Django</h2>
        <ul>
            <li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
            <li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
            <li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
            <li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
            <li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
            <li>Project: Build a Django application with user authentication and database storage</li>
        </ul>
    </section>
<section>
        <h2>Integrating JavaScript and Design</h2>
        <ul>
            <li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
            <li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
            <li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
            <li>Using third-party APIs: Query external services like Google and Instagram</li>
            <li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
            <li>Project: Integrate front-end technologies for a more interactive Django application</li>
        </ul>
    </section>
<section>
        <h2>Expand Your Developer Toolkit</h2>
        <ul>
            <li>Pair programming</li>
            <li>Git strategies</li>
            <li>Test-driven development</li>
            <li>HTTP lifecycle</li>
            <li>Computer science topics</li>
            <li>Introduction to dev ops</li>
            <li>Analytics and error reporting</li>
            <li>Project: Work in a group to build a test-driven Django application</li>
        </ul>
    </section>
<section>
        <h2>AngularJS and Building Custom APIs</h2>
        <ul>
            <li>Basics of AngularJS</li>
            <li>Build a Basecamp clone with AngularJS</li>
            <li>Building your own custom API with Django and Tastypie</li>
            <li>Integrating Django with AngularJS</li>
            <li>Final Project: Demonstrate mastery with Django and AngularJS</li>
        </ul>
    </section>
<section>
        <h2>Prepping for Life After Bootcamp</h2>
        <ul>
            <li>Interview Prep</li>
            <li>Presentation Prep</li>
            <li>Development ecosystem</li>
        </ul>
        <p><a href="#/2">Back to top</a></p>
    </section>
<section>
    <h2>More than an education</h2>
    <p>There are a lot of bootcamps out there. At RocketU, you'll be surrounded by the 170+ amazing tech startups at RocketSpace.</p>
    <br>
    <img src="/static/img/rocketspace-name-logo-large-300x116.png" id="rocketSpaceLogo">
</section>

element
<section>
<h2>Deleting records</h2>
<p>Last but not least, we want to be able to delete records as well.</p>
<h4>urls.py</h4>
<pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/delete/$', 'hollywood.views.delete_genre', name='delete_genre'),
)
        </code></pre>
<p>This should be starting to look quite repetitive -- that's a good thing.</p>
</section> element

element
<section>
<h2>Deleting records</h2>
<div>
<div class="col-4">
<p>Deleting works a little differently. We don't actually need to go to a page to delete an object, we can simply delete the object in the view, and then redirect the user to the index page.</p>
</div>
<div class="col-7 col-offset-1">
<h4>views.py</h4>
<pre><code>
def delete_genre(request, genre_id):
    genre = Genre.objects.get(id=genre_id)
    genre.delete()
    return redirect("/genres")
                </code></pre>
</div>
</div>
<div class="fragment">
<div class="col-4">
<p>As we did with edit, let's update the detail template so we can easily access the delete action.</p>
</div>
<div class="col-7 col-offset-1">
<h4>view_genre.html</h4>
<pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;a href="{% url "delete_genre" genre.id %}"&gt;Delete genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it yourself</h2>
<p>Guess what? Add delete functionality for actors and movies!</p>
</section> element

element

element
<h2>Deleting records</h2> element

element
<p>Last but not least, we want to be able to delete records as well.</p> element

element
<h4>urls.py</h4> element

element
<pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/delete/$', 'hollywood.views.delete_genre', name='delete_genre'),
)
        </code></pre> element

element
<p>This should be starting to look quite repetitive -- that's a good thing.</p> element

element

element
<h2>Deleting records</h2> element

element
<div>
<div class="col-4">
<p>Deleting works a little differently. We don't actually need to go to a page to delete an object, we can simply delete the object in the view, and then redirect the user to the index page.</p>
</div>
<div class="col-7 col-offset-1">
<h4>views.py</h4>
<pre><code>
def delete_genre(request, genre_id):
    genre = Genre.objects.get(id=genre_id)
    genre.delete()
    return redirect("/genres")
                </code></pre>
</div>
</div> element

element
<div class="fragment">
<div class="col-4">
<p>As we did with edit, let's update the detail template so we can easily access the delete action.</p>
</div>
<div class="col-7 col-offset-1">
<h4>view_genre.html</h4>
<pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;a href="{% url "delete_genre" genre.id %}"&gt;Delete genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
</div>
</div> element

element

element
<h2>Do it yourself</h2> element

element
<p>Guess what? Add delete functionality for actors and movies!</p> element

element
<section>
        <h2>Deleting records</h2>
        <p>Last but not least, we want to be able to delete records as well.</p>
        <h4>urls.py</h4>
        <pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/delete/$', 'hollywood.views.delete_genre', name='delete_genre'),
)
        </code></pre>
        <p>This should be starting to look quite repetitive -- that's a good thing.</p>
    </section>
<section class="titleSlide" data-background="#168eae">
                    <h1>
    File Manipulation
</h1>
                    <a id="yetiLogo" href="http://www.yetihq.com/"><img src="/static/img/yeti-power.png"></a>
                </section>
<section>
    <h2>Brief Python History</h2>
    <p>Python is a scripting language, which means at its core it has a bunch of functionality built in for operations like file manipulation.</p>
    <ul>
        <li>Python was created by Guido van Rossum, Benevolant Dictator for Life (BDFL), in the late 1980's.</li>
        <li>Python has released major versions 1, 2, and 3</li>
        <li>Version 3 of python had some backwards incompatible changes with version 2, so they also created 2.6 and 2.7.</li>
        <li>Many people still use python 2.7 over 3, especially because major operating systems have not converted over yet.</li>
        <li>The community is still slowly making the transition from python 2 to 3 even though 3 was released in December 2008.</li>
        <li>2.7 will be the last release in the version 2 line, it was released in July 2010.</li>
    </ul>
</section>

element
<section>
<h2>Directories and Files</h2>
<p>Python has a library called <code>os</code> which contains scripting utility functions.</p>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br/><br/></li>
<li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br/><br/></li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">import os

print os.getcwd()</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="7">
<pre><code class="python">
print os.getcwd()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<ul>
<li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
<li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
</ul>
</section> element

element

element
<h2>Directories and Files</h2> element

element
<p>Python has a library called <code>os</code> which contains scripting utility functions.</p> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br/><br/></li>
<li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br/><br/></li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">import os

print os.getcwd()</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="7">
<pre><code class="python">
print os.getcwd()
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<ul>
<li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
<li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
</ul> element

element
<section>
        <h2>Directories and Files</h2>
        <p>Python has a library called <code>os</code> which contains scripting utility functions.</p>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br><br><br></li>
                <li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br><br><br></li>
                <li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br><br></li>
                <li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br><br></li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">import os

print os.getcwd()</code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="3">
                <pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="7">
                <pre><code class="python">
print os.getcwd()
                </code></pre>
            </div>
        </div>
    </section>

element
<section>
<h2>A network of your own</h2>
<p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p>
</section> element

element
<section>
<h2>RocketSpace staff</h2>
</section> element

element
<section>
<h2>Your instructors</h2>
<h4>Yeti</h4>
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div>
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div>
<div class="footer">
</div>
</section> element

element
<h2>A network of your own</h2> element

element
<p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p> element

element

element
<h2>RocketSpace staff</h2> element

element

element
<h2>Your instructors</h2> element

element
<h4>Yeti</h4> element

element
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div> element

element
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div> element

element
<div class="footer">
</div> element

element

element
<h2>Your classmates</h2> element

element
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul> element

element
<p><a href="#/4">Back to top</a></p> element

element

element
<h2>Prove you can program.</h2> element

element
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p> element

element
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p> element

element
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul> element

element
<section>
        <h2>A network of your own</h2>
        <p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p>
    </section>
<section>
        <h2>Deleting records</h2>
        <div>
            <div class="col-4">
                <p>Deleting works a little differently. We don't actually need to go to a page to delete an object, we can simply delete the object in the view, and then redirect the user to the index page.</p>
            </div>
            <div class="col-7 col-offset-1">
                <h4>views.py</h4>
                <pre><code>
def delete_genre(request, genre_id):
    genre = Genre.objects.get(id=genre_id)
    genre.delete()
    return redirect("/genres")
                </code></pre>
            </div>
        </div>
        <div class="fragment">
            <div class="col-4">
                <p>As we did with edit, let's update the detail template so we can easily access the delete action.</p>
            </div>
            <div class="col-7 col-offset-1">
                <h4>view_genre.html</h4>
                <pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;a href="{% url "delete_genre" genre.id %}"&gt;Delete genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it yourself</h2>
        <p>Guess what? Add delete functionality for actors and movies!</p>
    </section>
<section>
    <h2>Recap: Basic Django app</h2>
    <p>Congratulations! You made a Django project. It's simple, but captures the functionality that powers most applications you use on the web and in mobile apps.</p>
    <p>You'll start to notice routes just like the ones you created all over the web.</p>
    <h4>urls.py</h4>
    <pre><code>
urlpatterns = patterns('',
    url(r'^genres/$', 'hollywood.views.genres', name='genres'),
    url(r'^genres/new/$', 'hollywood.views.new_genre', name='new_genre'),
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/$', 'hollywood.views.view_genre', name='view_genre'),
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/edit/$', 'hollywood.views.edit_genre', name='edit_genre'),
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/delete/$', 'hollywood.views.delete_genre', name='delete_genre'),
)
    </code></pre>
</section>
<section class="titleSlide" data-background="#168eae">
                    <h1>
    Basic Django App: Edit &amp; Delete
</h1>
                    <a id="yetiLogo" href="http://www.yetihq.com/"><img src="/static/img/yeti-power.png"></a>
                </section>
<section>
    <h2>Laying out our application</h2>
    <p>Our Django app will have this site map. This basic layout can be found in many applications.</p>
    <img src="/static/img/hollywood_site_map.png">
</section>
<section>
        <h2>Do it Yourself</h2>
        <ul>
            <li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
            <li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
        </ul>
    </section>

element
<section>
<h2>Reading a File</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
<li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
<li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
<li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
<li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre>

Hello world!
Hello universe!
                </pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="4">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="6">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Reading a File (Cont.)</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
<li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
<li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
<li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="2">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p>
<ul>
<li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
<li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
<li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
<li>Create new text files for testing out your function!</li>
</ul>
</section> element

element

element
<h2>Reading a File</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
<li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
<li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
<li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
<li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre>

Hello world!
Hello universe!
                </pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="4">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="6">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
</div>
</div> element

element

element
<h2>Reading a File (Cont.)</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
<li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
<li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
<li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="2">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p> element

element
<ul>
<li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
<li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
<li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
<li>Create new text files for testing out your function!</li>
</ul> element

element
<section>
        <h2>Reading a File</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
                <li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
                <li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
                <li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
                <li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre>

Hello world!
Hello universe!
                </pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="4">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="6">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>RocketSpace staff</h2>
    </section>

element
<h2>Your instructors</h2> element

element
<h4>Yeti</h4> element

element
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div> element

element
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div> element

element
<div class="footer">
</div> element

element

element
<h2>Your classmates</h2> element

element
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul> element

element
<p><a href="#/4">Back to top</a></p> element

element

element
<h2>Prove you can program.</h2> element

element
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p> element

element
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p> element

element
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul> element

element
<section>
        <h2>Your classmates</h2>
        <ul>
            <li>A brain</li>
            <li>An athlete</li>
            <li>A basket case</li>
            <li>A princess</li>
            <li>And a criminal</li>
        </ul>
        <p><a href="#/4">Back to top</a></p>
    </section>
<section>
    <h2>Prove you can program.</h2>
    <p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
    <p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
    <ul>
        <li><a target="_blank" href="http://codingbat.com/python">Coding Bat</a></li>
        <li><a target="_blank" href="http://www.pythonchallenge.com/">Python Challenge</a></li>
        <li><a target="_blank" href="http://www.coderbyte.com/">Coderbyte</a></li>
    </ul>
</section>

element
<section>
<h2>Editing existing records</h2>
<p>Editing an existing object is a bit of a combination of the create view and the detail view -- you need a form to edit and process, but you are also finding an existing record.</p>
<p>Let's start by adding our route.</p>
<pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/edit/$', 'hollywood.views.edit_genre', name='edit_genre'),
)
        </code></pre>
</section> element

element
<section>
<h2>Editing existing records</h2>
<pre><code>
def edit_genre(request, genre_id):
    # Similar to the the detail view, we have to find the existing genre we are editing
    genre = Genre.objects.get(id=genre_id)

    # We still check to see if we are submitting the form
    if request.method == "POST":
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(request.POST, instance=genre)
        if form.is_valid():
            if form.save():
                return redirect("/genres/{}".format(genre_id))

    # Or just viewing the form
    else:
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(instance=genre)
    data = {"genre": genre, "form": form}
    return render(request, "genres/edit_genre.html", data)
        </code></pre>
</section> element

element
<section>
<h2>Editing existing records</h2>
<div>
<div class="col-3">
<p>Our edit template looks almost identical to our create template because it has the form, but when you actually load the page, the form will be prefilled.</p>
</div>
<div class="col-8 col-offset-1">
<h4>edit_genre.html</h4>
<pre><code>
<h1>Edit genre {{ genre.name }}</h1>
<form method="post">
    {% csrf_token %}
    {{ form }}
    <input type="submit" value="Update genre"/>
</form>
                </code></pre>
</div>
</div>
<div class="fragment">
<div class="col-3">
<p>Let's also update our detail view so that it's easy to edit a record we are looking at.</p>
</div>
<div class="col-8 col-offset-1">
<h4>view_genre.html</h4>
<pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it yourself</h2>
<p>Add edit functionality for movies and actors.</p>
</section> element

element

element
<h2>Editing existing records</h2> element

element
<p>Editing an existing object is a bit of a combination of the create view and the detail view -- you need a form to edit and process, but you are also finding an existing record.</p> element

element
<p>Let's start by adding our route.</p> element

element
<pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/edit/$', 'hollywood.views.edit_genre', name='edit_genre'),
)
        </code></pre> element

element

element
<h2>Editing existing records</h2> element

element
<pre><code>
def edit_genre(request, genre_id):
    # Similar to the the detail view, we have to find the existing genre we are editing
    genre = Genre.objects.get(id=genre_id)

    # We still check to see if we are submitting the form
    if request.method == "POST":
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(request.POST, instance=genre)
        if form.is_valid():
            if form.save():
                return redirect("/genres/{}".format(genre_id))

    # Or just viewing the form
    else:
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(instance=genre)
    data = {"genre": genre, "form": form}
    return render(request, "genres/edit_genre.html", data)
        </code></pre> element

element

element
<h2>Editing existing records</h2> element

element
<div>
<div class="col-3">
<p>Our edit template looks almost identical to our create template because it has the form, but when you actually load the page, the form will be prefilled.</p>
</div>
<div class="col-8 col-offset-1">
<h4>edit_genre.html</h4>
<pre><code>
<h1>Edit genre {{ genre.name }}</h1>
<form method="post">
    {% csrf_token %}
    {{ form }}
    <input type="submit" value="Update genre"/>
</form>
                </code></pre>
</div>
</div> element

element
<div class="fragment">
<div class="col-3">
<p>Let's also update our detail view so that it's easy to edit a record we are looking at.</p>
</div>
<div class="col-8 col-offset-1">
<h4>view_genre.html</h4>
<pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
</div>
</div> element

element

element
<h2>Do it yourself</h2> element

element
<p>Add edit functionality for movies and actors.</p> element

element
<section>
        <h2>Editing existing records</h2>
        <p>Editing an existing object is a bit of a combination of the create view and the detail view -- you need a form to edit and process, but you are also finding an existing record.</p>
        <p>Let's start by adding our route.</p>
        <pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/edit/$', 'hollywood.views.edit_genre', name='edit_genre'),
)
        </code></pre>
    </section>
<section>
        <h2>Reading a File (Cont.)</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
                <li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
                <li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
                <li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="2">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p>
        <ul>
            <li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
            <li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
            <li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
            <li>Create new text files for testing out your function!</li>
        </ul>
    </section>

element
<section>
<h2>Writing a File</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
<li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
<li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Writing a File (Cont.)</h2>
<div class="col-4">
<br/>
<ul>
<li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Context Manager</h2>
<p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p>
<p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p>
<p>They are used to run certain functions before and after a block of code.</p>
<br/><br/>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
<li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
<li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p>
<p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p>
<div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div>
<p style="clear:both;"><br/>Will become</p>
<div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div>
<p style="clear:both"><br/>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p>
<div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div>
</section> element

element

element
<h2>Writing a File</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
<li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
<li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
</div>
</div> element

element

element
<h2>Writing a File (Cont.)</h2> element

element
<div class="col-4">
<br/>
<ul>
<li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
</div>
</div> element

element

element
<h2>Context Manager</h2> element

element
<p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p> element

element
<p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p> element

element
<p>They are used to run certain functions before and after a block of code.</p> element

element
<br/> element
<br/> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
<li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
<li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p> element

element
<p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p> element

element
<div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div> element

element
<p style="clear:both;"><br/>Will become</p> element

element
<div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div> element

element
<p style="clear:both"><br/>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p> element

element
<div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div> element

element
<section>
        <h2>Writing a File</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
                <li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
                <li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
            </div>
        </div>
    </section>
<section>
    <h2>Learn web development. Build awesome things.</h2>
    <p>
        You quit your job, you told your friends and family you're doing something crazy, maybe you moved here. You're ready to learn, intensively, for the next twelve weeks. By the time you're done, you'll be able to build pretty much anything you see on the internet.
    </p>
</section>

element
<section>
<h2>What you'll be learning</h2>
<p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p>
<ul>
<li><a href="#/2/1">Prework</a></li>
<li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
<li><a href="#/2/3">Integrating JavaScript and Design</a></li>
<li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
<li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
<li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
</ul>
</section> element

element
<section>
<h2>Prework</h2>
<p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p>
<ul>
<li>Command Line: Give your computer instructions like a real programmer</li>
<li>HTML: Learn the basic building blocks of the front-facing web</li>
<li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
<li>Git: Version control is a lifesaver</li>
<li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
<li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
<li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
</ul>
</section> element

element
<section>
<h2>Object-oriented Python and Beginner Django</h2>
<ul>
<li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
<li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
<li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
<li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
<li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
<li>Project: Build a Django application with user authentication and database storage</li>
</ul>
</section> element

element
<section>
<h2>Integrating JavaScript and Design</h2>
<ul>
<li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
<li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
<li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
<li>Using third-party APIs: Query external services like Google and Instagram</li>
<li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
<li>Project: Integrate front-end technologies for a more interactive Django application</li>
</ul>
</section> element

element
<section>
<h2>Expand Your Developer Toolkit</h2>
<ul>
<li>Pair programming</li>
<li>Git strategies</li>
<li>Test-driven development</li>
<li>HTTP lifecycle</li>
<li>Computer science topics</li>
<li>Introduction to dev ops</li>
<li>Analytics and error reporting</li>
<li>Project: Work in a group to build a test-driven Django application</li>
</ul>
</section> element

element
<section>
<h2>AngularJS and Building Custom APIs</h2>
<ul>
<li>Basics of AngularJS</li>
<li>Build a Basecamp clone with AngularJS</li>
<li>Building your own custom API with Django and Tastypie</li>
<li>Integrating Django with AngularJS</li>
<li>Final Project: Demonstrate mastery with Django and AngularJS</li>
</ul>
</section> element

element
<section>
<h2>Prepping for Life After Bootcamp</h2>
<ul>
<li>Interview Prep</li>
<li>Presentation Prep</li>
<li>Development ecosystem</li>
</ul>
<p><a href="#/2">Back to top</a></p>
</section> element

element

element
<h2>What you'll be learning</h2> element

element
<p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p> element

element
<ul>
<li><a href="#/2/1">Prework</a></li>
<li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
<li><a href="#/2/3">Integrating JavaScript and Design</a></li>
<li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
<li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
<li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
</ul> element

element

element
<h2>Prework</h2> element

element
<p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p> element

element
<ul>
<li>Command Line: Give your computer instructions like a real programmer</li>
<li>HTML: Learn the basic building blocks of the front-facing web</li>
<li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
<li>Git: Version control is a lifesaver</li>
<li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
<li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
<li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
</ul> element

element

element
<h2>Object-oriented Python and Beginner Django</h2> element

element
<ul>
<li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
<li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
<li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
<li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
<li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
<li>Project: Build a Django application with user authentication and database storage</li>
</ul> element

element

element
<h2>Integrating JavaScript and Design</h2> element

element
<ul>
<li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
<li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
<li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
<li>Using third-party APIs: Query external services like Google and Instagram</li>
<li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
<li>Project: Integrate front-end technologies for a more interactive Django application</li>
</ul> element

element

element
<h2>Expand Your Developer Toolkit</h2> element

element
<ul>
<li>Pair programming</li>
<li>Git strategies</li>
<li>Test-driven development</li>
<li>HTTP lifecycle</li>
<li>Computer science topics</li>
<li>Introduction to dev ops</li>
<li>Analytics and error reporting</li>
<li>Project: Work in a group to build a test-driven Django application</li>
</ul> element

element

element
<h2>AngularJS and Building Custom APIs</h2> element

element
<ul>
<li>Basics of AngularJS</li>
<li>Build a Basecamp clone with AngularJS</li>
<li>Building your own custom API with Django and Tastypie</li>
<li>Integrating Django with AngularJS</li>
<li>Final Project: Demonstrate mastery with Django and AngularJS</li>
</ul> element

element

element
<h2>Prepping for Life After Bootcamp</h2> element

element
<ul>
<li>Interview Prep</li>
<li>Presentation Prep</li>
<li>Development ecosystem</li>
</ul> element

element
<p><a href="#/2">Back to top</a></p> element

element
<section>
        <h2>What you'll be learning</h2>
        <p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p>
        <ul>
            <li><a href="#/2/1">Prework</a></li>
            <li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
            <li><a href="#/2/3">Integrating JavaScript and Design</a></li>
            <li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
            <li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
            <li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
        </ul>
    </section>
<section>
        <h2>Editing existing records</h2>
        <pre><code>
def edit_genre(request, genre_id):
    # Similar to the the detail view, we have to find the existing genre we are editing
    genre = Genre.objects.get(id=genre_id)

    # We still check to see if we are submitting the form
    if request.method == "POST":
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(request.POST, instance=genre)
        if form.is_valid():
            if form.save():
                return redirect("/genres/{}".format(genre_id))

    # Or just viewing the form
    else:
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(instance=genre)
    data = {"genre": genre, "form": form}
    return render(request, "genres/edit_genre.html", data)
        </code></pre>
    </section>
<section>
        <h2>Editing existing records</h2>
        <div>
            <div class="col-3">
                <p>Our edit template looks almost identical to our create template because it has the form, but when you actually load the page, the form will be prefilled.</p>
            </div>
            <div class="col-8 col-offset-1">
                <h4>edit_genre.html</h4>
                <pre><code>
<h1>Edit genre {{ genre.name }}</h1>
<form method="post">
    {% csrf_token %}
    {{ form }}
    <input type="submit" value="Update genre">
</form>
                </code></pre>
            </div>
        </div>
        <div class="fragment">
            <div class="col-3">
                <p>Let's also update our detail view so that it's easy to edit a record we are looking at.</p>
            </div>
            <div class="col-8 col-offset-1">
                <h4>view_genre.html</h4>
                <pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it yourself</h2>
        <p>Add edit functionality for movies and actors.</p>
    </section>

element
<section>
<h2>Deleting records</h2>
<p>Last but not least, we want to be able to delete records as well.</p>
<h4>urls.py</h4>
<pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/delete/$', 'hollywood.views.delete_genre', name='delete_genre'),
)
        </code></pre>
<p>This should be starting to look quite repetitive -- that's a good thing.</p>
</section> element

element
<section>
<h2>Deleting records</h2>
<div>
<div class="col-4">
<p>Deleting works a little differently. We don't actually need to go to a page to delete an object, we can simply delete the object in the view, and then redirect the user to the index page.</p>
</div>
<div class="col-7 col-offset-1">
<h4>views.py</h4>
<pre><code>
def delete_genre(request, genre_id):
    genre = Genre.objects.get(id=genre_id)
    genre.delete()
    return redirect("/genres")
                </code></pre>
</div>
</div>
<div class="fragment">
<div class="col-4">
<p>As we did with edit, let's update the detail template so we can easily access the delete action.</p>
</div>
<div class="col-7 col-offset-1">
<h4>view_genre.html</h4>
<pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;a href="{% url "delete_genre" genre.id %}"&gt;Delete genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it yourself</h2>
<p>Guess what? Add delete functionality for actors and movies!</p>
</section> element

element

element
<h2>Deleting records</h2> element

element
<p>Last but not least, we want to be able to delete records as well.</p> element

element
<h4>urls.py</h4> element

element
<pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/delete/$', 'hollywood.views.delete_genre', name='delete_genre'),
)
        </code></pre> element

element
<p>This should be starting to look quite repetitive -- that's a good thing.</p> element

element

element
<h2>Deleting records</h2> element

element
<div>
<div class="col-4">
<p>Deleting works a little differently. We don't actually need to go to a page to delete an object, we can simply delete the object in the view, and then redirect the user to the index page.</p>
</div>
<div class="col-7 col-offset-1">
<h4>views.py</h4>
<pre><code>
def delete_genre(request, genre_id):
    genre = Genre.objects.get(id=genre_id)
    genre.delete()
    return redirect("/genres")
                </code></pre>
</div>
</div> element

element
<div class="fragment">
<div class="col-4">
<p>As we did with edit, let's update the detail template so we can easily access the delete action.</p>
</div>
<div class="col-7 col-offset-1">
<h4>view_genre.html</h4>
<pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;a href="{% url "delete_genre" genre.id %}"&gt;Delete genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
</div>
</div> element

element

element
<h2>Do it yourself</h2> element

element
<p>Guess what? Add delete functionality for actors and movies!</p> element

element
<section>
        <h2>Deleting records</h2>
        <p>Last but not least, we want to be able to delete records as well.</p>
        <h4>urls.py</h4>
        <pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/delete/$', 'hollywood.views.delete_genre', name='delete_genre'),
)
        </code></pre>
        <p>This should be starting to look quite repetitive -- that's a good thing.</p>
    </section>
<section>
        <h2>Writing a File (Cont.)</h2>
        <div class="col-4">
            <br>
            <ul>
                <li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br><br><br><br><br></li>
                <li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br><br><br><br><br></li>
                <li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="3">
                <pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Context Manager</h2>
        <p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p>
        <p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p>
        <p>They are used to run certain functions before and after a block of code.</p>
        <br><br>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
                <li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
                <li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p>
        <p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p>
        <div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div>
        <p style="clear:both;"><br>Will become</p>
        <div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div>
        <p style="clear:both"><br>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p>
        <div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div>
    </section>
<section class="titleSlide" data-background="#168eae">
                    <h1>
    File Manipulation
</h1>
                    <a id="yetiLogo" href="http://www.yetihq.com/"><img src="/static/img/yeti-power.png"></a>
                </section>
<section>
        <h2>Prework</h2>
        <p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p>
        <ul>
            <li>Command Line: Give your computer instructions like a real programmer</li>
            <li>HTML: Learn the basic building blocks of the front-facing web</li>
            <li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
            <li>Git: Version control is a lifesaver</li>
            <li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
            <li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
            <li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
        </ul>
    </section>
<section>
        <h2>Object-oriented Python and Beginner Django</h2>
        <ul>
            <li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
            <li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
            <li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
            <li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
            <li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
            <li>Project: Build a Django application with user authentication and database storage</li>
        </ul>
    </section>
<section>
        <h2>Integrating JavaScript and Design</h2>
        <ul>
            <li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
            <li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
            <li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
            <li>Using third-party APIs: Query external services like Google and Instagram</li>
            <li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
            <li>Project: Integrate front-end technologies for a more interactive Django application</li>
        </ul>
    </section>
<section>
        <h2>Deleting records</h2>
        <div>
            <div class="col-4">
                <p>Deleting works a little differently. We don't actually need to go to a page to delete an object, we can simply delete the object in the view, and then redirect the user to the index page.</p>
            </div>
            <div class="col-7 col-offset-1">
                <h4>views.py</h4>
                <pre><code>
def delete_genre(request, genre_id):
    genre = Genre.objects.get(id=genre_id)
    genre.delete()
    return redirect("/genres")
                </code></pre>
            </div>
        </div>
        <div class="fragment">
            <div class="col-4">
                <p>As we did with edit, let's update the detail template so we can easily access the delete action.</p>
            </div>
            <div class="col-7 col-offset-1">
                <h4>view_genre.html</h4>
                <pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;a href="{% url "delete_genre" genre.id %}"&gt;Delete genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it yourself</h2>
        <p>Guess what? Add delete functionality for actors and movies!</p>
    </section>
<section>
    <h2>Recap: Basic Django app</h2>
    <p>Congratulations! You made a Django project. It's simple, but captures the functionality that powers most applications you use on the web and in mobile apps.</p>
    <p>You'll start to notice routes just like the ones you created all over the web.</p>
    <h4>urls.py</h4>
    <pre><code>
urlpatterns = patterns('',
    url(r'^genres/$', 'hollywood.views.genres', name='genres'),
    url(r'^genres/new/$', 'hollywood.views.new_genre', name='new_genre'),
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/$', 'hollywood.views.view_genre', name='view_genre'),
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/edit/$', 'hollywood.views.edit_genre', name='edit_genre'),
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/delete/$', 'hollywood.views.delete_genre', name='delete_genre'),
)
    </code></pre>
</section>
<section class="titleSlide" data-background="#168eae">
                    <h1>
    Basic Django App: Edit &amp; Delete
</h1>
                    <a id="yetiLogo" href="http://www.yetihq.com/"><img src="/static/img/yeti-power.png"></a>
                </section>
<section>
    <h2>Brief Python History</h2>
    <p>Python is a scripting language, which means at its core it has a bunch of functionality built in for operations like file manipulation.</p>
    <ul>
        <li>Python was created by Guido van Rossum, Benevolant Dictator for Life (BDFL), in the late 1980's.</li>
        <li>Python has released major versions 1, 2, and 3</li>
        <li>Version 3 of python had some backwards incompatible changes with version 2, so they also created 2.6 and 2.7.</li>
        <li>Many people still use python 2.7 over 3, especially because major operating systems have not converted over yet.</li>
        <li>The community is still slowly making the transition from python 2 to 3 even though 3 was released in December 2008.</li>
        <li>2.7 will be the last release in the version 2 line, it was released in July 2010.</li>
    </ul>
</section>

element
<section>
<h2>Directories and Files</h2>
<p>Python has a library called <code>os</code> which contains scripting utility functions.</p>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br/><br/></li>
<li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br/><br/></li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">import os

print os.getcwd()</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="7">
<pre><code class="python">
print os.getcwd()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<ul>
<li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
<li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
</ul>
</section> element

element

element
<h2>Directories and Files</h2> element

element
<p>Python has a library called <code>os</code> which contains scripting utility functions.</p> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br/><br/></li>
<li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br/><br/></li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">import os

print os.getcwd()</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="7">
<pre><code class="python">
print os.getcwd()
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<ul>
<li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
<li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
</ul> element

element
<section>
        <h2>Directories and Files</h2>
        <p>Python has a library called <code>os</code> which contains scripting utility functions.</p>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br><br><br></li>
                <li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br><br><br></li>
                <li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br><br></li>
                <li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br><br></li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">import os

print os.getcwd()</code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="3">
                <pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="7">
                <pre><code class="python">
print os.getcwd()
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Expand Your Developer Toolkit</h2>
        <ul>
            <li>Pair programming</li>
            <li>Git strategies</li>
            <li>Test-driven development</li>
            <li>HTTP lifecycle</li>
            <li>Computer science topics</li>
            <li>Introduction to dev ops</li>
            <li>Analytics and error reporting</li>
            <li>Project: Work in a group to build a test-driven Django application</li>
        </ul>
    </section>
<section>
        <h2>AngularJS and Building Custom APIs</h2>
        <ul>
            <li>Basics of AngularJS</li>
            <li>Build a Basecamp clone with AngularJS</li>
            <li>Building your own custom API with Django and Tastypie</li>
            <li>Integrating Django with AngularJS</li>
            <li>Final Project: Demonstrate mastery with Django and AngularJS</li>
        </ul>
    </section>
<section>
        <h2>Prepping for Life After Bootcamp</h2>
        <ul>
            <li>Interview Prep</li>
            <li>Presentation Prep</li>
            <li>Development ecosystem</li>
        </ul>
        <p><a href="#/2">Back to top</a></p>
    </section>
<section>
    <h2>More than an education</h2>
    <p>There are a lot of bootcamps out there. At RocketU, you'll be surrounded by the 170+ amazing tech startups at RocketSpace.</p>
    <br>
    <img src="/static/img/rocketspace-name-logo-large-300x116.png" id="rocketSpaceLogo">
</section>

element
<section>
<h2>A network of your own</h2>
<p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p>
</section> element

element
<section>
<h2>RocketSpace staff</h2>
</section> element

element
<section>
<h2>Your instructors</h2>
<h4>Yeti</h4>
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div>
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div>
<div class="footer">
</div>
</section> element

element
<h2>A network of your own</h2> element

element
<p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p> element

element

element
<h2>RocketSpace staff</h2> element

element

element
<h2>Your instructors</h2> element

element
<h4>Yeti</h4> element

element
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div> element

element
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div> element

element
<div class="footer">
</div> element

element

element
<h2>Your classmates</h2> element

element
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul> element

element
<p><a href="#/4">Back to top</a></p> element

element

element
<h2>Prove you can program.</h2> element

element
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p> element

element
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p> element

element
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul> element

element
<section>
        <h2>A network of your own</h2>
        <p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p>
    </section>
<section>
    <h2>Laying out our application</h2>
    <p>Our Django app will have this site map. This basic layout can be found in many applications.</p>
    <img src="/static/img/hollywood_site_map.png">
</section>

element
<section>
<h2>Editing existing records</h2>
<p>Editing an existing object is a bit of a combination of the create view and the detail view -- you need a form to edit and process, but you are also finding an existing record.</p>
<p>Let's start by adding our route.</p>
<pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/edit/$', 'hollywood.views.edit_genre', name='edit_genre'),
)
        </code></pre>
</section> element

element
<section>
<h2>Editing existing records</h2>
<pre><code>
def edit_genre(request, genre_id):
    # Similar to the the detail view, we have to find the existing genre we are editing
    genre = Genre.objects.get(id=genre_id)

    # We still check to see if we are submitting the form
    if request.method == "POST":
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(request.POST, instance=genre)
        if form.is_valid():
            if form.save():
                return redirect("/genres/{}".format(genre_id))

    # Or just viewing the form
    else:
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(instance=genre)
    data = {"genre": genre, "form": form}
    return render(request, "genres/edit_genre.html", data)
        </code></pre>
</section> element

element
<section>
<h2>Editing existing records</h2>
<div>
<div class="col-3">
<p>Our edit template looks almost identical to our create template because it has the form, but when you actually load the page, the form will be prefilled.</p>
</div>
<div class="col-8 col-offset-1">
<h4>edit_genre.html</h4>
<pre><code>
<h1>Edit genre {{ genre.name }}</h1>
<form method="post">
    {% csrf_token %}
    {{ form }}
    <input type="submit" value="Update genre"/>
</form>
                </code></pre>
</div>
</div>
<div class="fragment">
<div class="col-3">
<p>Let's also update our detail view so that it's easy to edit a record we are looking at.</p>
</div>
<div class="col-8 col-offset-1">
<h4>view_genre.html</h4>
<pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it yourself</h2>
<p>Add edit functionality for movies and actors.</p>
</section> element

element

element
<h2>Editing existing records</h2> element

element
<p>Editing an existing object is a bit of a combination of the create view and the detail view -- you need a form to edit and process, but you are also finding an existing record.</p> element

element
<p>Let's start by adding our route.</p> element

element
<pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/edit/$', 'hollywood.views.edit_genre', name='edit_genre'),
)
        </code></pre> element

element

element
<h2>Editing existing records</h2> element

element
<pre><code>
def edit_genre(request, genre_id):
    # Similar to the the detail view, we have to find the existing genre we are editing
    genre = Genre.objects.get(id=genre_id)

    # We still check to see if we are submitting the form
    if request.method == "POST":
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(request.POST, instance=genre)
        if form.is_valid():
            if form.save():
                return redirect("/genres/{}".format(genre_id))

    # Or just viewing the form
    else:
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(instance=genre)
    data = {"genre": genre, "form": form}
    return render(request, "genres/edit_genre.html", data)
        </code></pre> element

element

element
<h2>Editing existing records</h2> element

element
<div>
<div class="col-3">
<p>Our edit template looks almost identical to our create template because it has the form, but when you actually load the page, the form will be prefilled.</p>
</div>
<div class="col-8 col-offset-1">
<h4>edit_genre.html</h4>
<pre><code>
<h1>Edit genre {{ genre.name }}</h1>
<form method="post">
    {% csrf_token %}
    {{ form }}
    <input type="submit" value="Update genre"/>
</form>
                </code></pre>
</div>
</div> element

element
<div class="fragment">
<div class="col-3">
<p>Let's also update our detail view so that it's easy to edit a record we are looking at.</p>
</div>
<div class="col-8 col-offset-1">
<h4>view_genre.html</h4>
<pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
</div>
</div> element

element

element
<h2>Do it yourself</h2> element

element
<p>Add edit functionality for movies and actors.</p> element

element
<section>
        <h2>Editing existing records</h2>
        <p>Editing an existing object is a bit of a combination of the create view and the detail view -- you need a form to edit and process, but you are also finding an existing record.</p>
        <p>Let's start by adding our route.</p>
        <pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/edit/$', 'hollywood.views.edit_genre', name='edit_genre'),
)
        </code></pre>
    </section>
<section>
        <h2>Editing existing records</h2>
        <pre><code>
def edit_genre(request, genre_id):
    # Similar to the the detail view, we have to find the existing genre we are editing
    genre = Genre.objects.get(id=genre_id)

    # We still check to see if we are submitting the form
    if request.method == "POST":
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(request.POST, instance=genre)
        if form.is_valid():
            if form.save():
                return redirect("/genres/{}".format(genre_id))

    # Or just viewing the form
    else:
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(instance=genre)
    data = {"genre": genre, "form": form}
    return render(request, "genres/edit_genre.html", data)
        </code></pre>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <ul>
            <li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
            <li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
        </ul>
    </section>

element
<section>
<h2>Reading a File</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
<li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
<li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
<li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
<li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre>

Hello world!
Hello universe!
                </pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="4">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="6">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Reading a File (Cont.)</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
<li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
<li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
<li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="2">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p>
<ul>
<li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
<li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
<li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
<li>Create new text files for testing out your function!</li>
</ul>
</section> element

element

element
<h2>Reading a File</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
<li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
<li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
<li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
<li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre>

Hello world!
Hello universe!
                </pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="4">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="6">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
</div>
</div> element

element

element
<h2>Reading a File (Cont.)</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
<li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
<li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
<li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="2">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p> element

element
<ul>
<li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
<li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
<li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
<li>Create new text files for testing out your function!</li>
</ul> element

element
<section>
        <h2>Reading a File</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
                <li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
                <li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
                <li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
                <li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre>

Hello world!
Hello universe!
                </pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="4">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="6">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>RocketSpace staff</h2>
    </section>

element
<h2>Your instructors</h2> element

element
<h4>Yeti</h4> element

element
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div> element

element
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div> element

element
<div class="footer">
</div> element

element

element
<h2>Your classmates</h2> element

element
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul> element

element
<p><a href="#/4">Back to top</a></p> element

element

element
<h2>Prove you can program.</h2> element

element
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p> element

element
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p> element

element
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul> element

element
<section>
        <h2>Your classmates</h2>
        <ul>
            <li>A brain</li>
            <li>An athlete</li>
            <li>A basket case</li>
            <li>A princess</li>
            <li>And a criminal</li>
        </ul>
        <p><a href="#/4">Back to top</a></p>
    </section>
<section>
        <h2>Editing existing records</h2>
        <div>
            <div class="col-3">
                <p>Our edit template looks almost identical to our create template because it has the form, but when you actually load the page, the form will be prefilled.</p>
            </div>
            <div class="col-8 col-offset-1">
                <h4>edit_genre.html</h4>
                <pre><code>
<h1>Edit genre {{ genre.name }}</h1>
<form method="post">
    {% csrf_token %}
    {{ form }}
    <input type="submit" value="Update genre">
</form>
                </code></pre>
            </div>
        </div>
        <div class="fragment">
            <div class="col-3">
                <p>Let's also update our detail view so that it's easy to edit a record we are looking at.</p>
            </div>
            <div class="col-8 col-offset-1">
                <h4>view_genre.html</h4>
                <pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it yourself</h2>
        <p>Add edit functionality for movies and actors.</p>
    </section>

element
<section>
<h2>Deleting records</h2>
<p>Last but not least, we want to be able to delete records as well.</p>
<h4>urls.py</h4>
<pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/delete/$', 'hollywood.views.delete_genre', name='delete_genre'),
)
        </code></pre>
<p>This should be starting to look quite repetitive -- that's a good thing.</p>
</section> element

element
<section>
<h2>Deleting records</h2>
<div>
<div class="col-4">
<p>Deleting works a little differently. We don't actually need to go to a page to delete an object, we can simply delete the object in the view, and then redirect the user to the index page.</p>
</div>
<div class="col-7 col-offset-1">
<h4>views.py</h4>
<pre><code>
def delete_genre(request, genre_id):
    genre = Genre.objects.get(id=genre_id)
    genre.delete()
    return redirect("/genres")
                </code></pre>
</div>
</div>
<div class="fragment">
<div class="col-4">
<p>As we did with edit, let's update the detail template so we can easily access the delete action.</p>
</div>
<div class="col-7 col-offset-1">
<h4>view_genre.html</h4>
<pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;a href="{% url "delete_genre" genre.id %}"&gt;Delete genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it yourself</h2>
<p>Guess what? Add delete functionality for actors and movies!</p>
</section> element

element

element
<h2>Deleting records</h2> element

element
<p>Last but not least, we want to be able to delete records as well.</p> element

element
<h4>urls.py</h4> element

element
<pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/delete/$', 'hollywood.views.delete_genre', name='delete_genre'),
)
        </code></pre> element

element
<p>This should be starting to look quite repetitive -- that's a good thing.</p> element

element

element
<h2>Deleting records</h2> element

element
<div>
<div class="col-4">
<p>Deleting works a little differently. We don't actually need to go to a page to delete an object, we can simply delete the object in the view, and then redirect the user to the index page.</p>
</div>
<div class="col-7 col-offset-1">
<h4>views.py</h4>
<pre><code>
def delete_genre(request, genre_id):
    genre = Genre.objects.get(id=genre_id)
    genre.delete()
    return redirect("/genres")
                </code></pre>
</div>
</div> element

element
<div class="fragment">
<div class="col-4">
<p>As we did with edit, let's update the detail template so we can easily access the delete action.</p>
</div>
<div class="col-7 col-offset-1">
<h4>view_genre.html</h4>
<pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;a href="{% url "delete_genre" genre.id %}"&gt;Delete genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
</div>
</div> element

element

element
<h2>Do it yourself</h2> element

element
<p>Guess what? Add delete functionality for actors and movies!</p> element

element
<section>
        <h2>Deleting records</h2>
        <p>Last but not least, we want to be able to delete records as well.</p>
        <h4>urls.py</h4>
        <pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/delete/$', 'hollywood.views.delete_genre', name='delete_genre'),
)
        </code></pre>
        <p>This should be starting to look quite repetitive -- that's a good thing.</p>
    </section>
<section>
        <h2>Deleting records</h2>
        <div>
            <div class="col-4">
                <p>Deleting works a little differently. We don't actually need to go to a page to delete an object, we can simply delete the object in the view, and then redirect the user to the index page.</p>
            </div>
            <div class="col-7 col-offset-1">
                <h4>views.py</h4>
                <pre><code>
def delete_genre(request, genre_id):
    genre = Genre.objects.get(id=genre_id)
    genre.delete()
    return redirect("/genres")
                </code></pre>
            </div>
        </div>
        <div class="fragment">
            <div class="col-4">
                <p>As we did with edit, let's update the detail template so we can easily access the delete action.</p>
            </div>
            <div class="col-7 col-offset-1">
                <h4>view_genre.html</h4>
                <pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;a href="{% url "delete_genre" genre.id %}"&gt;Delete genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Reading a File (Cont.)</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
                <li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
                <li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
                <li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="2">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p>
        <ul>
            <li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
            <li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
            <li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
            <li>Create new text files for testing out your function!</li>
        </ul>
    </section>

element
<section>
<h2>Writing a File</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
<li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
<li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Writing a File (Cont.)</h2>
<div class="col-4">
<br/>
<ul>
<li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Context Manager</h2>
<p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p>
<p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p>
<p>They are used to run certain functions before and after a block of code.</p>
<br/><br/>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
<li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
<li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p>
<p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p>
<div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div>
<p style="clear:both;"><br/>Will become</p>
<div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div>
<p style="clear:both"><br/>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p>
<div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div>
</section> element

element

element
<h2>Writing a File</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
<li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
<li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
</div>
</div> element

element

element
<h2>Writing a File (Cont.)</h2> element

element
<div class="col-4">
<br/>
<ul>
<li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
</div>
</div> element

element

element
<h2>Context Manager</h2> element

element
<p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p> element

element
<p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p> element

element
<p>They are used to run certain functions before and after a block of code.</p> element

element
<br/> element
<br/> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
<li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
<li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p> element

element
<p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p> element

element
<div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div> element

element
<p style="clear:both;"><br/>Will become</p> element

element
<div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div> element

element
<p style="clear:both"><br/>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p> element

element
<div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div> element

element
<section>
        <h2>Writing a File</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
                <li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
                <li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
            </div>
        </div>
    </section>
<section>
    <h2>Prove you can program.</h2>
    <p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
    <p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
    <ul>
        <li><a target="_blank" href="http://codingbat.com/python">Coding Bat</a></li>
        <li><a target="_blank" href="http://www.pythonchallenge.com/">Python Challenge</a></li>
        <li><a target="_blank" href="http://www.coderbyte.com/">Coderbyte</a></li>
    </ul>
</section>
<section>
    <h2>Learn web development. Build awesome things.</h2>
    <p>
        You quit your job, you told your friends and family you're doing something crazy, maybe you moved here. You're ready to learn, intensively, for the next twelve weeks. By the time you're done, you'll be able to build pretty much anything you see on the internet.
    </p>
</section>

element
<section>
<h2>What you'll be learning</h2>
<p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p>
<ul>
<li><a href="#/2/1">Prework</a></li>
<li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
<li><a href="#/2/3">Integrating JavaScript and Design</a></li>
<li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
<li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
<li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
</ul>
</section> element

element
<section>
<h2>Prework</h2>
<p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p>
<ul>
<li>Command Line: Give your computer instructions like a real programmer</li>
<li>HTML: Learn the basic building blocks of the front-facing web</li>
<li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
<li>Git: Version control is a lifesaver</li>
<li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
<li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
<li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
</ul>
</section> element

element
<section>
<h2>Object-oriented Python and Beginner Django</h2>
<ul>
<li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
<li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
<li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
<li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
<li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
<li>Project: Build a Django application with user authentication and database storage</li>
</ul>
</section> element

element
<section>
<h2>Integrating JavaScript and Design</h2>
<ul>
<li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
<li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
<li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
<li>Using third-party APIs: Query external services like Google and Instagram</li>
<li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
<li>Project: Integrate front-end technologies for a more interactive Django application</li>
</ul>
</section> element

element
<section>
<h2>Expand Your Developer Toolkit</h2>
<ul>
<li>Pair programming</li>
<li>Git strategies</li>
<li>Test-driven development</li>
<li>HTTP lifecycle</li>
<li>Computer science topics</li>
<li>Introduction to dev ops</li>
<li>Analytics and error reporting</li>
<li>Project: Work in a group to build a test-driven Django application</li>
</ul>
</section> element

element
<section>
<h2>AngularJS and Building Custom APIs</h2>
<ul>
<li>Basics of AngularJS</li>
<li>Build a Basecamp clone with AngularJS</li>
<li>Building your own custom API with Django and Tastypie</li>
<li>Integrating Django with AngularJS</li>
<li>Final Project: Demonstrate mastery with Django and AngularJS</li>
</ul>
</section> element

element
<section>
<h2>Prepping for Life After Bootcamp</h2>
<ul>
<li>Interview Prep</li>
<li>Presentation Prep</li>
<li>Development ecosystem</li>
</ul>
<p><a href="#/2">Back to top</a></p>
</section> element

element

element
<h2>What you'll be learning</h2> element

element
<p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p> element

element
<ul>
<li><a href="#/2/1">Prework</a></li>
<li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
<li><a href="#/2/3">Integrating JavaScript and Design</a></li>
<li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
<li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
<li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
</ul> element

element

element
<h2>Prework</h2> element

element
<p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p> element

element
<ul>
<li>Command Line: Give your computer instructions like a real programmer</li>
<li>HTML: Learn the basic building blocks of the front-facing web</li>
<li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
<li>Git: Version control is a lifesaver</li>
<li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
<li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
<li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
</ul> element

element

element
<h2>Object-oriented Python and Beginner Django</h2> element

element
<ul>
<li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
<li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
<li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
<li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
<li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
<li>Project: Build a Django application with user authentication and database storage</li>
</ul> element

element

element
<h2>Integrating JavaScript and Design</h2> element

element
<ul>
<li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
<li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
<li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
<li>Using third-party APIs: Query external services like Google and Instagram</li>
<li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
<li>Project: Integrate front-end technologies for a more interactive Django application</li>
</ul> element

element

element
<h2>Expand Your Developer Toolkit</h2> element

element
<ul>
<li>Pair programming</li>
<li>Git strategies</li>
<li>Test-driven development</li>
<li>HTTP lifecycle</li>
<li>Computer science topics</li>
<li>Introduction to dev ops</li>
<li>Analytics and error reporting</li>
<li>Project: Work in a group to build a test-driven Django application</li>
</ul> element

element

element
<h2>AngularJS and Building Custom APIs</h2> element

element
<ul>
<li>Basics of AngularJS</li>
<li>Build a Basecamp clone with AngularJS</li>
<li>Building your own custom API with Django and Tastypie</li>
<li>Integrating Django with AngularJS</li>
<li>Final Project: Demonstrate mastery with Django and AngularJS</li>
</ul> element

element

element
<h2>Prepping for Life After Bootcamp</h2> element

element
<ul>
<li>Interview Prep</li>
<li>Presentation Prep</li>
<li>Development ecosystem</li>
</ul> element

element
<p><a href="#/2">Back to top</a></p> element

element
<section>
        <h2>What you'll be learning</h2>
        <p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p>
        <ul>
            <li><a href="#/2/1">Prework</a></li>
            <li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
            <li><a href="#/2/3">Integrating JavaScript and Design</a></li>
            <li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
            <li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
            <li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
        </ul>
    </section>
<section>
        <h2>Do it yourself</h2>
        <p>Guess what? Add delete functionality for actors and movies!</p>
    </section>
<section>
    <h2>Recap: Basic Django app</h2>
    <p>Congratulations! You made a Django project. It's simple, but captures the functionality that powers most applications you use on the web and in mobile apps.</p>
    <p>You'll start to notice routes just like the ones you created all over the web.</p>
    <h4>urls.py</h4>
    <pre><code>
urlpatterns = patterns('',
    url(r'^genres/$', 'hollywood.views.genres', name='genres'),
    url(r'^genres/new/$', 'hollywood.views.new_genre', name='new_genre'),
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/$', 'hollywood.views.view_genre', name='view_genre'),
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/edit/$', 'hollywood.views.edit_genre', name='edit_genre'),
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/delete/$', 'hollywood.views.delete_genre', name='delete_genre'),
)
    </code></pre>
</section>
<section class="titleSlide" data-background="#168eae">
                    <h1>
    Basic Django App: Edit &amp; Delete
</h1>
                    <a id="yetiLogo" href="http://www.yetihq.com/"><img src="/static/img/yeti-power.png"></a>
                </section>
<section>
    <h2>Laying out our application</h2>
    <p>Our Django app will have this site map. This basic layout can be found in many applications.</p>
    <img src="/static/img/hollywood_site_map.png">
</section>

element
<section>
<h2>Editing existing records</h2>
<p>Editing an existing object is a bit of a combination of the create view and the detail view -- you need a form to edit and process, but you are also finding an existing record.</p>
<p>Let's start by adding our route.</p>
<pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/edit/$', 'hollywood.views.edit_genre', name='edit_genre'),
)
        </code></pre>
</section> element

element
<section>
<h2>Editing existing records</h2>
<pre><code>
def edit_genre(request, genre_id):
    # Similar to the the detail view, we have to find the existing genre we are editing
    genre = Genre.objects.get(id=genre_id)

    # We still check to see if we are submitting the form
    if request.method == "POST":
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(request.POST, instance=genre)
        if form.is_valid():
            if form.save():
                return redirect("/genres/{}".format(genre_id))

    # Or just viewing the form
    else:
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(instance=genre)
    data = {"genre": genre, "form": form}
    return render(request, "genres/edit_genre.html", data)
        </code></pre>
</section> element

element
<section>
<h2>Editing existing records</h2>
<div>
<div class="col-3">
<p>Our edit template looks almost identical to our create template because it has the form, but when you actually load the page, the form will be prefilled.</p>
</div>
<div class="col-8 col-offset-1">
<h4>edit_genre.html</h4>
<pre><code>
<h1>Edit genre {{ genre.name }}</h1>
<form method="post">
    {% csrf_token %}
    {{ form }}
    <input type="submit" value="Update genre"/>
</form>
                </code></pre>
</div>
</div>
<div class="fragment">
<div class="col-3">
<p>Let's also update our detail view so that it's easy to edit a record we are looking at.</p>
</div>
<div class="col-8 col-offset-1">
<h4>view_genre.html</h4>
<pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it yourself</h2>
<p>Add edit functionality for movies and actors.</p>
</section> element

element

element
<h2>Editing existing records</h2> element

element
<p>Editing an existing object is a bit of a combination of the create view and the detail view -- you need a form to edit and process, but you are also finding an existing record.</p> element

element
<p>Let's start by adding our route.</p> element

element
<pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/edit/$', 'hollywood.views.edit_genre', name='edit_genre'),
)
        </code></pre> element

element

element
<h2>Editing existing records</h2> element

element
<pre><code>
def edit_genre(request, genre_id):
    # Similar to the the detail view, we have to find the existing genre we are editing
    genre = Genre.objects.get(id=genre_id)

    # We still check to see if we are submitting the form
    if request.method == "POST":
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(request.POST, instance=genre)
        if form.is_valid():
            if form.save():
                return redirect("/genres/{}".format(genre_id))

    # Or just viewing the form
    else:
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(instance=genre)
    data = {"genre": genre, "form": form}
    return render(request, "genres/edit_genre.html", data)
        </code></pre> element

element

element
<h2>Editing existing records</h2> element

element
<div>
<div class="col-3">
<p>Our edit template looks almost identical to our create template because it has the form, but when you actually load the page, the form will be prefilled.</p>
</div>
<div class="col-8 col-offset-1">
<h4>edit_genre.html</h4>
<pre><code>
<h1>Edit genre {{ genre.name }}</h1>
<form method="post">
    {% csrf_token %}
    {{ form }}
    <input type="submit" value="Update genre"/>
</form>
                </code></pre>
</div>
</div> element

element
<div class="fragment">
<div class="col-3">
<p>Let's also update our detail view so that it's easy to edit a record we are looking at.</p>
</div>
<div class="col-8 col-offset-1">
<h4>view_genre.html</h4>
<pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
</div>
</div> element

element

element
<h2>Do it yourself</h2> element

element
<p>Add edit functionality for movies and actors.</p> element

element
<section>
        <h2>Editing existing records</h2>
        <p>Editing an existing object is a bit of a combination of the create view and the detail view -- you need a form to edit and process, but you are also finding an existing record.</p>
        <p>Let's start by adding our route.</p>
        <pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/edit/$', 'hollywood.views.edit_genre', name='edit_genre'),
)
        </code></pre>
    </section>
<section>
        <h2>Writing a File (Cont.)</h2>
        <div class="col-4">
            <br>
            <ul>
                <li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br><br><br><br><br></li>
                <li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br><br><br><br><br></li>
                <li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="3">
                <pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Context Manager</h2>
        <p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p>
        <p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p>
        <p>They are used to run certain functions before and after a block of code.</p>
        <br><br>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
                <li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
                <li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p>
        <p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p>
        <div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div>
        <p style="clear:both;"><br>Will become</p>
        <div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div>
        <p style="clear:both"><br>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p>
        <div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div>
    </section>
<section>
        <h2>Prework</h2>
        <p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p>
        <ul>
            <li>Command Line: Give your computer instructions like a real programmer</li>
            <li>HTML: Learn the basic building blocks of the front-facing web</li>
            <li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
            <li>Git: Version control is a lifesaver</li>
            <li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
            <li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
            <li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
        </ul>
    </section>
<section>
        <h2>Object-oriented Python and Beginner Django</h2>
        <ul>
            <li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
            <li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
            <li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
            <li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
            <li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
            <li>Project: Build a Django application with user authentication and database storage</li>
        </ul>
    </section>
<section>
        <h2>Integrating JavaScript and Design</h2>
        <ul>
            <li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
            <li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
            <li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
            <li>Using third-party APIs: Query external services like Google and Instagram</li>
            <li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
            <li>Project: Integrate front-end technologies for a more interactive Django application</li>
        </ul>
    </section>
<section>
        <h2>Expand Your Developer Toolkit</h2>
        <ul>
            <li>Pair programming</li>
            <li>Git strategies</li>
            <li>Test-driven development</li>
            <li>HTTP lifecycle</li>
            <li>Computer science topics</li>
            <li>Introduction to dev ops</li>
            <li>Analytics and error reporting</li>
            <li>Project: Work in a group to build a test-driven Django application</li>
        </ul>
    </section>
<section>
        <h2>Editing existing records</h2>
        <pre><code>
def edit_genre(request, genre_id):
    # Similar to the the detail view, we have to find the existing genre we are editing
    genre = Genre.objects.get(id=genre_id)

    # We still check to see if we are submitting the form
    if request.method == "POST":
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(request.POST, instance=genre)
        if form.is_valid():
            if form.save():
                return redirect("/genres/{}".format(genre_id))

    # Or just viewing the form
    else:
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(instance=genre)
    data = {"genre": genre, "form": form}
    return render(request, "genres/edit_genre.html", data)
        </code></pre>
    </section>
<section>
        <h2>Editing existing records</h2>
        <div>
            <div class="col-3">
                <p>Our edit template looks almost identical to our create template because it has the form, but when you actually load the page, the form will be prefilled.</p>
            </div>
            <div class="col-8 col-offset-1">
                <h4>edit_genre.html</h4>
                <pre><code>
<h1>Edit genre {{ genre.name }}</h1>
<form method="post">
    {% csrf_token %}
    {{ form }}
    <input type="submit" value="Update genre">
</form>
                </code></pre>
            </div>
        </div>
        <div class="fragment">
            <div class="col-3">
                <p>Let's also update our detail view so that it's easy to edit a record we are looking at.</p>
            </div>
            <div class="col-8 col-offset-1">
                <h4>view_genre.html</h4>
                <pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it yourself</h2>
        <p>Add edit functionality for movies and actors.</p>
    </section>
<section class="titleSlide" data-background="#168eae">
                    <h1>
    File Manipulation
</h1>
                    <a id="yetiLogo" href="http://www.yetihq.com/"><img src="/static/img/yeti-power.png"></a>
                </section>
<section>
    <h2>Brief Python History</h2>
    <p>Python is a scripting language, which means at its core it has a bunch of functionality built in for operations like file manipulation.</p>
    <ul>
        <li>Python was created by Guido van Rossum, Benevolant Dictator for Life (BDFL), in the late 1980's.</li>
        <li>Python has released major versions 1, 2, and 3</li>
        <li>Version 3 of python had some backwards incompatible changes with version 2, so they also created 2.6 and 2.7.</li>
        <li>Many people still use python 2.7 over 3, especially because major operating systems have not converted over yet.</li>
        <li>The community is still slowly making the transition from python 2 to 3 even though 3 was released in December 2008.</li>
        <li>2.7 will be the last release in the version 2 line, it was released in July 2010.</li>
    </ul>
</section>

element
<section>
<h2>Directories and Files</h2>
<p>Python has a library called <code>os</code> which contains scripting utility functions.</p>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br/><br/></li>
<li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br/><br/></li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">import os

print os.getcwd()</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="7">
<pre><code class="python">
print os.getcwd()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<ul>
<li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
<li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
</ul>
</section> element

element

element
<h2>Directories and Files</h2> element

element
<p>Python has a library called <code>os</code> which contains scripting utility functions.</p> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br/><br/></li>
<li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br/><br/></li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">import os

print os.getcwd()</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="7">
<pre><code class="python">
print os.getcwd()
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<ul>
<li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
<li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
</ul> element

element
<section>
        <h2>Directories and Files</h2>
        <p>Python has a library called <code>os</code> which contains scripting utility functions.</p>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br><br><br></li>
                <li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br><br><br></li>
                <li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br><br></li>
                <li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br><br></li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">import os

print os.getcwd()</code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="3">
                <pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="7">
                <pre><code class="python">
print os.getcwd()
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>AngularJS and Building Custom APIs</h2>
        <ul>
            <li>Basics of AngularJS</li>
            <li>Build a Basecamp clone with AngularJS</li>
            <li>Building your own custom API with Django and Tastypie</li>
            <li>Integrating Django with AngularJS</li>
            <li>Final Project: Demonstrate mastery with Django and AngularJS</li>
        </ul>
    </section>
<section>
        <h2>Prepping for Life After Bootcamp</h2>
        <ul>
            <li>Interview Prep</li>
            <li>Presentation Prep</li>
            <li>Development ecosystem</li>
        </ul>
        <p><a href="#/2">Back to top</a></p>
    </section>
<section>
    <h2>More than an education</h2>
    <p>There are a lot of bootcamps out there. At RocketU, you'll be surrounded by the 170+ amazing tech startups at RocketSpace.</p>
    <br>
    <img src="/static/img/rocketspace-name-logo-large-300x116.png" id="rocketSpaceLogo">
</section>

element
<section>
<h2>A network of your own</h2>
<p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p>
</section> element

element
<section>
<h2>RocketSpace staff</h2>
</section> element

element
<section>
<h2>Your instructors</h2>
<h4>Yeti</h4>
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div>
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div>
<div class="footer">
</div>
</section> element

element
<h2>A network of your own</h2> element

element
<p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p> element

element

element
<h2>RocketSpace staff</h2> element

element

element
<h2>Your instructors</h2> element

element
<h4>Yeti</h4> element

element
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div> element

element
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div> element

element
<div class="footer">
</div> element

element

element
<h2>Your classmates</h2> element

element
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul> element

element
<p><a href="#/4">Back to top</a></p> element

element

element
<h2>Prove you can program.</h2> element

element
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p> element

element
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p> element

element
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul> element

element
<section>
        <h2>A network of your own</h2>
        <p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p>
    </section>

element
<section>
<h2>Deleting records</h2>
<p>Last but not least, we want to be able to delete records as well.</p>
<h4>urls.py</h4>
<pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/delete/$', 'hollywood.views.delete_genre', name='delete_genre'),
)
        </code></pre>
<p>This should be starting to look quite repetitive -- that's a good thing.</p>
</section> element

element
<section>
<h2>Deleting records</h2>
<div>
<div class="col-4">
<p>Deleting works a little differently. We don't actually need to go to a page to delete an object, we can simply delete the object in the view, and then redirect the user to the index page.</p>
</div>
<div class="col-7 col-offset-1">
<h4>views.py</h4>
<pre><code>
def delete_genre(request, genre_id):
    genre = Genre.objects.get(id=genre_id)
    genre.delete()
    return redirect("/genres")
                </code></pre>
</div>
</div>
<div class="fragment">
<div class="col-4">
<p>As we did with edit, let's update the detail template so we can easily access the delete action.</p>
</div>
<div class="col-7 col-offset-1">
<h4>view_genre.html</h4>
<pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;a href="{% url "delete_genre" genre.id %}"&gt;Delete genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it yourself</h2>
<p>Guess what? Add delete functionality for actors and movies!</p>
</section> element

element

element
<h2>Deleting records</h2> element

element
<p>Last but not least, we want to be able to delete records as well.</p> element

element
<h4>urls.py</h4> element

element
<pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/delete/$', 'hollywood.views.delete_genre', name='delete_genre'),
)
        </code></pre> element

element
<p>This should be starting to look quite repetitive -- that's a good thing.</p> element

element

element
<h2>Deleting records</h2> element

element
<div>
<div class="col-4">
<p>Deleting works a little differently. We don't actually need to go to a page to delete an object, we can simply delete the object in the view, and then redirect the user to the index page.</p>
</div>
<div class="col-7 col-offset-1">
<h4>views.py</h4>
<pre><code>
def delete_genre(request, genre_id):
    genre = Genre.objects.get(id=genre_id)
    genre.delete()
    return redirect("/genres")
                </code></pre>
</div>
</div> element

element
<div class="fragment">
<div class="col-4">
<p>As we did with edit, let's update the detail template so we can easily access the delete action.</p>
</div>
<div class="col-7 col-offset-1">
<h4>view_genre.html</h4>
<pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;a href="{% url "delete_genre" genre.id %}"&gt;Delete genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
</div>
</div> element

element

element
<h2>Do it yourself</h2> element

element
<p>Guess what? Add delete functionality for actors and movies!</p> element

element
<section>
        <h2>Deleting records</h2>
        <p>Last but not least, we want to be able to delete records as well.</p>
        <h4>urls.py</h4>
        <pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/delete/$', 'hollywood.views.delete_genre', name='delete_genre'),
)
        </code></pre>
        <p>This should be starting to look quite repetitive -- that's a good thing.</p>
    </section>
<section>
        <h2>Deleting records</h2>
        <div>
            <div class="col-4">
                <p>Deleting works a little differently. We don't actually need to go to a page to delete an object, we can simply delete the object in the view, and then redirect the user to the index page.</p>
            </div>
            <div class="col-7 col-offset-1">
                <h4>views.py</h4>
                <pre><code>
def delete_genre(request, genre_id):
    genre = Genre.objects.get(id=genre_id)
    genre.delete()
    return redirect("/genres")
                </code></pre>
            </div>
        </div>
        <div class="fragment">
            <div class="col-4">
                <p>As we did with edit, let's update the detail template so we can easily access the delete action.</p>
            </div>
            <div class="col-7 col-offset-1">
                <h4>view_genre.html</h4>
                <pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;a href="{% url "delete_genre" genre.id %}"&gt;Delete genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <ul>
            <li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
            <li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
        </ul>
    </section>

element
<section>
<h2>Reading a File</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
<li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
<li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
<li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
<li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre>

Hello world!
Hello universe!
                </pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="4">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="6">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Reading a File (Cont.)</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
<li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
<li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
<li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="2">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p>
<ul>
<li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
<li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
<li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
<li>Create new text files for testing out your function!</li>
</ul>
</section> element

element

element
<h2>Reading a File</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
<li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
<li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
<li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
<li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre>

Hello world!
Hello universe!
                </pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="4">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="6">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
</div>
</div> element

element

element
<h2>Reading a File (Cont.)</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
<li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
<li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
<li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="2">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p> element

element
<ul>
<li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
<li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
<li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
<li>Create new text files for testing out your function!</li>
</ul> element

element
<section>
        <h2>Reading a File</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
                <li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
                <li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
                <li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
                <li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre>

Hello world!
Hello universe!
                </pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="4">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="6">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>RocketSpace staff</h2>
    </section>

element
<h2>Your instructors</h2> element

element
<h4>Yeti</h4> element

element
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div> element

element
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div> element

element
<div class="footer">
</div> element

element

element
<h2>Your classmates</h2> element

element
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul> element

element
<p><a href="#/4">Back to top</a></p> element

element

element
<h2>Prove you can program.</h2> element

element
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p> element

element
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p> element

element
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul> element

element
<section>
        <h2>Your classmates</h2>
        <ul>
            <li>A brain</li>
            <li>An athlete</li>
            <li>A basket case</li>
            <li>A princess</li>
            <li>And a criminal</li>
        </ul>
        <p><a href="#/4">Back to top</a></p>
    </section>
<section>
        <h2>Do it yourself</h2>
        <p>Guess what? Add delete functionality for actors and movies!</p>
    </section>
<section>
    <h2>Recap: Basic Django app</h2>
    <p>Congratulations! You made a Django project. It's simple, but captures the functionality that powers most applications you use on the web and in mobile apps.</p>
    <p>You'll start to notice routes just like the ones you created all over the web.</p>
    <h4>urls.py</h4>
    <pre><code>
urlpatterns = patterns('',
    url(r'^genres/$', 'hollywood.views.genres', name='genres'),
    url(r'^genres/new/$', 'hollywood.views.new_genre', name='new_genre'),
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/$', 'hollywood.views.view_genre', name='view_genre'),
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/edit/$', 'hollywood.views.edit_genre', name='edit_genre'),
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/delete/$', 'hollywood.views.delete_genre', name='delete_genre'),
)
    </code></pre>
</section>
<section class="titleSlide" data-background="#168eae">
                    <h1>
    Basic Django App: Edit &amp; Delete
</h1>
                    <a id="yetiLogo" href="http://www.yetihq.com/"><img src="/static/img/yeti-power.png"></a>
                </section>
<section>
    <h2>Laying out our application</h2>
    <p>Our Django app will have this site map. This basic layout can be found in many applications.</p>
    <img src="/static/img/hollywood_site_map.png">
</section>

element
<section>
<h2>Editing existing records</h2>
<p>Editing an existing object is a bit of a combination of the create view and the detail view -- you need a form to edit and process, but you are also finding an existing record.</p>
<p>Let's start by adding our route.</p>
<pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/edit/$', 'hollywood.views.edit_genre', name='edit_genre'),
)
        </code></pre>
</section> element

element
<section>
<h2>Editing existing records</h2>
<pre><code>
def edit_genre(request, genre_id):
    # Similar to the the detail view, we have to find the existing genre we are editing
    genre = Genre.objects.get(id=genre_id)

    # We still check to see if we are submitting the form
    if request.method == "POST":
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(request.POST, instance=genre)
        if form.is_valid():
            if form.save():
                return redirect("/genres/{}".format(genre_id))

    # Or just viewing the form
    else:
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(instance=genre)
    data = {"genre": genre, "form": form}
    return render(request, "genres/edit_genre.html", data)
        </code></pre>
</section> element

element
<section>
<h2>Editing existing records</h2>
<div>
<div class="col-3">
<p>Our edit template looks almost identical to our create template because it has the form, but when you actually load the page, the form will be prefilled.</p>
</div>
<div class="col-8 col-offset-1">
<h4>edit_genre.html</h4>
<pre><code>
<h1>Edit genre {{ genre.name }}</h1>
<form method="post">
    {% csrf_token %}
    {{ form }}
    <input type="submit" value="Update genre"/>
</form>
                </code></pre>
</div>
</div>
<div class="fragment">
<div class="col-3">
<p>Let's also update our detail view so that it's easy to edit a record we are looking at.</p>
</div>
<div class="col-8 col-offset-1">
<h4>view_genre.html</h4>
<pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it yourself</h2>
<p>Add edit functionality for movies and actors.</p>
</section> element

element

element
<h2>Editing existing records</h2> element

element
<p>Editing an existing object is a bit of a combination of the create view and the detail view -- you need a form to edit and process, but you are also finding an existing record.</p> element

element
<p>Let's start by adding our route.</p> element

element
<pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/edit/$', 'hollywood.views.edit_genre', name='edit_genre'),
)
        </code></pre> element

element

element
<h2>Editing existing records</h2> element

element
<pre><code>
def edit_genre(request, genre_id):
    # Similar to the the detail view, we have to find the existing genre we are editing
    genre = Genre.objects.get(id=genre_id)

    # We still check to see if we are submitting the form
    if request.method == "POST":
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(request.POST, instance=genre)
        if form.is_valid():
            if form.save():
                return redirect("/genres/{}".format(genre_id))

    # Or just viewing the form
    else:
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(instance=genre)
    data = {"genre": genre, "form": form}
    return render(request, "genres/edit_genre.html", data)
        </code></pre> element

element

element
<h2>Editing existing records</h2> element

element
<div>
<div class="col-3">
<p>Our edit template looks almost identical to our create template because it has the form, but when you actually load the page, the form will be prefilled.</p>
</div>
<div class="col-8 col-offset-1">
<h4>edit_genre.html</h4>
<pre><code>
<h1>Edit genre {{ genre.name }}</h1>
<form method="post">
    {% csrf_token %}
    {{ form }}
    <input type="submit" value="Update genre"/>
</form>
                </code></pre>
</div>
</div> element

element
<div class="fragment">
<div class="col-3">
<p>Let's also update our detail view so that it's easy to edit a record we are looking at.</p>
</div>
<div class="col-8 col-offset-1">
<h4>view_genre.html</h4>
<pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
</div>
</div> element

element

element
<h2>Do it yourself</h2> element

element
<p>Add edit functionality for movies and actors.</p> element

element
<section>
        <h2>Editing existing records</h2>
        <p>Editing an existing object is a bit of a combination of the create view and the detail view -- you need a form to edit and process, but you are also finding an existing record.</p>
        <p>Let's start by adding our route.</p>
        <pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/edit/$', 'hollywood.views.edit_genre', name='edit_genre'),
)
        </code></pre>
    </section>
<section>
        <h2>Reading a File (Cont.)</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
                <li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
                <li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
                <li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="2">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p>
        <ul>
            <li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
            <li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
            <li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
            <li>Create new text files for testing out your function!</li>
        </ul>
    </section>

element
<section>
<h2>Writing a File</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
<li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
<li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Writing a File (Cont.)</h2>
<div class="col-4">
<br/>
<ul>
<li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Context Manager</h2>
<p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p>
<p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p>
<p>They are used to run certain functions before and after a block of code.</p>
<br/><br/>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
<li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
<li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p>
<p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p>
<div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div>
<p style="clear:both;"><br/>Will become</p>
<div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div>
<p style="clear:both"><br/>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p>
<div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div>
</section> element

element

element
<h2>Writing a File</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
<li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
<li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
</div>
</div> element

element

element
<h2>Writing a File (Cont.)</h2> element

element
<div class="col-4">
<br/>
<ul>
<li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
</div>
</div> element

element

element
<h2>Context Manager</h2> element

element
<p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p> element

element
<p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p> element

element
<p>They are used to run certain functions before and after a block of code.</p> element

element
<br/> element
<br/> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
<li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
<li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p> element

element
<p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p> element

element
<div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div> element

element
<p style="clear:both;"><br/>Will become</p> element

element
<div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div> element

element
<p style="clear:both"><br/>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p> element

element
<div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div> element

element
<section>
        <h2>Writing a File</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
                <li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
                <li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
            </div>
        </div>
    </section>
<section>
    <h2>Prove you can program.</h2>
    <p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
    <p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
    <ul>
        <li><a target="_blank" href="http://codingbat.com/python">Coding Bat</a></li>
        <li><a target="_blank" href="http://www.pythonchallenge.com/">Python Challenge</a></li>
        <li><a target="_blank" href="http://www.coderbyte.com/">Coderbyte</a></li>
    </ul>
</section>
<section>
    <h2>Learn web development. Build awesome things.</h2>
    <p>
        You quit your job, you told your friends and family you're doing something crazy, maybe you moved here. You're ready to learn, intensively, for the next twelve weeks. By the time you're done, you'll be able to build pretty much anything you see on the internet.
    </p>
</section>

element
<section>
<h2>What you'll be learning</h2>
<p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p>
<ul>
<li><a href="#/2/1">Prework</a></li>
<li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
<li><a href="#/2/3">Integrating JavaScript and Design</a></li>
<li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
<li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
<li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
</ul>
</section> element

element
<section>
<h2>Prework</h2>
<p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p>
<ul>
<li>Command Line: Give your computer instructions like a real programmer</li>
<li>HTML: Learn the basic building blocks of the front-facing web</li>
<li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
<li>Git: Version control is a lifesaver</li>
<li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
<li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
<li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
</ul>
</section> element

element
<section>
<h2>Object-oriented Python and Beginner Django</h2>
<ul>
<li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
<li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
<li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
<li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
<li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
<li>Project: Build a Django application with user authentication and database storage</li>
</ul>
</section> element

element
<section>
<h2>Integrating JavaScript and Design</h2>
<ul>
<li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
<li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
<li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
<li>Using third-party APIs: Query external services like Google and Instagram</li>
<li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
<li>Project: Integrate front-end technologies for a more interactive Django application</li>
</ul>
</section> element

element
<section>
<h2>Expand Your Developer Toolkit</h2>
<ul>
<li>Pair programming</li>
<li>Git strategies</li>
<li>Test-driven development</li>
<li>HTTP lifecycle</li>
<li>Computer science topics</li>
<li>Introduction to dev ops</li>
<li>Analytics and error reporting</li>
<li>Project: Work in a group to build a test-driven Django application</li>
</ul>
</section> element

element
<section>
<h2>AngularJS and Building Custom APIs</h2>
<ul>
<li>Basics of AngularJS</li>
<li>Build a Basecamp clone with AngularJS</li>
<li>Building your own custom API with Django and Tastypie</li>
<li>Integrating Django with AngularJS</li>
<li>Final Project: Demonstrate mastery with Django and AngularJS</li>
</ul>
</section> element

element
<section>
<h2>Prepping for Life After Bootcamp</h2>
<ul>
<li>Interview Prep</li>
<li>Presentation Prep</li>
<li>Development ecosystem</li>
</ul>
<p><a href="#/2">Back to top</a></p>
</section> element

element

element
<h2>What you'll be learning</h2> element

element
<p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p> element

element
<ul>
<li><a href="#/2/1">Prework</a></li>
<li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
<li><a href="#/2/3">Integrating JavaScript and Design</a></li>
<li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
<li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
<li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
</ul> element

element

element
<h2>Prework</h2> element

element
<p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p> element

element
<ul>
<li>Command Line: Give your computer instructions like a real programmer</li>
<li>HTML: Learn the basic building blocks of the front-facing web</li>
<li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
<li>Git: Version control is a lifesaver</li>
<li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
<li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
<li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
</ul> element

element

element
<h2>Object-oriented Python and Beginner Django</h2> element

element
<ul>
<li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
<li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
<li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
<li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
<li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
<li>Project: Build a Django application with user authentication and database storage</li>
</ul> element

element

element
<h2>Integrating JavaScript and Design</h2> element

element
<ul>
<li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
<li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
<li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
<li>Using third-party APIs: Query external services like Google and Instagram</li>
<li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
<li>Project: Integrate front-end technologies for a more interactive Django application</li>
</ul> element

element

element
<h2>Expand Your Developer Toolkit</h2> element

element
<ul>
<li>Pair programming</li>
<li>Git strategies</li>
<li>Test-driven development</li>
<li>HTTP lifecycle</li>
<li>Computer science topics</li>
<li>Introduction to dev ops</li>
<li>Analytics and error reporting</li>
<li>Project: Work in a group to build a test-driven Django application</li>
</ul> element

element

element
<h2>AngularJS and Building Custom APIs</h2> element

element
<ul>
<li>Basics of AngularJS</li>
<li>Build a Basecamp clone with AngularJS</li>
<li>Building your own custom API with Django and Tastypie</li>
<li>Integrating Django with AngularJS</li>
<li>Final Project: Demonstrate mastery with Django and AngularJS</li>
</ul> element

element

element
<h2>Prepping for Life After Bootcamp</h2> element

element
<ul>
<li>Interview Prep</li>
<li>Presentation Prep</li>
<li>Development ecosystem</li>
</ul> element

element
<p><a href="#/2">Back to top</a></p> element

element
<section>
        <h2>What you'll be learning</h2>
        <p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p>
        <ul>
            <li><a href="#/2/1">Prework</a></li>
            <li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
            <li><a href="#/2/3">Integrating JavaScript and Design</a></li>
            <li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
            <li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
            <li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
        </ul>
    </section>
<section>
        <h2>Editing existing records</h2>
        <pre><code>
def edit_genre(request, genre_id):
    # Similar to the the detail view, we have to find the existing genre we are editing
    genre = Genre.objects.get(id=genre_id)

    # We still check to see if we are submitting the form
    if request.method == "POST":
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(request.POST, instance=genre)
        if form.is_valid():
            if form.save():
                return redirect("/genres/{}".format(genre_id))

    # Or just viewing the form
    else:
        # We prefill the form by passing 'instance', which is the specific
        # object we are editing
        form = GenreForm(instance=genre)
    data = {"genre": genre, "form": form}
    return render(request, "genres/edit_genre.html", data)
        </code></pre>
    </section>
<section>
        <h2>Editing existing records</h2>
        <div>
            <div class="col-3">
                <p>Our edit template looks almost identical to our create template because it has the form, but when you actually load the page, the form will be prefilled.</p>
            </div>
            <div class="col-8 col-offset-1">
                <h4>edit_genre.html</h4>
                <pre><code>
<h1>Edit genre {{ genre.name }}</h1>
<form method="post">
    {% csrf_token %}
    {{ form }}
    <input type="submit" value="Update genre">
</form>
                </code></pre>
            </div>
        </div>
        <div class="fragment">
            <div class="col-3">
                <p>Let's also update our detail view so that it's easy to edit a record we are looking at.</p>
            </div>
            <div class="col-8 col-offset-1">
                <h4>view_genre.html</h4>
                <pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it yourself</h2>
        <p>Add edit functionality for movies and actors.</p>
    </section>

element
<section>
<h2>Deleting records</h2>
<p>Last but not least, we want to be able to delete records as well.</p>
<h4>urls.py</h4>
<pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/delete/$', 'hollywood.views.delete_genre', name='delete_genre'),
)
        </code></pre>
<p>This should be starting to look quite repetitive -- that's a good thing.</p>
</section> element

element
<section>
<h2>Deleting records</h2>
<div>
<div class="col-4">
<p>Deleting works a little differently. We don't actually need to go to a page to delete an object, we can simply delete the object in the view, and then redirect the user to the index page.</p>
</div>
<div class="col-7 col-offset-1">
<h4>views.py</h4>
<pre><code>
def delete_genre(request, genre_id):
    genre = Genre.objects.get(id=genre_id)
    genre.delete()
    return redirect("/genres")
                </code></pre>
</div>
</div>
<div class="fragment">
<div class="col-4">
<p>As we did with edit, let's update the detail template so we can easily access the delete action.</p>
</div>
<div class="col-7 col-offset-1">
<h4>view_genre.html</h4>
<pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;a href="{% url "delete_genre" genre.id %}"&gt;Delete genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it yourself</h2>
<p>Guess what? Add delete functionality for actors and movies!</p>
</section> element

element

element
<h2>Deleting records</h2> element

element
<p>Last but not least, we want to be able to delete records as well.</p> element

element
<h4>urls.py</h4> element

element
<pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/delete/$', 'hollywood.views.delete_genre', name='delete_genre'),
)
        </code></pre> element

element
<p>This should be starting to look quite repetitive -- that's a good thing.</p> element

element

element
<h2>Deleting records</h2> element

element
<div>
<div class="col-4">
<p>Deleting works a little differently. We don't actually need to go to a page to delete an object, we can simply delete the object in the view, and then redirect the user to the index page.</p>
</div>
<div class="col-7 col-offset-1">
<h4>views.py</h4>
<pre><code>
def delete_genre(request, genre_id):
    genre = Genre.objects.get(id=genre_id)
    genre.delete()
    return redirect("/genres")
                </code></pre>
</div>
</div> element

element
<div class="fragment">
<div class="col-4">
<p>As we did with edit, let's update the detail template so we can easily access the delete action.</p>
</div>
<div class="col-7 col-offset-1">
<h4>view_genre.html</h4>
<pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;a href="{% url "delete_genre" genre.id %}"&gt;Delete genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
</div>
</div> element

element

element
<h2>Do it yourself</h2> element

element
<p>Guess what? Add delete functionality for actors and movies!</p> element

element
<section>
        <h2>Deleting records</h2>
        <p>Last but not least, we want to be able to delete records as well.</p>
        <h4>urls.py</h4>
        <pre><code>
urlpatterns = patterns('',
    ##
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/delete/$', 'hollywood.views.delete_genre', name='delete_genre'),
)
        </code></pre>
        <p>This should be starting to look quite repetitive -- that's a good thing.</p>
    </section>
<section>
        <h2>Deleting records</h2>
        <div>
            <div class="col-4">
                <p>Deleting works a little differently. We don't actually need to go to a page to delete an object, we can simply delete the object in the view, and then redirect the user to the index page.</p>
            </div>
            <div class="col-7 col-offset-1">
                <h4>views.py</h4>
                <pre><code>
def delete_genre(request, genre_id):
    genre = Genre.objects.get(id=genre_id)
    genre.delete()
    return redirect("/genres")
                </code></pre>
            </div>
        </div>
        <div class="fragment">
            <div class="col-4">
                <p>As we did with edit, let's update the detail template so we can easily access the delete action.</p>
            </div>
            <div class="col-7 col-offset-1">
                <h4>view_genre.html</h4>
                <pre><code>
<h1>{{ genre.name }}</h1>
&lt;a href="{% url "edit_genre" genre.id %}"&gt;Edit genre&lt;/a&gt;
&lt;a href="{% url "delete_genre" genre.id %}"&gt;Delete genre&lt;/a&gt;
&lt;br&gt;
&lt;a href="{% url "home" %}"&gt;Back to Hollywood&lt;/a&gt;
&lt;a href="{% url "genres" %}"&gt;Back to Genres&lt;/a&gt;
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Writing a File (Cont.)</h2>
        <div class="col-4">
            <br>
            <ul>
                <li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br><br><br><br><br></li>
                <li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br><br><br><br><br></li>
                <li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="3">
                <pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Context Manager</h2>
        <p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p>
        <p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p>
        <p>They are used to run certain functions before and after a block of code.</p>
        <br><br>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
                <li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
                <li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p>
        <p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p>
        <div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div>
        <p style="clear:both;"><br>Will become</p>
        <div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div>
        <p style="clear:both"><br>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p>
        <div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div>
    </section>
<section>
        <h2>Prework</h2>
        <p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p>
        <ul>
            <li>Command Line: Give your computer instructions like a real programmer</li>
            <li>HTML: Learn the basic building blocks of the front-facing web</li>
            <li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
            <li>Git: Version control is a lifesaver</li>
            <li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
            <li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
            <li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
        </ul>
    </section>
<section>
        <h2>Object-oriented Python and Beginner Django</h2>
        <ul>
            <li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
            <li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
            <li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
            <li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
            <li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
            <li>Project: Build a Django application with user authentication and database storage</li>
        </ul>
    </section>
<section>
        <h2>Integrating JavaScript and Design</h2>
        <ul>
            <li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
            <li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
            <li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
            <li>Using third-party APIs: Query external services like Google and Instagram</li>
            <li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
            <li>Project: Integrate front-end technologies for a more interactive Django application</li>
        </ul>
    </section>
<section>
        <h2>Expand Your Developer Toolkit</h2>
        <ul>
            <li>Pair programming</li>
            <li>Git strategies</li>
            <li>Test-driven development</li>
            <li>HTTP lifecycle</li>
            <li>Computer science topics</li>
            <li>Introduction to dev ops</li>
            <li>Analytics and error reporting</li>
            <li>Project: Work in a group to build a test-driven Django application</li>
        </ul>
    </section>
<section>
        <h2>Do it yourself</h2>
        <p>Guess what? Add delete functionality for actors and movies!</p>
    </section>
<section>
    <h2>Recap: Basic Django app</h2>
    <p>Congratulations! You made a Django project. It's simple, but captures the functionality that powers most applications you use on the web and in mobile apps.</p>
    <p>You'll start to notice routes just like the ones you created all over the web.</p>
    <h4>urls.py</h4>
    <pre><code>
urlpatterns = patterns('',
    url(r'^genres/$', 'hollywood.views.genres', name='genres'),
    url(r'^genres/new/$', 'hollywood.views.new_genre', name='new_genre'),
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/$', 'hollywood.views.view_genre', name='view_genre'),
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/edit/$', 'hollywood.views.edit_genre', name='edit_genre'),
    url(r'^genres/(?P&lt;genre_id&gt;\w+)/delete/$', 'hollywood.views.delete_genre', name='delete_genre'),
)
    </code></pre>
</section>
<section class="titleSlide" data-background="#168eae">
                    <h1>
    File Manipulation
</h1>
                    <a id="yetiLogo" href="http://www.yetihq.com/"><img src="/static/img/yeti-power.png"></a>
                </section>
<section>
    <h2>Brief Python History</h2>
    <p>Python is a scripting language, which means at its core it has a bunch of functionality built in for operations like file manipulation.</p>
    <ul>
        <li>Python was created by Guido van Rossum, Benevolant Dictator for Life (BDFL), in the late 1980's.</li>
        <li>Python has released major versions 1, 2, and 3</li>
        <li>Version 3 of python had some backwards incompatible changes with version 2, so they also created 2.6 and 2.7.</li>
        <li>Many people still use python 2.7 over 3, especially because major operating systems have not converted over yet.</li>
        <li>The community is still slowly making the transition from python 2 to 3 even though 3 was released in December 2008.</li>
        <li>2.7 will be the last release in the version 2 line, it was released in July 2010.</li>
    </ul>
</section>

element
<section>
<h2>Directories and Files</h2>
<p>Python has a library called <code>os</code> which contains scripting utility functions.</p>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br/><br/></li>
<li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br/><br/></li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">import os

print os.getcwd()</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="7">
<pre><code class="python">
print os.getcwd()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<ul>
<li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
<li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
</ul>
</section> element

element

element
<h2>Directories and Files</h2> element

element
<p>Python has a library called <code>os</code> which contains scripting utility functions.</p> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br/><br/></li>
<li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br/><br/></li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">import os

print os.getcwd()</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="7">
<pre><code class="python">
print os.getcwd()
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<ul>
<li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
<li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
</ul> element

element
<section>
        <h2>Directories and Files</h2>
        <p>Python has a library called <code>os</code> which contains scripting utility functions.</p>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br><br><br></li>
                <li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br><br><br></li>
                <li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br><br></li>
                <li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br><br></li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">import os

print os.getcwd()</code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="3">
                <pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="7">
                <pre><code class="python">
print os.getcwd()
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>AngularJS and Building Custom APIs</h2>
        <ul>
            <li>Basics of AngularJS</li>
            <li>Build a Basecamp clone with AngularJS</li>
            <li>Building your own custom API with Django and Tastypie</li>
            <li>Integrating Django with AngularJS</li>
            <li>Final Project: Demonstrate mastery with Django and AngularJS</li>
        </ul>
    </section>
<section>
        <h2>Prepping for Life After Bootcamp</h2>
        <ul>
            <li>Interview Prep</li>
            <li>Presentation Prep</li>
            <li>Development ecosystem</li>
        </ul>
        <p><a href="#/2">Back to top</a></p>
    </section>
<section>
    <h2>More than an education</h2>
    <p>There are a lot of bootcamps out there. At RocketU, you'll be surrounded by the 170+ amazing tech startups at RocketSpace.</p>
    <br>
    <img src="/static/img/rocketspace-name-logo-large-300x116.png" id="rocketSpaceLogo">
</section>

element
<section>
<h2>A network of your own</h2>
<p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p>
</section> element

element
<section>
<h2>RocketSpace staff</h2>
</section> element

element
<section>
<h2>Your instructors</h2>
<h4>Yeti</h4>
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div>
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div>
<div class="footer">
</div>
</section> element

element
<h2>A network of your own</h2> element

element
<p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p> element

element

element
<h2>RocketSpace staff</h2> element

element

element
<h2>Your instructors</h2> element

element
<h4>Yeti</h4> element

element
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div> element

element
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div> element

element
<div class="footer">
</div> element

element

element
<h2>Your classmates</h2> element

element
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul> element

element
<p><a href="#/4">Back to top</a></p> element

element

element
<h2>Prove you can program.</h2> element

element
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p> element

element
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p> element

element
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul> element

element
<section>
        <h2>A network of your own</h2>
        <p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <ul>
            <li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
            <li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
        </ul>
    </section>

element
<section>
<h2>Reading a File</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
<li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
<li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
<li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
<li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre>

Hello world!
Hello universe!
                </pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="4">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="6">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Reading a File (Cont.)</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
<li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
<li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
<li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="2">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p>
<ul>
<li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
<li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
<li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
<li>Create new text files for testing out your function!</li>
</ul>
</section> element

element

element
<h2>Reading a File</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
<li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
<li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
<li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
<li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre>

Hello world!
Hello universe!
                </pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="4">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="6">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
</div>
</div> element

element

element
<h2>Reading a File (Cont.)</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
<li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
<li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
<li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="2">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p> element

element
<ul>
<li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
<li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
<li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
<li>Create new text files for testing out your function!</li>
</ul> element

element
<section>
        <h2>Reading a File</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
                <li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
                <li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
                <li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
                <li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre>

Hello world!
Hello universe!
                </pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="4">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="6">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>RocketSpace staff</h2>
    </section>

element
<h2>Your instructors</h2> element

element
<h4>Yeti</h4> element

element
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div> element

element
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div> element

element
<div class="footer">
</div> element

element

element
<h2>Your classmates</h2> element

element
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul> element

element
<p><a href="#/4">Back to top</a></p> element

element

element
<h2>Prove you can program.</h2> element

element
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p> element

element
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p> element

element
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul> element

element
<section>
        <h2>Your classmates</h2>
        <ul>
            <li>A brain</li>
            <li>An athlete</li>
            <li>A basket case</li>
            <li>A princess</li>
            <li>And a criminal</li>
        </ul>
        <p><a href="#/4">Back to top</a></p>
    </section>
<section>
        <h2>Reading a File (Cont.)</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
                <li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
                <li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
                <li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="2">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p>
        <ul>
            <li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
            <li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
            <li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
            <li>Create new text files for testing out your function!</li>
        </ul>
    </section>

element
<section>
<h2>Writing a File</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
<li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
<li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Writing a File (Cont.)</h2>
<div class="col-4">
<br/>
<ul>
<li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Context Manager</h2>
<p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p>
<p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p>
<p>They are used to run certain functions before and after a block of code.</p>
<br/><br/>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
<li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
<li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p>
<p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p>
<div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div>
<p style="clear:both;"><br/>Will become</p>
<div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div>
<p style="clear:both"><br/>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p>
<div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div>
</section> element

element

element
<h2>Writing a File</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
<li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
<li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
</div>
</div> element

element

element
<h2>Writing a File (Cont.)</h2> element

element
<div class="col-4">
<br/>
<ul>
<li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
</div>
</div> element

element

element
<h2>Context Manager</h2> element

element
<p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p> element

element
<p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p> element

element
<p>They are used to run certain functions before and after a block of code.</p> element

element
<br/> element
<br/> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
<li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
<li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p> element

element
<p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p> element

element
<div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div> element

element
<p style="clear:both;"><br/>Will become</p> element

element
<div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div> element

element
<p style="clear:both"><br/>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p> element

element
<div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div> element

element
<section>
        <h2>Writing a File</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
                <li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
                <li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
            </div>
        </div>
    </section>
<section>
    <h2>Prove you can program.</h2>
    <p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
    <p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
    <ul>
        <li><a target="_blank" href="http://codingbat.com/python">Coding Bat</a></li>
        <li><a target="_blank" href="http://www.pythonchallenge.com/">Python Challenge</a></li>
        <li><a target="_blank" href="http://www.coderbyte.com/">Coderbyte</a></li>
    </ul>
</section>
<section>
    <h2>Learn web development. Build awesome things.</h2>
    <p>
        You quit your job, you told your friends and family you're doing something crazy, maybe you moved here. You're ready to learn, intensively, for the next twelve weeks. By the time you're done, you'll be able to build pretty much anything you see on the internet.
    </p>
</section>

element
<section>
<h2>What you'll be learning</h2>
<p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p>
<ul>
<li><a href="#/2/1">Prework</a></li>
<li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
<li><a href="#/2/3">Integrating JavaScript and Design</a></li>
<li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
<li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
<li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
</ul>
</section> element

element
<section>
<h2>Prework</h2>
<p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p>
<ul>
<li>Command Line: Give your computer instructions like a real programmer</li>
<li>HTML: Learn the basic building blocks of the front-facing web</li>
<li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
<li>Git: Version control is a lifesaver</li>
<li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
<li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
<li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
</ul>
</section> element

element
<section>
<h2>Object-oriented Python and Beginner Django</h2>
<ul>
<li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
<li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
<li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
<li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
<li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
<li>Project: Build a Django application with user authentication and database storage</li>
</ul>
</section> element

element
<section>
<h2>Integrating JavaScript and Design</h2>
<ul>
<li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
<li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
<li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
<li>Using third-party APIs: Query external services like Google and Instagram</li>
<li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
<li>Project: Integrate front-end technologies for a more interactive Django application</li>
</ul>
</section> element

element
<section>
<h2>Expand Your Developer Toolkit</h2>
<ul>
<li>Pair programming</li>
<li>Git strategies</li>
<li>Test-driven development</li>
<li>HTTP lifecycle</li>
<li>Computer science topics</li>
<li>Introduction to dev ops</li>
<li>Analytics and error reporting</li>
<li>Project: Work in a group to build a test-driven Django application</li>
</ul>
</section> element

element
<section>
<h2>AngularJS and Building Custom APIs</h2>
<ul>
<li>Basics of AngularJS</li>
<li>Build a Basecamp clone with AngularJS</li>
<li>Building your own custom API with Django and Tastypie</li>
<li>Integrating Django with AngularJS</li>
<li>Final Project: Demonstrate mastery with Django and AngularJS</li>
</ul>
</section> element

element
<section>
<h2>Prepping for Life After Bootcamp</h2>
<ul>
<li>Interview Prep</li>
<li>Presentation Prep</li>
<li>Development ecosystem</li>
</ul>
<p><a href="#/2">Back to top</a></p>
</section> element

element

element
<h2>What you'll be learning</h2> element

element
<p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p> element

element
<ul>
<li><a href="#/2/1">Prework</a></li>
<li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
<li><a href="#/2/3">Integrating JavaScript and Design</a></li>
<li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
<li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
<li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
</ul> element

element

element
<h2>Prework</h2> element

element
<p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p> element

element
<ul>
<li>Command Line: Give your computer instructions like a real programmer</li>
<li>HTML: Learn the basic building blocks of the front-facing web</li>
<li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
<li>Git: Version control is a lifesaver</li>
<li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
<li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
<li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
</ul> element

element

element
<h2>Object-oriented Python and Beginner Django</h2> element

element
<ul>
<li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
<li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
<li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
<li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
<li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
<li>Project: Build a Django application with user authentication and database storage</li>
</ul> element

element

element
<h2>Integrating JavaScript and Design</h2> element

element
<ul>
<li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
<li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
<li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
<li>Using third-party APIs: Query external services like Google and Instagram</li>
<li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
<li>Project: Integrate front-end technologies for a more interactive Django application</li>
</ul> element

element

element
<h2>Expand Your Developer Toolkit</h2> element

element
<ul>
<li>Pair programming</li>
<li>Git strategies</li>
<li>Test-driven development</li>
<li>HTTP lifecycle</li>
<li>Computer science topics</li>
<li>Introduction to dev ops</li>
<li>Analytics and error reporting</li>
<li>Project: Work in a group to build a test-driven Django application</li>
</ul> element

element

element
<h2>AngularJS and Building Custom APIs</h2> element

element
<ul>
<li>Basics of AngularJS</li>
<li>Build a Basecamp clone with AngularJS</li>
<li>Building your own custom API with Django and Tastypie</li>
<li>Integrating Django with AngularJS</li>
<li>Final Project: Demonstrate mastery with Django and AngularJS</li>
</ul> element

element

element
<h2>Prepping for Life After Bootcamp</h2> element

element
<ul>
<li>Interview Prep</li>
<li>Presentation Prep</li>
<li>Development ecosystem</li>
</ul> element

element
<p><a href="#/2">Back to top</a></p> element

element
<section>
        <h2>What you'll be learning</h2>
        <p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p>
        <ul>
            <li><a href="#/2/1">Prework</a></li>
            <li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
            <li><a href="#/2/3">Integrating JavaScript and Design</a></li>
            <li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
            <li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
            <li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
        </ul>
    </section>
<section>
        <h2>Writing a File (Cont.)</h2>
        <div class="col-4">
            <br>
            <ul>
                <li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br><br><br><br><br></li>
                <li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br><br><br><br><br></li>
                <li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="3">
                <pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Context Manager</h2>
        <p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p>
        <p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p>
        <p>They are used to run certain functions before and after a block of code.</p>
        <br><br>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
                <li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
                <li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p>
        <p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p>
        <div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div>
        <p style="clear:both;"><br>Will become</p>
        <div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div>
        <p style="clear:both"><br>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p>
        <div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div>
    </section>
<section>
        <h2>Prework</h2>
        <p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p>
        <ul>
            <li>Command Line: Give your computer instructions like a real programmer</li>
            <li>HTML: Learn the basic building blocks of the front-facing web</li>
            <li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
            <li>Git: Version control is a lifesaver</li>
            <li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
            <li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
            <li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
        </ul>
    </section>
<section>
        <h2>Object-oriented Python and Beginner Django</h2>
        <ul>
            <li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
            <li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
            <li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
            <li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
            <li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
            <li>Project: Build a Django application with user authentication and database storage</li>
        </ul>
    </section>
<section>
        <h2>Integrating JavaScript and Design</h2>
        <ul>
            <li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
            <li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
            <li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
            <li>Using third-party APIs: Query external services like Google and Instagram</li>
            <li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
            <li>Project: Integrate front-end technologies for a more interactive Django application</li>
        </ul>
    </section>
<section class="titleSlide" data-background="#168eae">
                    <h1>
    File Manipulation
</h1>
                    <a id="yetiLogo" href="http://www.yetihq.com/"><img src="/static/img/yeti-power.png"></a>
                </section>
<section>
    <h2>Brief Python History</h2>
    <p>Python is a scripting language, which means at its core it has a bunch of functionality built in for operations like file manipulation.</p>
    <ul>
        <li>Python was created by Guido van Rossum, Benevolant Dictator for Life (BDFL), in the late 1980's.</li>
        <li>Python has released major versions 1, 2, and 3</li>
        <li>Version 3 of python had some backwards incompatible changes with version 2, so they also created 2.6 and 2.7.</li>
        <li>Many people still use python 2.7 over 3, especially because major operating systems have not converted over yet.</li>
        <li>The community is still slowly making the transition from python 2 to 3 even though 3 was released in December 2008.</li>
        <li>2.7 will be the last release in the version 2 line, it was released in July 2010.</li>
    </ul>
</section>

element
<section>
<h2>Directories and Files</h2>
<p>Python has a library called <code>os</code> which contains scripting utility functions.</p>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br/><br/></li>
<li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br/><br/></li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">import os

print os.getcwd()</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="7">
<pre><code class="python">
print os.getcwd()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<ul>
<li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
<li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
</ul>
</section> element

element

element
<h2>Directories and Files</h2> element

element
<p>Python has a library called <code>os</code> which contains scripting utility functions.</p> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br/><br/></li>
<li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br/><br/></li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">import os

print os.getcwd()</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="7">
<pre><code class="python">
print os.getcwd()
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<ul>
<li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
<li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
</ul> element

element
<section>
        <h2>Directories and Files</h2>
        <p>Python has a library called <code>os</code> which contains scripting utility functions.</p>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br><br><br></li>
                <li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br><br><br></li>
                <li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br><br></li>
                <li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br><br></li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">import os

print os.getcwd()</code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="3">
                <pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="7">
                <pre><code class="python">
print os.getcwd()
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Expand Your Developer Toolkit</h2>
        <ul>
            <li>Pair programming</li>
            <li>Git strategies</li>
            <li>Test-driven development</li>
            <li>HTTP lifecycle</li>
            <li>Computer science topics</li>
            <li>Introduction to dev ops</li>
            <li>Analytics and error reporting</li>
            <li>Project: Work in a group to build a test-driven Django application</li>
        </ul>
    </section>
<section>
        <h2>AngularJS and Building Custom APIs</h2>
        <ul>
            <li>Basics of AngularJS</li>
            <li>Build a Basecamp clone with AngularJS</li>
            <li>Building your own custom API with Django and Tastypie</li>
            <li>Integrating Django with AngularJS</li>
            <li>Final Project: Demonstrate mastery with Django and AngularJS</li>
        </ul>
    </section>
<section>
        <h2>Prepping for Life After Bootcamp</h2>
        <ul>
            <li>Interview Prep</li>
            <li>Presentation Prep</li>
            <li>Development ecosystem</li>
        </ul>
        <p><a href="#/2">Back to top</a></p>
    </section>
<section>
    <h2>More than an education</h2>
    <p>There are a lot of bootcamps out there. At RocketU, you'll be surrounded by the 170+ amazing tech startups at RocketSpace.</p>
    <br>
    <img src="/static/img/rocketspace-name-logo-large-300x116.png" id="rocketSpaceLogo">
</section>

element
<section>
<h2>A network of your own</h2>
<p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p>
</section> element

element
<section>
<h2>RocketSpace staff</h2>
</section> element

element
<section>
<h2>Your instructors</h2>
<h4>Yeti</h4>
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div>
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div>
<div class="footer">
</div>
</section> element

element
<h2>A network of your own</h2> element

element
<p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p> element

element

element
<h2>RocketSpace staff</h2> element

element

element
<h2>Your instructors</h2> element

element
<h4>Yeti</h4> element

element
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div> element

element
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div> element

element
<div class="footer">
</div> element

element

element
<h2>Your classmates</h2> element

element
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul> element

element
<p><a href="#/4">Back to top</a></p> element

element

element
<h2>Prove you can program.</h2> element

element
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p> element

element
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p> element

element
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul> element

element
<section>
        <h2>A network of your own</h2>
        <p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <ul>
            <li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
            <li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
        </ul>
    </section>

element
<section>
<h2>Reading a File</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
<li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
<li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
<li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
<li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre>

Hello world!
Hello universe!
                </pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="4">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="6">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Reading a File (Cont.)</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
<li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
<li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
<li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="2">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p>
<ul>
<li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
<li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
<li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
<li>Create new text files for testing out your function!</li>
</ul>
</section> element

element

element
<h2>Reading a File</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
<li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
<li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
<li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
<li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre>

Hello world!
Hello universe!
                </pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="4">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="6">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
</div>
</div> element

element

element
<h2>Reading a File (Cont.)</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
<li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
<li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
<li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="2">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p> element

element
<ul>
<li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
<li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
<li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
<li>Create new text files for testing out your function!</li>
</ul> element

element
<section>
        <h2>Reading a File</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
                <li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
                <li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
                <li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
                <li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre>

Hello world!
Hello universe!
                </pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="4">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="6">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>RocketSpace staff</h2>
    </section>

element
<h2>Your instructors</h2> element

element
<h4>Yeti</h4> element

element
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div> element

element
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div> element

element
<div class="footer">
</div> element

element

element
<h2>Your classmates</h2> element

element
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul> element

element
<p><a href="#/4">Back to top</a></p> element

element

element
<h2>Prove you can program.</h2> element

element
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p> element

element
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p> element

element
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul> element

element
<section>
        <h2>Your classmates</h2>
        <ul>
            <li>A brain</li>
            <li>An athlete</li>
            <li>A basket case</li>
            <li>A princess</li>
            <li>And a criminal</li>
        </ul>
        <p><a href="#/4">Back to top</a></p>
    </section>
<section>
        <h2>Reading a File (Cont.)</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
                <li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
                <li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
                <li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="2">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p>
        <ul>
            <li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
            <li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
            <li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
            <li>Create new text files for testing out your function!</li>
        </ul>
    </section>

element
<section>
<h2>Writing a File</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
<li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
<li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Writing a File (Cont.)</h2>
<div class="col-4">
<br/>
<ul>
<li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Context Manager</h2>
<p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p>
<p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p>
<p>They are used to run certain functions before and after a block of code.</p>
<br/><br/>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
<li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
<li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p>
<p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p>
<div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div>
<p style="clear:both;"><br/>Will become</p>
<div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div>
<p style="clear:both"><br/>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p>
<div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div>
</section> element

element

element
<h2>Writing a File</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
<li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
<li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
</div>
</div> element

element

element
<h2>Writing a File (Cont.)</h2> element

element
<div class="col-4">
<br/>
<ul>
<li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
</div>
</div> element

element

element
<h2>Context Manager</h2> element

element
<p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p> element

element
<p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p> element

element
<p>They are used to run certain functions before and after a block of code.</p> element

element
<br/> element
<br/> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
<li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
<li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p> element

element
<p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p> element

element
<div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div> element

element
<p style="clear:both;"><br/>Will become</p> element

element
<div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div> element

element
<p style="clear:both"><br/>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p> element

element
<div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div> element

element
<section>
        <h2>Writing a File</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
                <li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
                <li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
            </div>
        </div>
    </section>
<section>
    <h2>Prove you can program.</h2>
    <p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
    <p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
    <ul>
        <li><a target="_blank" href="http://codingbat.com/python">Coding Bat</a></li>
        <li><a target="_blank" href="http://www.pythonchallenge.com/">Python Challenge</a></li>
        <li><a target="_blank" href="http://www.coderbyte.com/">Coderbyte</a></li>
    </ul>
</section>
<section>
    <h2>Learn web development. Build awesome things.</h2>
    <p>
        You quit your job, you told your friends and family you're doing something crazy, maybe you moved here. You're ready to learn, intensively, for the next twelve weeks. By the time you're done, you'll be able to build pretty much anything you see on the internet.
    </p>
</section>

element
<section>
<h2>What you'll be learning</h2>
<p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p>
<ul>
<li><a href="#/2/1">Prework</a></li>
<li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
<li><a href="#/2/3">Integrating JavaScript and Design</a></li>
<li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
<li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
<li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
</ul>
</section> element

element
<section>
<h2>Prework</h2>
<p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p>
<ul>
<li>Command Line: Give your computer instructions like a real programmer</li>
<li>HTML: Learn the basic building blocks of the front-facing web</li>
<li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
<li>Git: Version control is a lifesaver</li>
<li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
<li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
<li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
</ul>
</section> element

element
<section>
<h2>Object-oriented Python and Beginner Django</h2>
<ul>
<li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
<li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
<li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
<li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
<li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
<li>Project: Build a Django application with user authentication and database storage</li>
</ul>
</section> element

element
<section>
<h2>Integrating JavaScript and Design</h2>
<ul>
<li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
<li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
<li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
<li>Using third-party APIs: Query external services like Google and Instagram</li>
<li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
<li>Project: Integrate front-end technologies for a more interactive Django application</li>
</ul>
</section> element

element
<section>
<h2>Expand Your Developer Toolkit</h2>
<ul>
<li>Pair programming</li>
<li>Git strategies</li>
<li>Test-driven development</li>
<li>HTTP lifecycle</li>
<li>Computer science topics</li>
<li>Introduction to dev ops</li>
<li>Analytics and error reporting</li>
<li>Project: Work in a group to build a test-driven Django application</li>
</ul>
</section> element

element
<section>
<h2>AngularJS and Building Custom APIs</h2>
<ul>
<li>Basics of AngularJS</li>
<li>Build a Basecamp clone with AngularJS</li>
<li>Building your own custom API with Django and Tastypie</li>
<li>Integrating Django with AngularJS</li>
<li>Final Project: Demonstrate mastery with Django and AngularJS</li>
</ul>
</section> element

element
<section>
<h2>Prepping for Life After Bootcamp</h2>
<ul>
<li>Interview Prep</li>
<li>Presentation Prep</li>
<li>Development ecosystem</li>
</ul>
<p><a href="#/2">Back to top</a></p>
</section> element

element

element
<h2>What you'll be learning</h2> element

element
<p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p> element

element
<ul>
<li><a href="#/2/1">Prework</a></li>
<li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
<li><a href="#/2/3">Integrating JavaScript and Design</a></li>
<li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
<li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
<li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
</ul> element

element

element
<h2>Prework</h2> element

element
<p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p> element

element
<ul>
<li>Command Line: Give your computer instructions like a real programmer</li>
<li>HTML: Learn the basic building blocks of the front-facing web</li>
<li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
<li>Git: Version control is a lifesaver</li>
<li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
<li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
<li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
</ul> element

element

element
<h2>Object-oriented Python and Beginner Django</h2> element

element
<ul>
<li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
<li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
<li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
<li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
<li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
<li>Project: Build a Django application with user authentication and database storage</li>
</ul> element

element

element
<h2>Integrating JavaScript and Design</h2> element

element
<ul>
<li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
<li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
<li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
<li>Using third-party APIs: Query external services like Google and Instagram</li>
<li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
<li>Project: Integrate front-end technologies for a more interactive Django application</li>
</ul> element

element

element
<h2>Expand Your Developer Toolkit</h2> element

element
<ul>
<li>Pair programming</li>
<li>Git strategies</li>
<li>Test-driven development</li>
<li>HTTP lifecycle</li>
<li>Computer science topics</li>
<li>Introduction to dev ops</li>
<li>Analytics and error reporting</li>
<li>Project: Work in a group to build a test-driven Django application</li>
</ul> element

element

element
<h2>AngularJS and Building Custom APIs</h2> element

element
<ul>
<li>Basics of AngularJS</li>
<li>Build a Basecamp clone with AngularJS</li>
<li>Building your own custom API with Django and Tastypie</li>
<li>Integrating Django with AngularJS</li>
<li>Final Project: Demonstrate mastery with Django and AngularJS</li>
</ul> element

element

element
<h2>Prepping for Life After Bootcamp</h2> element

element
<ul>
<li>Interview Prep</li>
<li>Presentation Prep</li>
<li>Development ecosystem</li>
</ul> element

element
<p><a href="#/2">Back to top</a></p> element

element
<section>
        <h2>What you'll be learning</h2>
        <p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p>
        <ul>
            <li><a href="#/2/1">Prework</a></li>
            <li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
            <li><a href="#/2/3">Integrating JavaScript and Design</a></li>
            <li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
            <li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
            <li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
        </ul>
    </section>
<section>
        <h2>Writing a File (Cont.)</h2>
        <div class="col-4">
            <br>
            <ul>
                <li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br><br><br><br><br></li>
                <li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br><br><br><br><br></li>
                <li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="3">
                <pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Context Manager</h2>
        <p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p>
        <p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p>
        <p>They are used to run certain functions before and after a block of code.</p>
        <br><br>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
                <li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
                <li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p>
        <p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p>
        <div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div>
        <p style="clear:both;"><br>Will become</p>
        <div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div>
        <p style="clear:both"><br>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p>
        <div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div>
    </section>
<section>
        <h2>Prework</h2>
        <p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p>
        <ul>
            <li>Command Line: Give your computer instructions like a real programmer</li>
            <li>HTML: Learn the basic building blocks of the front-facing web</li>
            <li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
            <li>Git: Version control is a lifesaver</li>
            <li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
            <li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
            <li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
        </ul>
    </section>
<section>
        <h2>Object-oriented Python and Beginner Django</h2>
        <ul>
            <li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
            <li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
            <li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
            <li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
            <li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
            <li>Project: Build a Django application with user authentication and database storage</li>
        </ul>
    </section>
<section>
        <h2>Integrating JavaScript and Design</h2>
        <ul>
            <li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
            <li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
            <li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
            <li>Using third-party APIs: Query external services like Google and Instagram</li>
            <li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
            <li>Project: Integrate front-end technologies for a more interactive Django application</li>
        </ul>
    </section>
<section class="titleSlide" data-background="#168eae">
                    <h1>
    File Manipulation
</h1>
                    <a id="yetiLogo" href="http://www.yetihq.com/"><img src="/static/img/yeti-power.png"></a>
                </section>
<section>
    <h2>Brief Python History</h2>
    <p>Python is a scripting language, which means at its core it has a bunch of functionality built in for operations like file manipulation.</p>
    <ul>
        <li>Python was created by Guido van Rossum, Benevolant Dictator for Life (BDFL), in the late 1980's.</li>
        <li>Python has released major versions 1, 2, and 3</li>
        <li>Version 3 of python had some backwards incompatible changes with version 2, so they also created 2.6 and 2.7.</li>
        <li>Many people still use python 2.7 over 3, especially because major operating systems have not converted over yet.</li>
        <li>The community is still slowly making the transition from python 2 to 3 even though 3 was released in December 2008.</li>
        <li>2.7 will be the last release in the version 2 line, it was released in July 2010.</li>
    </ul>
</section>

element
<section>
<h2>Directories and Files</h2>
<p>Python has a library called <code>os</code> which contains scripting utility functions.</p>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br/><br/></li>
<li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br/><br/></li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">import os

print os.getcwd()</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="7">
<pre><code class="python">
print os.getcwd()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<ul>
<li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
<li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
</ul>
</section> element

element

element
<h2>Directories and Files</h2> element

element
<p>Python has a library called <code>os</code> which contains scripting utility functions.</p> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br/><br/></li>
<li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br/><br/></li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">import os

print os.getcwd()</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="7">
<pre><code class="python">
print os.getcwd()
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<ul>
<li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
<li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
</ul> element

element
<section>
        <h2>Directories and Files</h2>
        <p>Python has a library called <code>os</code> which contains scripting utility functions.</p>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br><br><br></li>
                <li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br><br><br></li>
                <li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br><br></li>
                <li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br><br></li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">import os

print os.getcwd()</code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="3">
                <pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="7">
                <pre><code class="python">
print os.getcwd()
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Expand Your Developer Toolkit</h2>
        <ul>
            <li>Pair programming</li>
            <li>Git strategies</li>
            <li>Test-driven development</li>
            <li>HTTP lifecycle</li>
            <li>Computer science topics</li>
            <li>Introduction to dev ops</li>
            <li>Analytics and error reporting</li>
            <li>Project: Work in a group to build a test-driven Django application</li>
        </ul>
    </section>
<section>
        <h2>AngularJS and Building Custom APIs</h2>
        <ul>
            <li>Basics of AngularJS</li>
            <li>Build a Basecamp clone with AngularJS</li>
            <li>Building your own custom API with Django and Tastypie</li>
            <li>Integrating Django with AngularJS</li>
            <li>Final Project: Demonstrate mastery with Django and AngularJS</li>
        </ul>
    </section>
<section>
        <h2>Prepping for Life After Bootcamp</h2>
        <ul>
            <li>Interview Prep</li>
            <li>Presentation Prep</li>
            <li>Development ecosystem</li>
        </ul>
        <p><a href="#/2">Back to top</a></p>
    </section>
<section>
    <h2>More than an education</h2>
    <p>There are a lot of bootcamps out there. At RocketU, you'll be surrounded by the 170+ amazing tech startups at RocketSpace.</p>
    <br>
    <img src="/static/img/rocketspace-name-logo-large-300x116.png" id="rocketSpaceLogo">
</section>

element
<section>
<h2>A network of your own</h2>
<p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p>
</section> element

element
<section>
<h2>RocketSpace staff</h2>
</section> element

element
<section>
<h2>Your instructors</h2>
<h4>Yeti</h4>
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div>
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div>
<div class="footer">
</div>
</section> element

element
<h2>A network of your own</h2> element

element
<p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p> element

element

element
<h2>RocketSpace staff</h2> element

element

element
<h2>Your instructors</h2> element

element
<h4>Yeti</h4> element

element
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div> element

element
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div> element

element
<div class="footer">
</div> element

element

element
<h2>Your classmates</h2> element

element
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul> element

element
<p><a href="#/4">Back to top</a></p> element

element

element
<h2>Prove you can program.</h2> element

element
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p> element

element
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p> element

element
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul> element

element
<section>
        <h2>A network of your own</h2>
        <p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <ul>
            <li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
            <li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
        </ul>
    </section>

element
<section>
<h2>Reading a File</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
<li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
<li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
<li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
<li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre>

Hello world!
Hello universe!
                </pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="4">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="6">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Reading a File (Cont.)</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
<li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
<li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
<li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="2">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p>
<ul>
<li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
<li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
<li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
<li>Create new text files for testing out your function!</li>
</ul>
</section> element

element

element
<h2>Reading a File</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
<li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
<li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
<li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
<li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre>

Hello world!
Hello universe!
                </pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="4">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="6">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
</div>
</div> element

element

element
<h2>Reading a File (Cont.)</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
<li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
<li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
<li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="2">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p> element

element
<ul>
<li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
<li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
<li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
<li>Create new text files for testing out your function!</li>
</ul> element

element
<section>
        <h2>Reading a File</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
                <li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
                <li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
                <li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
                <li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre>

Hello world!
Hello universe!
                </pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="4">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="6">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>RocketSpace staff</h2>
    </section>

element
<h2>Your instructors</h2> element

element
<h4>Yeti</h4> element

element
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div> element

element
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div> element

element
<div class="footer">
</div> element

element

element
<h2>Your classmates</h2> element

element
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul> element

element
<p><a href="#/4">Back to top</a></p> element

element

element
<h2>Prove you can program.</h2> element

element
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p> element

element
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p> element

element
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul> element

element
<section>
        <h2>Your classmates</h2>
        <ul>
            <li>A brain</li>
            <li>An athlete</li>
            <li>A basket case</li>
            <li>A princess</li>
            <li>And a criminal</li>
        </ul>
        <p><a href="#/4">Back to top</a></p>
    </section>
<section>
        <h2>Reading a File (Cont.)</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
                <li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
                <li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
                <li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="2">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p>
        <ul>
            <li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
            <li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
            <li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
            <li>Create new text files for testing out your function!</li>
        </ul>
    </section>

element
<section>
<h2>Writing a File</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
<li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
<li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Writing a File (Cont.)</h2>
<div class="col-4">
<br/>
<ul>
<li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Context Manager</h2>
<p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p>
<p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p>
<p>They are used to run certain functions before and after a block of code.</p>
<br/><br/>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
<li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
<li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p>
<p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p>
<div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div>
<p style="clear:both;"><br/>Will become</p>
<div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div>
<p style="clear:both"><br/>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p>
<div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div>
</section> element

element

element
<h2>Writing a File</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
<li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
<li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
</div>
</div> element

element

element
<h2>Writing a File (Cont.)</h2> element

element
<div class="col-4">
<br/>
<ul>
<li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
</div>
</div> element

element

element
<h2>Context Manager</h2> element

element
<p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p> element

element
<p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p> element

element
<p>They are used to run certain functions before and after a block of code.</p> element

element
<br/> element
<br/> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
<li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
<li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p> element

element
<p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p> element

element
<div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div> element

element
<p style="clear:both;"><br/>Will become</p> element

element
<div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div> element

element
<p style="clear:both"><br/>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p> element

element
<div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div> element

element
<section>
        <h2>Writing a File</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
                <li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
                <li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
            </div>
        </div>
    </section>
<section>
    <h2>Prove you can program.</h2>
    <p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
    <p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
    <ul>
        <li><a target="_blank" href="http://codingbat.com/python">Coding Bat</a></li>
        <li><a target="_blank" href="http://www.pythonchallenge.com/">Python Challenge</a></li>
        <li><a target="_blank" href="http://www.coderbyte.com/">Coderbyte</a></li>
    </ul>
</section>
<section>
    <h2>Learn web development. Build awesome things.</h2>
    <p>
        You quit your job, you told your friends and family you're doing something crazy, maybe you moved here. You're ready to learn, intensively, for the next twelve weeks. By the time you're done, you'll be able to build pretty much anything you see on the internet.
    </p>
</section>

element
<section>
<h2>What you'll be learning</h2>
<p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p>
<ul>
<li><a href="#/2/1">Prework</a></li>
<li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
<li><a href="#/2/3">Integrating JavaScript and Design</a></li>
<li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
<li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
<li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
</ul>
</section> element

element
<section>
<h2>Prework</h2>
<p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p>
<ul>
<li>Command Line: Give your computer instructions like a real programmer</li>
<li>HTML: Learn the basic building blocks of the front-facing web</li>
<li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
<li>Git: Version control is a lifesaver</li>
<li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
<li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
<li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
</ul>
</section> element

element
<section>
<h2>Object-oriented Python and Beginner Django</h2>
<ul>
<li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
<li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
<li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
<li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
<li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
<li>Project: Build a Django application with user authentication and database storage</li>
</ul>
</section> element

element
<section>
<h2>Integrating JavaScript and Design</h2>
<ul>
<li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
<li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
<li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
<li>Using third-party APIs: Query external services like Google and Instagram</li>
<li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
<li>Project: Integrate front-end technologies for a more interactive Django application</li>
</ul>
</section> element

element
<section>
<h2>Expand Your Developer Toolkit</h2>
<ul>
<li>Pair programming</li>
<li>Git strategies</li>
<li>Test-driven development</li>
<li>HTTP lifecycle</li>
<li>Computer science topics</li>
<li>Introduction to dev ops</li>
<li>Analytics and error reporting</li>
<li>Project: Work in a group to build a test-driven Django application</li>
</ul>
</section> element

element
<section>
<h2>AngularJS and Building Custom APIs</h2>
<ul>
<li>Basics of AngularJS</li>
<li>Build a Basecamp clone with AngularJS</li>
<li>Building your own custom API with Django and Tastypie</li>
<li>Integrating Django with AngularJS</li>
<li>Final Project: Demonstrate mastery with Django and AngularJS</li>
</ul>
</section> element

element
<section>
<h2>Prepping for Life After Bootcamp</h2>
<ul>
<li>Interview Prep</li>
<li>Presentation Prep</li>
<li>Development ecosystem</li>
</ul>
<p><a href="#/2">Back to top</a></p>
</section> element

element

element
<h2>What you'll be learning</h2> element

element
<p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p> element

element
<ul>
<li><a href="#/2/1">Prework</a></li>
<li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
<li><a href="#/2/3">Integrating JavaScript and Design</a></li>
<li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
<li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
<li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
</ul> element

element

element
<h2>Prework</h2> element

element
<p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p> element

element
<ul>
<li>Command Line: Give your computer instructions like a real programmer</li>
<li>HTML: Learn the basic building blocks of the front-facing web</li>
<li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
<li>Git: Version control is a lifesaver</li>
<li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
<li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
<li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
</ul> element

element

element
<h2>Object-oriented Python and Beginner Django</h2> element

element
<ul>
<li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
<li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
<li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
<li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
<li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
<li>Project: Build a Django application with user authentication and database storage</li>
</ul> element

element

element
<h2>Integrating JavaScript and Design</h2> element

element
<ul>
<li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
<li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
<li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
<li>Using third-party APIs: Query external services like Google and Instagram</li>
<li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
<li>Project: Integrate front-end technologies for a more interactive Django application</li>
</ul> element

element

element
<h2>Expand Your Developer Toolkit</h2> element

element
<ul>
<li>Pair programming</li>
<li>Git strategies</li>
<li>Test-driven development</li>
<li>HTTP lifecycle</li>
<li>Computer science topics</li>
<li>Introduction to dev ops</li>
<li>Analytics and error reporting</li>
<li>Project: Work in a group to build a test-driven Django application</li>
</ul> element

element

element
<h2>AngularJS and Building Custom APIs</h2> element

element
<ul>
<li>Basics of AngularJS</li>
<li>Build a Basecamp clone with AngularJS</li>
<li>Building your own custom API with Django and Tastypie</li>
<li>Integrating Django with AngularJS</li>
<li>Final Project: Demonstrate mastery with Django and AngularJS</li>
</ul> element

element

element
<h2>Prepping for Life After Bootcamp</h2> element

element
<ul>
<li>Interview Prep</li>
<li>Presentation Prep</li>
<li>Development ecosystem</li>
</ul> element

element
<p><a href="#/2">Back to top</a></p> element

element
<section>
        <h2>What you'll be learning</h2>
        <p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p>
        <ul>
            <li><a href="#/2/1">Prework</a></li>
            <li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
            <li><a href="#/2/3">Integrating JavaScript and Design</a></li>
            <li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
            <li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
            <li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
        </ul>
    </section>
<section>
        <h2>Writing a File (Cont.)</h2>
        <div class="col-4">
            <br>
            <ul>
                <li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br><br><br><br><br></li>
                <li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br><br><br><br><br></li>
                <li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="3">
                <pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Context Manager</h2>
        <p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p>
        <p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p>
        <p>They are used to run certain functions before and after a block of code.</p>
        <br><br>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
                <li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
                <li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p>
        <p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p>
        <div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div>
        <p style="clear:both;"><br>Will become</p>
        <div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div>
        <p style="clear:both"><br>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p>
        <div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div>
    </section>
<section>
        <h2>Prework</h2>
        <p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p>
        <ul>
            <li>Command Line: Give your computer instructions like a real programmer</li>
            <li>HTML: Learn the basic building blocks of the front-facing web</li>
            <li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
            <li>Git: Version control is a lifesaver</li>
            <li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
            <li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
            <li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
        </ul>
    </section>
<section>
        <h2>Object-oriented Python and Beginner Django</h2>
        <ul>
            <li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
            <li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
            <li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
            <li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
            <li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
            <li>Project: Build a Django application with user authentication and database storage</li>
        </ul>
    </section>
<section>
        <h2>Integrating JavaScript and Design</h2>
        <ul>
            <li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
            <li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
            <li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
            <li>Using third-party APIs: Query external services like Google and Instagram</li>
            <li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
            <li>Project: Integrate front-end technologies for a more interactive Django application</li>
        </ul>
    </section>
<section>
        <h2>Expand Your Developer Toolkit</h2>
        <ul>
            <li>Pair programming</li>
            <li>Git strategies</li>
            <li>Test-driven development</li>
            <li>HTTP lifecycle</li>
            <li>Computer science topics</li>
            <li>Introduction to dev ops</li>
            <li>Analytics and error reporting</li>
            <li>Project: Work in a group to build a test-driven Django application</li>
        </ul>
    </section>
<section class="titleSlide" data-background="#168eae">
                    <h1>
    File Manipulation
</h1>
                    <a id="yetiLogo" href="http://www.yetihq.com/"><img src="/static/img/yeti-power.png"></a>
                </section>
<section>
    <h2>Brief Python History</h2>
    <p>Python is a scripting language, which means at its core it has a bunch of functionality built in for operations like file manipulation.</p>
    <ul>
        <li>Python was created by Guido van Rossum, Benevolant Dictator for Life (BDFL), in the late 1980's.</li>
        <li>Python has released major versions 1, 2, and 3</li>
        <li>Version 3 of python had some backwards incompatible changes with version 2, so they also created 2.6 and 2.7.</li>
        <li>Many people still use python 2.7 over 3, especially because major operating systems have not converted over yet.</li>
        <li>The community is still slowly making the transition from python 2 to 3 even though 3 was released in December 2008.</li>
        <li>2.7 will be the last release in the version 2 line, it was released in July 2010.</li>
    </ul>
</section>

element
<section>
<h2>Directories and Files</h2>
<p>Python has a library called <code>os</code> which contains scripting utility functions.</p>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br/><br/></li>
<li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br/><br/></li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">import os

print os.getcwd()</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="7">
<pre><code class="python">
print os.getcwd()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<ul>
<li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
<li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
</ul>
</section> element

element

element
<h2>Directories and Files</h2> element

element
<p>Python has a library called <code>os</code> which contains scripting utility functions.</p> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br/><br/></li>
<li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br/><br/></li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">import os

print os.getcwd()</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="7">
<pre><code class="python">
print os.getcwd()
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<ul>
<li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
<li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
</ul> element

element
<section>
        <h2>Directories and Files</h2>
        <p>Python has a library called <code>os</code> which contains scripting utility functions.</p>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br><br><br></li>
                <li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br><br><br></li>
                <li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br><br></li>
                <li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br><br></li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">import os

print os.getcwd()</code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="3">
                <pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="7">
                <pre><code class="python">
print os.getcwd()
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>AngularJS and Building Custom APIs</h2>
        <ul>
            <li>Basics of AngularJS</li>
            <li>Build a Basecamp clone with AngularJS</li>
            <li>Building your own custom API with Django and Tastypie</li>
            <li>Integrating Django with AngularJS</li>
            <li>Final Project: Demonstrate mastery with Django and AngularJS</li>
        </ul>
    </section>
<section>
        <h2>Prepping for Life After Bootcamp</h2>
        <ul>
            <li>Interview Prep</li>
            <li>Presentation Prep</li>
            <li>Development ecosystem</li>
        </ul>
        <p><a href="#/2">Back to top</a></p>
    </section>
<section>
    <h2>More than an education</h2>
    <p>There are a lot of bootcamps out there. At RocketU, you'll be surrounded by the 170+ amazing tech startups at RocketSpace.</p>
    <br>
    <img src="/static/img/rocketspace-name-logo-large-300x116.png" id="rocketSpaceLogo">
</section>

element
<section>
<h2>A network of your own</h2>
<p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p>
</section> element

element
<section>
<h2>RocketSpace staff</h2>
</section> element

element
<section>
<h2>Your instructors</h2>
<h4>Yeti</h4>
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div>
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div>
<div class="footer">
</div>
</section> element

element
<h2>A network of your own</h2> element

element
<p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p> element

element

element
<h2>RocketSpace staff</h2> element

element

element
<h2>Your instructors</h2> element

element
<h4>Yeti</h4> element

element
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div> element

element
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div> element

element
<div class="footer">
</div> element

element

element
<h2>Your classmates</h2> element

element
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul> element

element
<p><a href="#/4">Back to top</a></p> element

element

element
<h2>Prove you can program.</h2> element

element
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p> element

element
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p> element

element
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul> element

element
<section>
        <h2>A network of your own</h2>
        <p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <ul>
            <li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
            <li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
        </ul>
    </section>

element
<section>
<h2>Reading a File</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
<li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
<li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
<li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
<li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre>

Hello world!
Hello universe!
                </pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="4">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="6">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Reading a File (Cont.)</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
<li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
<li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
<li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="2">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p>
<ul>
<li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
<li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
<li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
<li>Create new text files for testing out your function!</li>
</ul>
</section> element

element

element
<h2>Reading a File</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
<li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
<li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
<li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
<li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre>

Hello world!
Hello universe!
                </pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="4">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="6">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
</div>
</div> element

element

element
<h2>Reading a File (Cont.)</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
<li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
<li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
<li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="2">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p> element

element
<ul>
<li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
<li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
<li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
<li>Create new text files for testing out your function!</li>
</ul> element

element
<section>
        <h2>Reading a File</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
                <li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
                <li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
                <li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
                <li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre>

Hello world!
Hello universe!
                </pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="4">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="6">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>RocketSpace staff</h2>
    </section>

element
<h2>Your instructors</h2> element

element
<h4>Yeti</h4> element

element
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div> element

element
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div> element

element
<div class="footer">
</div> element

element

element
<h2>Your classmates</h2> element

element
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul> element

element
<p><a href="#/4">Back to top</a></p> element

element

element
<h2>Prove you can program.</h2> element

element
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p> element

element
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p> element

element
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul> element

element
<section>
        <h2>Your classmates</h2>
        <ul>
            <li>A brain</li>
            <li>An athlete</li>
            <li>A basket case</li>
            <li>A princess</li>
            <li>And a criminal</li>
        </ul>
        <p><a href="#/4">Back to top</a></p>
    </section>
<section>
    <h2>Prove you can program.</h2>
    <p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
    <p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
    <ul>
        <li><a target="_blank" href="http://codingbat.com/python">Coding Bat</a></li>
        <li><a target="_blank" href="http://www.pythonchallenge.com/">Python Challenge</a></li>
        <li><a target="_blank" href="http://www.coderbyte.com/">Coderbyte</a></li>
    </ul>
</section>
<section>
    <h2>Learn web development. Build awesome things.</h2>
    <p>
        You quit your job, you told your friends and family you're doing something crazy, maybe you moved here. You're ready to learn, intensively, for the next twelve weeks. By the time you're done, you'll be able to build pretty much anything you see on the internet.
    </p>
</section>
<section>
        <h2>Reading a File (Cont.)</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
                <li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
                <li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
                <li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="2">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p>
        <ul>
            <li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
            <li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
            <li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
            <li>Create new text files for testing out your function!</li>
        </ul>
    </section>

element
<section>
<h2>Writing a File</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
<li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
<li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Writing a File (Cont.)</h2>
<div class="col-4">
<br/>
<ul>
<li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Context Manager</h2>
<p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p>
<p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p>
<p>They are used to run certain functions before and after a block of code.</p>
<br/><br/>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
<li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
<li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p>
<p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p>
<div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div>
<p style="clear:both;"><br/>Will become</p>
<div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div>
<p style="clear:both"><br/>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p>
<div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div>
</section> element

element

element
<h2>Writing a File</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
<li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
<li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
</div>
</div> element

element

element
<h2>Writing a File (Cont.)</h2> element

element
<div class="col-4">
<br/>
<ul>
<li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
</div>
</div> element

element

element
<h2>Context Manager</h2> element

element
<p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p> element

element
<p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p> element

element
<p>They are used to run certain functions before and after a block of code.</p> element

element
<br/> element
<br/> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
<li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
<li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p> element

element
<p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p> element

element
<div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div> element

element
<p style="clear:both;"><br/>Will become</p> element

element
<div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div> element

element
<p style="clear:both"><br/>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p> element

element
<div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div> element

element
<section>
        <h2>Writing a File</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
                <li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
                <li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
            </div>
        </div>
    </section>

element
<section>
<h2>What you'll be learning</h2>
<p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p>
<ul>
<li><a href="#/2/1">Prework</a></li>
<li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
<li><a href="#/2/3">Integrating JavaScript and Design</a></li>
<li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
<li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
<li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
</ul>
</section> element

element
<section>
<h2>Prework</h2>
<p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p>
<ul>
<li>Command Line: Give your computer instructions like a real programmer</li>
<li>HTML: Learn the basic building blocks of the front-facing web</li>
<li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
<li>Git: Version control is a lifesaver</li>
<li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
<li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
<li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
</ul>
</section> element

element
<section>
<h2>Object-oriented Python and Beginner Django</h2>
<ul>
<li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
<li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
<li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
<li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
<li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
<li>Project: Build a Django application with user authentication and database storage</li>
</ul>
</section> element

element
<section>
<h2>Integrating JavaScript and Design</h2>
<ul>
<li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
<li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
<li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
<li>Using third-party APIs: Query external services like Google and Instagram</li>
<li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
<li>Project: Integrate front-end technologies for a more interactive Django application</li>
</ul>
</section> element

element
<section>
<h2>Expand Your Developer Toolkit</h2>
<ul>
<li>Pair programming</li>
<li>Git strategies</li>
<li>Test-driven development</li>
<li>HTTP lifecycle</li>
<li>Computer science topics</li>
<li>Introduction to dev ops</li>
<li>Analytics and error reporting</li>
<li>Project: Work in a group to build a test-driven Django application</li>
</ul>
</section> element

element
<section>
<h2>AngularJS and Building Custom APIs</h2>
<ul>
<li>Basics of AngularJS</li>
<li>Build a Basecamp clone with AngularJS</li>
<li>Building your own custom API with Django and Tastypie</li>
<li>Integrating Django with AngularJS</li>
<li>Final Project: Demonstrate mastery with Django and AngularJS</li>
</ul>
</section> element

element
<section>
<h2>Prepping for Life After Bootcamp</h2>
<ul>
<li>Interview Prep</li>
<li>Presentation Prep</li>
<li>Development ecosystem</li>
</ul>
<p><a href="#/2">Back to top</a></p>
</section> element

element

element
<h2>What you'll be learning</h2> element

element
<p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p> element

element
<ul>
<li><a href="#/2/1">Prework</a></li>
<li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
<li><a href="#/2/3">Integrating JavaScript and Design</a></li>
<li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
<li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
<li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
</ul> element

element

element
<h2>Prework</h2> element

element
<p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p> element

element
<ul>
<li>Command Line: Give your computer instructions like a real programmer</li>
<li>HTML: Learn the basic building blocks of the front-facing web</li>
<li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
<li>Git: Version control is a lifesaver</li>
<li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
<li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
<li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
</ul> element

element

element
<h2>Object-oriented Python and Beginner Django</h2> element

element
<ul>
<li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
<li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
<li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
<li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
<li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
<li>Project: Build a Django application with user authentication and database storage</li>
</ul> element

element

element
<h2>Integrating JavaScript and Design</h2> element

element
<ul>
<li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
<li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
<li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
<li>Using third-party APIs: Query external services like Google and Instagram</li>
<li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
<li>Project: Integrate front-end technologies for a more interactive Django application</li>
</ul> element

element

element
<h2>Expand Your Developer Toolkit</h2> element

element
<ul>
<li>Pair programming</li>
<li>Git strategies</li>
<li>Test-driven development</li>
<li>HTTP lifecycle</li>
<li>Computer science topics</li>
<li>Introduction to dev ops</li>
<li>Analytics and error reporting</li>
<li>Project: Work in a group to build a test-driven Django application</li>
</ul> element

element

element
<h2>AngularJS and Building Custom APIs</h2> element

element
<ul>
<li>Basics of AngularJS</li>
<li>Build a Basecamp clone with AngularJS</li>
<li>Building your own custom API with Django and Tastypie</li>
<li>Integrating Django with AngularJS</li>
<li>Final Project: Demonstrate mastery with Django and AngularJS</li>
</ul> element

element

element
<h2>Prepping for Life After Bootcamp</h2> element

element
<ul>
<li>Interview Prep</li>
<li>Presentation Prep</li>
<li>Development ecosystem</li>
</ul> element

element
<p><a href="#/2">Back to top</a></p> element

element
<section>
        <h2>What you'll be learning</h2>
        <p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p>
        <ul>
            <li><a href="#/2/1">Prework</a></li>
            <li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
            <li><a href="#/2/3">Integrating JavaScript and Design</a></li>
            <li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
            <li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
            <li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
        </ul>
    </section>
<section>
        <h2>Writing a File (Cont.)</h2>
        <div class="col-4">
            <br>
            <ul>
                <li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br><br><br><br><br></li>
                <li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br><br><br><br><br></li>
                <li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="3">
                <pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Context Manager</h2>
        <p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p>
        <p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p>
        <p>They are used to run certain functions before and after a block of code.</p>
        <br><br>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
                <li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
                <li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Prework</h2>
        <p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p>
        <ul>
            <li>Command Line: Give your computer instructions like a real programmer</li>
            <li>HTML: Learn the basic building blocks of the front-facing web</li>
            <li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
            <li>Git: Version control is a lifesaver</li>
            <li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
            <li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
            <li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
        </ul>
    </section>
<section>
        <h2>Object-oriented Python and Beginner Django</h2>
        <ul>
            <li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
            <li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
            <li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
            <li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
            <li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
            <li>Project: Build a Django application with user authentication and database storage</li>
        </ul>
    </section>
<section>
        <h2>Integrating JavaScript and Design</h2>
        <ul>
            <li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
            <li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
            <li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
            <li>Using third-party APIs: Query external services like Google and Instagram</li>
            <li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
            <li>Project: Integrate front-end technologies for a more interactive Django application</li>
        </ul>
    </section>
<section>
        <h2>Expand Your Developer Toolkit</h2>
        <ul>
            <li>Pair programming</li>
            <li>Git strategies</li>
            <li>Test-driven development</li>
            <li>HTTP lifecycle</li>
            <li>Computer science topics</li>
            <li>Introduction to dev ops</li>
            <li>Analytics and error reporting</li>
            <li>Project: Work in a group to build a test-driven Django application</li>
        </ul>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p>
        <p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p>
        <div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div>
        <p style="clear:both;"><br>Will become</p>
        <div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div>
        <p style="clear:both"><br>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p>
        <div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div>
    </section>
<section class="titleSlide" data-background="#168eae">
                    <h1>
    File Manipulation
</h1>
                    <a id="yetiLogo" href="http://www.yetihq.com/"><img src="/static/img/yeti-power.png"></a>
                </section>
<section>
    <h2>Brief Python History</h2>
    <p>Python is a scripting language, which means at its core it has a bunch of functionality built in for operations like file manipulation.</p>
    <ul>
        <li>Python was created by Guido van Rossum, Benevolant Dictator for Life (BDFL), in the late 1980's.</li>
        <li>Python has released major versions 1, 2, and 3</li>
        <li>Version 3 of python had some backwards incompatible changes with version 2, so they also created 2.6 and 2.7.</li>
        <li>Many people still use python 2.7 over 3, especially because major operating systems have not converted over yet.</li>
        <li>The community is still slowly making the transition from python 2 to 3 even though 3 was released in December 2008.</li>
        <li>2.7 will be the last release in the version 2 line, it was released in July 2010.</li>
    </ul>
</section>

element
<section>
<h2>Directories and Files</h2>
<p>Python has a library called <code>os</code> which contains scripting utility functions.</p>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br/><br/></li>
<li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br/><br/></li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">import os

print os.getcwd()</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="7">
<pre><code class="python">
print os.getcwd()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<ul>
<li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
<li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
</ul>
</section> element

element

element
<h2>Directories and Files</h2> element

element
<p>Python has a library called <code>os</code> which contains scripting utility functions.</p> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br/><br/></li>
<li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br/><br/></li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">import os

print os.getcwd()</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="7">
<pre><code class="python">
print os.getcwd()
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<ul>
<li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
<li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
</ul> element

element
<section>
        <h2>Directories and Files</h2>
        <p>Python has a library called <code>os</code> which contains scripting utility functions.</p>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br><br><br></li>
                <li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br><br><br></li>
                <li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br><br></li>
                <li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br><br></li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">import os

print os.getcwd()</code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="3">
                <pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="7">
                <pre><code class="python">
print os.getcwd()
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>AngularJS and Building Custom APIs</h2>
        <ul>
            <li>Basics of AngularJS</li>
            <li>Build a Basecamp clone with AngularJS</li>
            <li>Building your own custom API with Django and Tastypie</li>
            <li>Integrating Django with AngularJS</li>
            <li>Final Project: Demonstrate mastery with Django and AngularJS</li>
        </ul>
    </section>
<section>
        <h2>Prepping for Life After Bootcamp</h2>
        <ul>
            <li>Interview Prep</li>
            <li>Presentation Prep</li>
            <li>Development ecosystem</li>
        </ul>
        <p><a href="#/2">Back to top</a></p>
    </section>
<section>
    <h2>More than an education</h2>
    <p>There are a lot of bootcamps out there. At RocketU, you'll be surrounded by the 170+ amazing tech startups at RocketSpace.</p>
    <br>
    <img src="/static/img/rocketspace-name-logo-large-300x116.png" id="rocketSpaceLogo">
</section>

element
<section>
<h2>A network of your own</h2>
<p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p>
</section> element

element
<section>
<h2>RocketSpace staff</h2>
</section> element

element
<section>
<h2>Your instructors</h2>
<h4>Yeti</h4>
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div>
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div>
<div class="footer">
</div>
</section> element

element
<h2>A network of your own</h2> element

element
<p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p> element

element

element
<h2>RocketSpace staff</h2> element

element

element
<h2>Your instructors</h2> element

element
<h4>Yeti</h4> element

element
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div> element

element
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div> element

element
<div class="footer">
</div> element

element

element
<h2>Your classmates</h2> element

element
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul> element

element
<p><a href="#/4">Back to top</a></p> element

element

element
<h2>Prove you can program.</h2> element

element
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p> element

element
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p> element

element
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul> element

element
<section>
        <h2>A network of your own</h2>
        <p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <ul>
            <li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
            <li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
        </ul>
    </section>

element
<section>
<h2>Reading a File</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
<li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
<li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
<li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
<li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre>

Hello world!
Hello universe!
                </pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="4">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="6">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Reading a File (Cont.)</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
<li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
<li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
<li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="2">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p>
<ul>
<li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
<li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
<li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
<li>Create new text files for testing out your function!</li>
</ul>
</section> element

element

element
<h2>Reading a File</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
<li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
<li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
<li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
<li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre>

Hello world!
Hello universe!
                </pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="4">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="6">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
</div>
</div> element

element

element
<h2>Reading a File (Cont.)</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
<li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
<li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
<li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="2">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p> element

element
<ul>
<li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
<li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
<li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
<li>Create new text files for testing out your function!</li>
</ul> element

element
<section>
        <h2>Reading a File</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
                <li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
                <li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
                <li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
                <li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre>

Hello world!
Hello universe!
                </pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="4">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="6">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>RocketSpace staff</h2>
    </section>

element
<h2>Your instructors</h2> element

element
<h4>Yeti</h4> element

element
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div> element

element
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div> element

element
<div class="footer">
</div> element

element

element
<h2>Your classmates</h2> element

element
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul> element

element
<p><a href="#/4">Back to top</a></p> element

element

element
<h2>Prove you can program.</h2> element

element
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p> element

element
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p> element

element
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul> element

element
<section>
        <h2>Your classmates</h2>
        <ul>
            <li>A brain</li>
            <li>An athlete</li>
            <li>A basket case</li>
            <li>A princess</li>
            <li>And a criminal</li>
        </ul>
        <p><a href="#/4">Back to top</a></p>
    </section>
<section>
    <h2>Prove you can program.</h2>
    <p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
    <p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
    <ul>
        <li><a target="_blank" href="http://codingbat.com/python">Coding Bat</a></li>
        <li><a target="_blank" href="http://www.pythonchallenge.com/">Python Challenge</a></li>
        <li><a target="_blank" href="http://www.coderbyte.com/">Coderbyte</a></li>
    </ul>
</section>
<section>
    <h2>Learn web development. Build awesome things.</h2>
    <p>
        You quit your job, you told your friends and family you're doing something crazy, maybe you moved here. You're ready to learn, intensively, for the next twelve weeks. By the time you're done, you'll be able to build pretty much anything you see on the internet.
    </p>
</section>
<section>
        <h2>Reading a File (Cont.)</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
                <li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
                <li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
                <li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="2">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p>
        <ul>
            <li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
            <li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
            <li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
            <li>Create new text files for testing out your function!</li>
        </ul>
    </section>

element
<section>
<h2>Writing a File</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
<li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
<li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Writing a File (Cont.)</h2>
<div class="col-4">
<br/>
<ul>
<li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Context Manager</h2>
<p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p>
<p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p>
<p>They are used to run certain functions before and after a block of code.</p>
<br/><br/>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
<li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
<li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p>
<p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p>
<div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div>
<p style="clear:both;"><br/>Will become</p>
<div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div>
<p style="clear:both"><br/>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p>
<div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div>
</section> element

element

element
<h2>Writing a File</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
<li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
<li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
</div>
</div> element

element

element
<h2>Writing a File (Cont.)</h2> element

element
<div class="col-4">
<br/>
<ul>
<li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
</div>
</div> element

element

element
<h2>Context Manager</h2> element

element
<p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p> element

element
<p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p> element

element
<p>They are used to run certain functions before and after a block of code.</p> element

element
<br/> element
<br/> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
<li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
<li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p> element

element
<p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p> element

element
<div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div> element

element
<p style="clear:both;"><br/>Will become</p> element

element
<div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div> element

element
<p style="clear:both"><br/>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p> element

element
<div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div> element

element
<section>
        <h2>Writing a File</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
                <li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
                <li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
            </div>
        </div>
    </section>

element
<section>
<h2>What you'll be learning</h2>
<p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p>
<ul>
<li><a href="#/2/1">Prework</a></li>
<li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
<li><a href="#/2/3">Integrating JavaScript and Design</a></li>
<li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
<li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
<li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
</ul>
</section> element

element
<section>
<h2>Prework</h2>
<p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p>
<ul>
<li>Command Line: Give your computer instructions like a real programmer</li>
<li>HTML: Learn the basic building blocks of the front-facing web</li>
<li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
<li>Git: Version control is a lifesaver</li>
<li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
<li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
<li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
</ul>
</section> element

element
<section>
<h2>Object-oriented Python and Beginner Django</h2>
<ul>
<li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
<li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
<li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
<li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
<li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
<li>Project: Build a Django application with user authentication and database storage</li>
</ul>
</section> element

element
<section>
<h2>Integrating JavaScript and Design</h2>
<ul>
<li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
<li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
<li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
<li>Using third-party APIs: Query external services like Google and Instagram</li>
<li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
<li>Project: Integrate front-end technologies for a more interactive Django application</li>
</ul>
</section> element

element
<section>
<h2>Expand Your Developer Toolkit</h2>
<ul>
<li>Pair programming</li>
<li>Git strategies</li>
<li>Test-driven development</li>
<li>HTTP lifecycle</li>
<li>Computer science topics</li>
<li>Introduction to dev ops</li>
<li>Analytics and error reporting</li>
<li>Project: Work in a group to build a test-driven Django application</li>
</ul>
</section> element

element
<section>
<h2>AngularJS and Building Custom APIs</h2>
<ul>
<li>Basics of AngularJS</li>
<li>Build a Basecamp clone with AngularJS</li>
<li>Building your own custom API with Django and Tastypie</li>
<li>Integrating Django with AngularJS</li>
<li>Final Project: Demonstrate mastery with Django and AngularJS</li>
</ul>
</section> element

element
<section>
<h2>Prepping for Life After Bootcamp</h2>
<ul>
<li>Interview Prep</li>
<li>Presentation Prep</li>
<li>Development ecosystem</li>
</ul>
<p><a href="#/2">Back to top</a></p>
</section> element

element

element
<h2>What you'll be learning</h2> element

element
<p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p> element

element
<ul>
<li><a href="#/2/1">Prework</a></li>
<li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
<li><a href="#/2/3">Integrating JavaScript and Design</a></li>
<li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
<li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
<li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
</ul> element

element

element
<h2>Prework</h2> element

element
<p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p> element

element
<ul>
<li>Command Line: Give your computer instructions like a real programmer</li>
<li>HTML: Learn the basic building blocks of the front-facing web</li>
<li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
<li>Git: Version control is a lifesaver</li>
<li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
<li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
<li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
</ul> element

element

element
<h2>Object-oriented Python and Beginner Django</h2> element

element
<ul>
<li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
<li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
<li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
<li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
<li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
<li>Project: Build a Django application with user authentication and database storage</li>
</ul> element

element

element
<h2>Integrating JavaScript and Design</h2> element

element
<ul>
<li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
<li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
<li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
<li>Using third-party APIs: Query external services like Google and Instagram</li>
<li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
<li>Project: Integrate front-end technologies for a more interactive Django application</li>
</ul> element

element

element
<h2>Expand Your Developer Toolkit</h2> element

element
<ul>
<li>Pair programming</li>
<li>Git strategies</li>
<li>Test-driven development</li>
<li>HTTP lifecycle</li>
<li>Computer science topics</li>
<li>Introduction to dev ops</li>
<li>Analytics and error reporting</li>
<li>Project: Work in a group to build a test-driven Django application</li>
</ul> element

element

element
<h2>AngularJS and Building Custom APIs</h2> element

element
<ul>
<li>Basics of AngularJS</li>
<li>Build a Basecamp clone with AngularJS</li>
<li>Building your own custom API with Django and Tastypie</li>
<li>Integrating Django with AngularJS</li>
<li>Final Project: Demonstrate mastery with Django and AngularJS</li>
</ul> element

element

element
<h2>Prepping for Life After Bootcamp</h2> element

element
<ul>
<li>Interview Prep</li>
<li>Presentation Prep</li>
<li>Development ecosystem</li>
</ul> element

element
<p><a href="#/2">Back to top</a></p> element

element
<section>
        <h2>What you'll be learning</h2>
        <p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p>
        <ul>
            <li><a href="#/2/1">Prework</a></li>
            <li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
            <li><a href="#/2/3">Integrating JavaScript and Design</a></li>
            <li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
            <li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
            <li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
        </ul>
    </section>
<section>
        <h2>Writing a File (Cont.)</h2>
        <div class="col-4">
            <br>
            <ul>
                <li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br><br><br><br><br></li>
                <li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br><br><br><br><br></li>
                <li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="3">
                <pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Context Manager</h2>
        <p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p>
        <p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p>
        <p>They are used to run certain functions before and after a block of code.</p>
        <br><br>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
                <li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
                <li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Prework</h2>
        <p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p>
        <ul>
            <li>Command Line: Give your computer instructions like a real programmer</li>
            <li>HTML: Learn the basic building blocks of the front-facing web</li>
            <li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
            <li>Git: Version control is a lifesaver</li>
            <li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
            <li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
            <li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
        </ul>
    </section>
<section>
        <h2>Object-oriented Python and Beginner Django</h2>
        <ul>
            <li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
            <li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
            <li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
            <li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
            <li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
            <li>Project: Build a Django application with user authentication and database storage</li>
        </ul>
    </section>
<section>
        <h2>Integrating JavaScript and Design</h2>
        <ul>
            <li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
            <li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
            <li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
            <li>Using third-party APIs: Query external services like Google and Instagram</li>
            <li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
            <li>Project: Integrate front-end technologies for a more interactive Django application</li>
        </ul>
    </section>
<section>
        <h2>Expand Your Developer Toolkit</h2>
        <ul>
            <li>Pair programming</li>
            <li>Git strategies</li>
            <li>Test-driven development</li>
            <li>HTTP lifecycle</li>
            <li>Computer science topics</li>
            <li>Introduction to dev ops</li>
            <li>Analytics and error reporting</li>
            <li>Project: Work in a group to build a test-driven Django application</li>
        </ul>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p>
        <p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p>
        <div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div>
        <p style="clear:both;"><br>Will become</p>
        <div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div>
        <p style="clear:both"><br>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p>
        <div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div>
    </section>
<section class="titleSlide" data-background="#168eae">
                    <h1>
    File Manipulation
</h1>
                    <a id="yetiLogo" href="http://www.yetihq.com/"><img src="/static/img/yeti-power.png"></a>
                </section>
<section>
    <h2>Brief Python History</h2>
    <p>Python is a scripting language, which means at its core it has a bunch of functionality built in for operations like file manipulation.</p>
    <ul>
        <li>Python was created by Guido van Rossum, Benevolant Dictator for Life (BDFL), in the late 1980's.</li>
        <li>Python has released major versions 1, 2, and 3</li>
        <li>Version 3 of python had some backwards incompatible changes with version 2, so they also created 2.6 and 2.7.</li>
        <li>Many people still use python 2.7 over 3, especially because major operating systems have not converted over yet.</li>
        <li>The community is still slowly making the transition from python 2 to 3 even though 3 was released in December 2008.</li>
        <li>2.7 will be the last release in the version 2 line, it was released in July 2010.</li>
    </ul>
</section>

element
<section>
<h2>Directories and Files</h2>
<p>Python has a library called <code>os</code> which contains scripting utility functions.</p>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br/><br/></li>
<li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br/><br/></li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">import os

print os.getcwd()</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="7">
<pre><code class="python">
print os.getcwd()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<ul>
<li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
<li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
</ul>
</section> element

element

element
<h2>Directories and Files</h2> element

element
<p>Python has a library called <code>os</code> which contains scripting utility functions.</p> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br/><br/></li>
<li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br/><br/></li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">import os

print os.getcwd()</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="7">
<pre><code class="python">
print os.getcwd()
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<ul>
<li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
<li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
</ul> element

element
<section>
        <h2>Directories and Files</h2>
        <p>Python has a library called <code>os</code> which contains scripting utility functions.</p>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br><br><br></li>
                <li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br><br><br></li>
                <li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br><br></li>
                <li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br><br></li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">import os

print os.getcwd()</code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="3">
                <pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="7">
                <pre><code class="python">
print os.getcwd()
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>AngularJS and Building Custom APIs</h2>
        <ul>
            <li>Basics of AngularJS</li>
            <li>Build a Basecamp clone with AngularJS</li>
            <li>Building your own custom API with Django and Tastypie</li>
            <li>Integrating Django with AngularJS</li>
            <li>Final Project: Demonstrate mastery with Django and AngularJS</li>
        </ul>
    </section>
<section>
        <h2>Prepping for Life After Bootcamp</h2>
        <ul>
            <li>Interview Prep</li>
            <li>Presentation Prep</li>
            <li>Development ecosystem</li>
        </ul>
        <p><a href="#/2">Back to top</a></p>
    </section>
<section>
    <h2>More than an education</h2>
    <p>There are a lot of bootcamps out there. At RocketU, you'll be surrounded by the 170+ amazing tech startups at RocketSpace.</p>
    <br>
    <img src="/static/img/rocketspace-name-logo-large-300x116.png" id="rocketSpaceLogo">
</section>
<section>
        <h2>Do it Yourself</h2>
        <ul>
            <li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
            <li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
        </ul>
    </section>

element
<section>
<h2>Reading a File</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
<li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
<li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
<li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
<li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre>

Hello world!
Hello universe!
                </pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="4">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="6">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Reading a File (Cont.)</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
<li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
<li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
<li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="2">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p>
<ul>
<li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
<li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
<li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
<li>Create new text files for testing out your function!</li>
</ul>
</section> element

element

element
<h2>Reading a File</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
<li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
<li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
<li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
<li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre>

Hello world!
Hello universe!
                </pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="4">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="6">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
</div>
</div> element

element

element
<h2>Reading a File (Cont.)</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
<li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
<li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
<li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="2">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p> element

element
<ul>
<li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
<li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
<li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
<li>Create new text files for testing out your function!</li>
</ul> element

element
<section>
        <h2>Reading a File</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
                <li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
                <li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
                <li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
                <li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre>

Hello world!
Hello universe!
                </pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="4">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="6">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
            </div>
        </div>
    </section>

element
<section>
<h2>A network of your own</h2>
<p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p>
</section> element

element
<section>
<h2>RocketSpace staff</h2>
</section> element

element
<section>
<h2>Your instructors</h2>
<h4>Yeti</h4>
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div>
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div>
<div class="footer">
</div>
</section> element

element
<h2>A network of your own</h2> element

element
<p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p> element

element

element
<h2>RocketSpace staff</h2> element

element

element
<h2>Your instructors</h2> element

element
<h4>Yeti</h4> element

element
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div> element

element
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div> element

element
<div class="footer">
</div> element

element

element
<h2>Your classmates</h2> element

element
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul> element

element
<p><a href="#/4">Back to top</a></p> element

element

element
<h2>Prove you can program.</h2> element

element
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p> element

element
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p> element

element
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul> element

element
<section>
        <h2>A network of your own</h2>
        <p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p>
    </section>
<section>
        <h2>Reading a File (Cont.)</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
                <li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
                <li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
                <li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="2">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p>
        <ul>
            <li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
            <li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
            <li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
            <li>Create new text files for testing out your function!</li>
        </ul>
    </section>

element
<section>
<h2>Writing a File</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
<li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
<li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Writing a File (Cont.)</h2>
<div class="col-4">
<br/>
<ul>
<li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Context Manager</h2>
<p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p>
<p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p>
<p>They are used to run certain functions before and after a block of code.</p>
<br/><br/>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
<li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
<li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p>
<p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p>
<div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div>
<p style="clear:both;"><br/>Will become</p>
<div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div>
<p style="clear:both"><br/>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p>
<div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div>
</section> element

element

element
<h2>Writing a File</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
<li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
<li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
</div>
</div> element

element

element
<h2>Writing a File (Cont.)</h2> element

element
<div class="col-4">
<br/>
<ul>
<li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
</div>
</div> element

element

element
<h2>Context Manager</h2> element

element
<p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p> element

element
<p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p> element

element
<p>They are used to run certain functions before and after a block of code.</p> element

element
<br/> element
<br/> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
<li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
<li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p> element

element
<p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p> element

element
<div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div> element

element
<p style="clear:both;"><br/>Will become</p> element

element
<div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div> element

element
<p style="clear:both"><br/>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p> element

element
<div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div> element

element
<section>
        <h2>Writing a File</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
                <li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
                <li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>RocketSpace staff</h2>
    </section>

element
<h2>Your instructors</h2> element

element
<h4>Yeti</h4> element

element
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div> element

element
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div> element

element
<div class="footer">
</div> element

element

element
<h2>Your classmates</h2> element

element
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul> element

element
<p><a href="#/4">Back to top</a></p> element

element

element
<h2>Prove you can program.</h2> element

element
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p> element

element
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p> element

element
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul> element

element
<section>
        <h2>Your classmates</h2>
        <ul>
            <li>A brain</li>
            <li>An athlete</li>
            <li>A basket case</li>
            <li>A princess</li>
            <li>And a criminal</li>
        </ul>
        <p><a href="#/4">Back to top</a></p>
    </section>
<section>
    <h2>Prove you can program.</h2>
    <p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
    <p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
    <ul>
        <li><a target="_blank" href="http://codingbat.com/python">Coding Bat</a></li>
        <li><a target="_blank" href="http://www.pythonchallenge.com/">Python Challenge</a></li>
        <li><a target="_blank" href="http://www.coderbyte.com/">Coderbyte</a></li>
    </ul>
</section>
<section>
        <h2>Writing a File (Cont.)</h2>
        <div class="col-4">
            <br>
            <ul>
                <li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br><br><br><br><br></li>
                <li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br><br><br><br><br></li>
                <li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="3">
                <pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Context Manager</h2>
        <p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p>
        <p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p>
        <p>They are used to run certain functions before and after a block of code.</p>
        <br><br>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
                <li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
                <li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p>
        <p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p>
        <div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div>
        <p style="clear:both;"><br>Will become</p>
        <div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div>
        <p style="clear:both"><br>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p>
        <div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div>
    </section>
<section class="titleSlide" data-background="#168eae">
                    <h1>
    File Manipulation
</h1>
                    <a id="yetiLogo" href="http://www.yetihq.com/"><img src="/static/img/yeti-power.png"></a>
                </section>
<section>
    <h2>Learn web development. Build awesome things.</h2>
    <p>
        You quit your job, you told your friends and family you're doing something crazy, maybe you moved here. You're ready to learn, intensively, for the next twelve weeks. By the time you're done, you'll be able to build pretty much anything you see on the internet.
    </p>
</section>
<section>
    <h2>Brief Python History</h2>
    <p>Python is a scripting language, which means at its core it has a bunch of functionality built in for operations like file manipulation.</p>
    <ul>
        <li>Python was created by Guido van Rossum, Benevolant Dictator for Life (BDFL), in the late 1980's.</li>
        <li>Python has released major versions 1, 2, and 3</li>
        <li>Version 3 of python had some backwards incompatible changes with version 2, so they also created 2.6 and 2.7.</li>
        <li>Many people still use python 2.7 over 3, especially because major operating systems have not converted over yet.</li>
        <li>The community is still slowly making the transition from python 2 to 3 even though 3 was released in December 2008.</li>
        <li>2.7 will be the last release in the version 2 line, it was released in July 2010.</li>
    </ul>
</section>

element
<section>
<h2>Directories and Files</h2>
<p>Python has a library called <code>os</code> which contains scripting utility functions.</p>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br/><br/></li>
<li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br/><br/></li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">import os

print os.getcwd()</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="7">
<pre><code class="python">
print os.getcwd()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<ul>
<li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
<li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
</ul>
</section> element

element

element
<h2>Directories and Files</h2> element

element
<p>Python has a library called <code>os</code> which contains scripting utility functions.</p> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br/><br/></li>
<li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br/><br/></li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">import os

print os.getcwd()</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="7">
<pre><code class="python">
print os.getcwd()
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<ul>
<li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
<li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
</ul> element

element
<section>
        <h2>Directories and Files</h2>
        <p>Python has a library called <code>os</code> which contains scripting utility functions.</p>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br><br><br></li>
                <li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br><br><br></li>
                <li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br><br></li>
                <li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br><br></li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">import os

print os.getcwd()</code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="3">
                <pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="7">
                <pre><code class="python">
print os.getcwd()
                </code></pre>
            </div>
        </div>
    </section>

element
<section>
<h2>What you'll be learning</h2>
<p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p>
<ul>
<li><a href="#/2/1">Prework</a></li>
<li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
<li><a href="#/2/3">Integrating JavaScript and Design</a></li>
<li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
<li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
<li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
</ul>
</section> element

element
<section>
<h2>Prework</h2>
<p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p>
<ul>
<li>Command Line: Give your computer instructions like a real programmer</li>
<li>HTML: Learn the basic building blocks of the front-facing web</li>
<li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
<li>Git: Version control is a lifesaver</li>
<li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
<li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
<li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
</ul>
</section> element

element
<section>
<h2>Object-oriented Python and Beginner Django</h2>
<ul>
<li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
<li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
<li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
<li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
<li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
<li>Project: Build a Django application with user authentication and database storage</li>
</ul>
</section> element

element
<section>
<h2>Integrating JavaScript and Design</h2>
<ul>
<li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
<li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
<li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
<li>Using third-party APIs: Query external services like Google and Instagram</li>
<li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
<li>Project: Integrate front-end technologies for a more interactive Django application</li>
</ul>
</section> element

element
<section>
<h2>Expand Your Developer Toolkit</h2>
<ul>
<li>Pair programming</li>
<li>Git strategies</li>
<li>Test-driven development</li>
<li>HTTP lifecycle</li>
<li>Computer science topics</li>
<li>Introduction to dev ops</li>
<li>Analytics and error reporting</li>
<li>Project: Work in a group to build a test-driven Django application</li>
</ul>
</section> element

element
<section>
<h2>AngularJS and Building Custom APIs</h2>
<ul>
<li>Basics of AngularJS</li>
<li>Build a Basecamp clone with AngularJS</li>
<li>Building your own custom API with Django and Tastypie</li>
<li>Integrating Django with AngularJS</li>
<li>Final Project: Demonstrate mastery with Django and AngularJS</li>
</ul>
</section> element

element
<section>
<h2>Prepping for Life After Bootcamp</h2>
<ul>
<li>Interview Prep</li>
<li>Presentation Prep</li>
<li>Development ecosystem</li>
</ul>
<p><a href="#/2">Back to top</a></p>
</section> element

element

element
<h2>What you'll be learning</h2> element

element
<p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p> element

element
<ul>
<li><a href="#/2/1">Prework</a></li>
<li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
<li><a href="#/2/3">Integrating JavaScript and Design</a></li>
<li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
<li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
<li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
</ul> element

element

element
<h2>Prework</h2> element

element
<p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p> element

element
<ul>
<li>Command Line: Give your computer instructions like a real programmer</li>
<li>HTML: Learn the basic building blocks of the front-facing web</li>
<li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
<li>Git: Version control is a lifesaver</li>
<li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
<li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
<li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
</ul> element

element

element
<h2>Object-oriented Python and Beginner Django</h2> element

element
<ul>
<li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
<li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
<li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
<li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
<li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
<li>Project: Build a Django application with user authentication and database storage</li>
</ul> element

element

element
<h2>Integrating JavaScript and Design</h2> element

element
<ul>
<li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
<li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
<li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
<li>Using third-party APIs: Query external services like Google and Instagram</li>
<li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
<li>Project: Integrate front-end technologies for a more interactive Django application</li>
</ul> element

element

element
<h2>Expand Your Developer Toolkit</h2> element

element
<ul>
<li>Pair programming</li>
<li>Git strategies</li>
<li>Test-driven development</li>
<li>HTTP lifecycle</li>
<li>Computer science topics</li>
<li>Introduction to dev ops</li>
<li>Analytics and error reporting</li>
<li>Project: Work in a group to build a test-driven Django application</li>
</ul> element

element

element
<h2>AngularJS and Building Custom APIs</h2> element

element
<ul>
<li>Basics of AngularJS</li>
<li>Build a Basecamp clone with AngularJS</li>
<li>Building your own custom API with Django and Tastypie</li>
<li>Integrating Django with AngularJS</li>
<li>Final Project: Demonstrate mastery with Django and AngularJS</li>
</ul> element

element

element
<h2>Prepping for Life After Bootcamp</h2> element

element
<ul>
<li>Interview Prep</li>
<li>Presentation Prep</li>
<li>Development ecosystem</li>
</ul> element

element
<p><a href="#/2">Back to top</a></p> element

element
<section>
        <h2>What you'll be learning</h2>
        <p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p>
        <ul>
            <li><a href="#/2/1">Prework</a></li>
            <li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
            <li><a href="#/2/3">Integrating JavaScript and Design</a></li>
            <li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
            <li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
            <li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
        </ul>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <ul>
            <li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
            <li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
        </ul>
    </section>

element
<section>
<h2>Reading a File</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
<li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
<li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
<li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
<li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre>

Hello world!
Hello universe!
                </pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="4">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="6">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Reading a File (Cont.)</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
<li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
<li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
<li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="2">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p>
<ul>
<li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
<li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
<li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
<li>Create new text files for testing out your function!</li>
</ul>
</section> element

element

element
<h2>Reading a File</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
<li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
<li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
<li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
<li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre>

Hello world!
Hello universe!
                </pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="4">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="6">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
</div>
</div> element

element

element
<h2>Reading a File (Cont.)</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
<li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
<li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
<li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="2">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p> element

element
<ul>
<li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
<li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
<li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
<li>Create new text files for testing out your function!</li>
</ul> element

element
<section>
        <h2>Reading a File</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
                <li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
                <li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
                <li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
                <li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre>

Hello world!
Hello universe!
                </pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="4">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="6">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Prework</h2>
        <p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p>
        <ul>
            <li>Command Line: Give your computer instructions like a real programmer</li>
            <li>HTML: Learn the basic building blocks of the front-facing web</li>
            <li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
            <li>Git: Version control is a lifesaver</li>
            <li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
            <li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
            <li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
        </ul>
    </section>
<section>
        <h2>Object-oriented Python and Beginner Django</h2>
        <ul>
            <li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
            <li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
            <li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
            <li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
            <li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
            <li>Project: Build a Django application with user authentication and database storage</li>
        </ul>
    </section>
<section>
        <h2>Integrating JavaScript and Design</h2>
        <ul>
            <li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
            <li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
            <li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
            <li>Using third-party APIs: Query external services like Google and Instagram</li>
            <li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
            <li>Project: Integrate front-end technologies for a more interactive Django application</li>
        </ul>
    </section>
<section>
        <h2>Reading a File (Cont.)</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
                <li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
                <li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
                <li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="2">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p>
        <ul>
            <li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
            <li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
            <li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
            <li>Create new text files for testing out your function!</li>
        </ul>
    </section>

element
<section>
<h2>Writing a File</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
<li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
<li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Writing a File (Cont.)</h2>
<div class="col-4">
<br/>
<ul>
<li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Context Manager</h2>
<p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p>
<p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p>
<p>They are used to run certain functions before and after a block of code.</p>
<br/><br/>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
<li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
<li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p>
<p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p>
<div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div>
<p style="clear:both;"><br/>Will become</p>
<div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div>
<p style="clear:both"><br/>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p>
<div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div>
</section> element

element

element
<h2>Writing a File</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
<li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
<li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
</div>
</div> element

element

element
<h2>Writing a File (Cont.)</h2> element

element
<div class="col-4">
<br/>
<ul>
<li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
</div>
</div> element

element

element
<h2>Context Manager</h2> element

element
<p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p> element

element
<p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p> element

element
<p>They are used to run certain functions before and after a block of code.</p> element

element
<br/> element
<br/> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
<li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
<li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p> element

element
<p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p> element

element
<div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div> element

element
<p style="clear:both;"><br/>Will become</p> element

element
<div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div> element

element
<p style="clear:both"><br/>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p> element

element
<div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div> element

element
<section>
        <h2>Writing a File</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
                <li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
                <li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Expand Your Developer Toolkit</h2>
        <ul>
            <li>Pair programming</li>
            <li>Git strategies</li>
            <li>Test-driven development</li>
            <li>HTTP lifecycle</li>
            <li>Computer science topics</li>
            <li>Introduction to dev ops</li>
            <li>Analytics and error reporting</li>
            <li>Project: Work in a group to build a test-driven Django application</li>
        </ul>
    </section>
<section>
        <h2>AngularJS and Building Custom APIs</h2>
        <ul>
            <li>Basics of AngularJS</li>
            <li>Build a Basecamp clone with AngularJS</li>
            <li>Building your own custom API with Django and Tastypie</li>
            <li>Integrating Django with AngularJS</li>
            <li>Final Project: Demonstrate mastery with Django and AngularJS</li>
        </ul>
    </section>
<section>
        <h2>Prepping for Life After Bootcamp</h2>
        <ul>
            <li>Interview Prep</li>
            <li>Presentation Prep</li>
            <li>Development ecosystem</li>
        </ul>
        <p><a href="#/2">Back to top</a></p>
    </section>
<section>
    <h2>More than an education</h2>
    <p>There are a lot of bootcamps out there. At RocketU, you'll be surrounded by the 170+ amazing tech startups at RocketSpace.</p>
    <br>
    <img src="/static/img/rocketspace-name-logo-large-300x116.png" id="rocketSpaceLogo">
</section>
<section>
        <h2>Writing a File (Cont.)</h2>
        <div class="col-4">
            <br>
            <ul>
                <li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br><br><br><br><br></li>
                <li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br><br><br><br><br></li>
                <li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="3">
                <pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Context Manager</h2>
        <p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p>
        <p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p>
        <p>They are used to run certain functions before and after a block of code.</p>
        <br><br>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
                <li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
                <li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p>
        <p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p>
        <div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div>
        <p style="clear:both;"><br>Will become</p>
        <div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div>
        <p style="clear:both"><br>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p>
        <div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div>
    </section>

element
<section>
<h2>A network of your own</h2>
<p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p>
</section> element

element
<section>
<h2>RocketSpace staff</h2>
</section> element

element
<section>
<h2>Your instructors</h2>
<h4>Yeti</h4>
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div>
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div>
<div class="footer">
</div>
</section> element

element
<h2>A network of your own</h2> element

element
<p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p> element

element

element
<h2>RocketSpace staff</h2> element

element

element
<h2>Your instructors</h2> element

element
<h4>Yeti</h4> element

element
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div> element

element
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div> element

element
<div class="footer">
</div> element

element

element
<h2>Your classmates</h2> element

element
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul> element

element
<p><a href="#/4">Back to top</a></p> element

element

element
<h2>Prove you can program.</h2> element

element
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p> element

element
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p> element

element
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul> element

element
<section>
        <h2>A network of your own</h2>
        <p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p>
    </section>
<section class="titleSlide" data-background="#168eae">
                    <h1>
    File Manipulation
</h1>
                    <a id="yetiLogo" href="http://www.yetihq.com/"><img src="/static/img/yeti-power.png"></a>
                </section>
<section>
    <h2>Brief Python History</h2>
    <p>Python is a scripting language, which means at its core it has a bunch of functionality built in for operations like file manipulation.</p>
    <ul>
        <li>Python was created by Guido van Rossum, Benevolant Dictator for Life (BDFL), in the late 1980's.</li>
        <li>Python has released major versions 1, 2, and 3</li>
        <li>Version 3 of python had some backwards incompatible changes with version 2, so they also created 2.6 and 2.7.</li>
        <li>Many people still use python 2.7 over 3, especially because major operating systems have not converted over yet.</li>
        <li>The community is still slowly making the transition from python 2 to 3 even though 3 was released in December 2008.</li>
        <li>2.7 will be the last release in the version 2 line, it was released in July 2010.</li>
    </ul>
</section>

element
<section>
<h2>Directories and Files</h2>
<p>Python has a library called <code>os</code> which contains scripting utility functions.</p>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br/><br/></li>
<li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br/><br/></li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">import os

print os.getcwd()</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="7">
<pre><code class="python">
print os.getcwd()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<ul>
<li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
<li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
</ul>
</section> element

element

element
<h2>Directories and Files</h2> element

element
<p>Python has a library called <code>os</code> which contains scripting utility functions.</p> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br/><br/></li>
<li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br/><br/></li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">import os

print os.getcwd()</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="7">
<pre><code class="python">
print os.getcwd()
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<ul>
<li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
<li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
</ul> element

element
<section>
        <h2>Directories and Files</h2>
        <p>Python has a library called <code>os</code> which contains scripting utility functions.</p>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br><br><br></li>
                <li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br><br><br></li>
                <li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br><br></li>
                <li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br><br></li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">import os

print os.getcwd()</code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="3">
                <pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="7">
                <pre><code class="python">
print os.getcwd()
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>RocketSpace staff</h2>
    </section>

element
<h2>Your instructors</h2> element

element
<h4>Yeti</h4> element

element
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div> element

element
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div> element

element
<div class="footer">
</div> element

element

element
<h2>Your classmates</h2> element

element
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul> element

element
<p><a href="#/4">Back to top</a></p> element

element

element
<h2>Prove you can program.</h2> element

element
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p> element

element
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p> element

element
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul> element

element
<section>
        <h2>Your classmates</h2>
        <ul>
            <li>A brain</li>
            <li>An athlete</li>
            <li>A basket case</li>
            <li>A princess</li>
            <li>And a criminal</li>
        </ul>
        <p><a href="#/4">Back to top</a></p>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <ul>
            <li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
            <li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
        </ul>
    </section>

element
<section>
<h2>Reading a File</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
<li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
<li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
<li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
<li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre>

Hello world!
Hello universe!
                </pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="4">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="6">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Reading a File (Cont.)</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
<li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
<li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
<li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="2">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p>
<ul>
<li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
<li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
<li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
<li>Create new text files for testing out your function!</li>
</ul>
</section> element

element

element
<h2>Reading a File</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
<li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
<li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
<li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
<li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre>

Hello world!
Hello universe!
                </pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="4">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="6">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
</div>
</div> element

element

element
<h2>Reading a File (Cont.)</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
<li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
<li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
<li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="2">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p> element

element
<ul>
<li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
<li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
<li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
<li>Create new text files for testing out your function!</li>
</ul> element

element
<section>
        <h2>Reading a File</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
                <li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
                <li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
                <li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
                <li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre>

Hello world!
Hello universe!
                </pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="4">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="6">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
            </div>
        </div>
    </section>
<section>
    <h2>Prove you can program.</h2>
    <p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
    <p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
    <ul>
        <li><a target="_blank" href="http://codingbat.com/python">Coding Bat</a></li>
        <li><a target="_blank" href="http://www.pythonchallenge.com/">Python Challenge</a></li>
        <li><a target="_blank" href="http://www.coderbyte.com/">Coderbyte</a></li>
    </ul>
</section>
<section>
    <h2>Learn web development. Build awesome things.</h2>
    <p>
        You quit your job, you told your friends and family you're doing something crazy, maybe you moved here. You're ready to learn, intensively, for the next twelve weeks. By the time you're done, you'll be able to build pretty much anything you see on the internet.
    </p>
</section>

element
<section>
<h2>What you'll be learning</h2>
<p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p>
<ul>
<li><a href="#/2/1">Prework</a></li>
<li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
<li><a href="#/2/3">Integrating JavaScript and Design</a></li>
<li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
<li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
<li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
</ul>
</section> element

element
<section>
<h2>Prework</h2>
<p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p>
<ul>
<li>Command Line: Give your computer instructions like a real programmer</li>
<li>HTML: Learn the basic building blocks of the front-facing web</li>
<li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
<li>Git: Version control is a lifesaver</li>
<li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
<li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
<li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
</ul>
</section> element

element
<section>
<h2>Object-oriented Python and Beginner Django</h2>
<ul>
<li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
<li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
<li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
<li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
<li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
<li>Project: Build a Django application with user authentication and database storage</li>
</ul>
</section> element

element
<section>
<h2>Integrating JavaScript and Design</h2>
<ul>
<li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
<li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
<li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
<li>Using third-party APIs: Query external services like Google and Instagram</li>
<li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
<li>Project: Integrate front-end technologies for a more interactive Django application</li>
</ul>
</section> element

element
<section>
<h2>Expand Your Developer Toolkit</h2>
<ul>
<li>Pair programming</li>
<li>Git strategies</li>
<li>Test-driven development</li>
<li>HTTP lifecycle</li>
<li>Computer science topics</li>
<li>Introduction to dev ops</li>
<li>Analytics and error reporting</li>
<li>Project: Work in a group to build a test-driven Django application</li>
</ul>
</section> element

element
<section>
<h2>AngularJS and Building Custom APIs</h2>
<ul>
<li>Basics of AngularJS</li>
<li>Build a Basecamp clone with AngularJS</li>
<li>Building your own custom API with Django and Tastypie</li>
<li>Integrating Django with AngularJS</li>
<li>Final Project: Demonstrate mastery with Django and AngularJS</li>
</ul>
</section> element

element
<section>
<h2>Prepping for Life After Bootcamp</h2>
<ul>
<li>Interview Prep</li>
<li>Presentation Prep</li>
<li>Development ecosystem</li>
</ul>
<p><a href="#/2">Back to top</a></p>
</section> element

element

element
<h2>What you'll be learning</h2> element

element
<p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p> element

element
<ul>
<li><a href="#/2/1">Prework</a></li>
<li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
<li><a href="#/2/3">Integrating JavaScript and Design</a></li>
<li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
<li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
<li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
</ul> element

element

element
<h2>Prework</h2> element

element
<p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p> element

element
<ul>
<li>Command Line: Give your computer instructions like a real programmer</li>
<li>HTML: Learn the basic building blocks of the front-facing web</li>
<li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
<li>Git: Version control is a lifesaver</li>
<li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
<li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
<li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
</ul> element

element

element
<h2>Object-oriented Python and Beginner Django</h2> element

element
<ul>
<li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
<li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
<li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
<li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
<li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
<li>Project: Build a Django application with user authentication and database storage</li>
</ul> element

element

element
<h2>Integrating JavaScript and Design</h2> element

element
<ul>
<li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
<li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
<li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
<li>Using third-party APIs: Query external services like Google and Instagram</li>
<li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
<li>Project: Integrate front-end technologies for a more interactive Django application</li>
</ul> element

element

element
<h2>Expand Your Developer Toolkit</h2> element

element
<ul>
<li>Pair programming</li>
<li>Git strategies</li>
<li>Test-driven development</li>
<li>HTTP lifecycle</li>
<li>Computer science topics</li>
<li>Introduction to dev ops</li>
<li>Analytics and error reporting</li>
<li>Project: Work in a group to build a test-driven Django application</li>
</ul> element

element

element
<h2>AngularJS and Building Custom APIs</h2> element

element
<ul>
<li>Basics of AngularJS</li>
<li>Build a Basecamp clone with AngularJS</li>
<li>Building your own custom API with Django and Tastypie</li>
<li>Integrating Django with AngularJS</li>
<li>Final Project: Demonstrate mastery with Django and AngularJS</li>
</ul> element

element

element
<h2>Prepping for Life After Bootcamp</h2> element

element
<ul>
<li>Interview Prep</li>
<li>Presentation Prep</li>
<li>Development ecosystem</li>
</ul> element

element
<p><a href="#/2">Back to top</a></p> element

element
<section>
        <h2>What you'll be learning</h2>
        <p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p>
        <ul>
            <li><a href="#/2/1">Prework</a></li>
            <li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
            <li><a href="#/2/3">Integrating JavaScript and Design</a></li>
            <li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
            <li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
            <li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
        </ul>
    </section>
<section>
        <h2>Reading a File (Cont.)</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
                <li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
                <li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
                <li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="2">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p>
        <ul>
            <li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
            <li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
            <li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
            <li>Create new text files for testing out your function!</li>
        </ul>
    </section>

element
<section>
<h2>Writing a File</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
<li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
<li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Writing a File (Cont.)</h2>
<div class="col-4">
<br/>
<ul>
<li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Context Manager</h2>
<p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p>
<p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p>
<p>They are used to run certain functions before and after a block of code.</p>
<br/><br/>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
<li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
<li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p>
<p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p>
<div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div>
<p style="clear:both;"><br/>Will become</p>
<div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div>
<p style="clear:both"><br/>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p>
<div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div>
</section> element

element

element
<h2>Writing a File</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
<li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
<li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
</div>
</div> element

element

element
<h2>Writing a File (Cont.)</h2> element

element
<div class="col-4">
<br/>
<ul>
<li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
</div>
</div> element

element

element
<h2>Context Manager</h2> element

element
<p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p> element

element
<p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p> element

element
<p>They are used to run certain functions before and after a block of code.</p> element

element
<br/> element
<br/> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
<li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
<li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p> element

element
<p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p> element

element
<div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div> element

element
<p style="clear:both;"><br/>Will become</p> element

element
<div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div> element

element
<p style="clear:both"><br/>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p> element

element
<div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div> element

element
<section>
        <h2>Writing a File</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
                <li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
                <li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Prework</h2>
        <p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p>
        <ul>
            <li>Command Line: Give your computer instructions like a real programmer</li>
            <li>HTML: Learn the basic building blocks of the front-facing web</li>
            <li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
            <li>Git: Version control is a lifesaver</li>
            <li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
            <li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
            <li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
        </ul>
    </section>
<section>
        <h2>Object-oriented Python and Beginner Django</h2>
        <ul>
            <li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
            <li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
            <li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
            <li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
            <li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
            <li>Project: Build a Django application with user authentication and database storage</li>
        </ul>
    </section>
<section>
        <h2>Integrating JavaScript and Design</h2>
        <ul>
            <li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
            <li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
            <li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
            <li>Using third-party APIs: Query external services like Google and Instagram</li>
            <li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
            <li>Project: Integrate front-end technologies for a more interactive Django application</li>
        </ul>
    </section>
<section>
        <h2>Expand Your Developer Toolkit</h2>
        <ul>
            <li>Pair programming</li>
            <li>Git strategies</li>
            <li>Test-driven development</li>
            <li>HTTP lifecycle</li>
            <li>Computer science topics</li>
            <li>Introduction to dev ops</li>
            <li>Analytics and error reporting</li>
            <li>Project: Work in a group to build a test-driven Django application</li>
        </ul>
    </section>
<section>
        <h2>Writing a File (Cont.)</h2>
        <div class="col-4">
            <br>
            <ul>
                <li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br><br><br><br><br></li>
                <li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br><br><br><br><br></li>
                <li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="3">
                <pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Context Manager</h2>
        <p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p>
        <p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p>
        <p>They are used to run certain functions before and after a block of code.</p>
        <br><br>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
                <li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
                <li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>AngularJS and Building Custom APIs</h2>
        <ul>
            <li>Basics of AngularJS</li>
            <li>Build a Basecamp clone with AngularJS</li>
            <li>Building your own custom API with Django and Tastypie</li>
            <li>Integrating Django with AngularJS</li>
            <li>Final Project: Demonstrate mastery with Django and AngularJS</li>
        </ul>
    </section>
<section>
        <h2>Prepping for Life After Bootcamp</h2>
        <ul>
            <li>Interview Prep</li>
            <li>Presentation Prep</li>
            <li>Development ecosystem</li>
        </ul>
        <p><a href="#/2">Back to top</a></p>
    </section>
<section>
    <h2>More than an education</h2>
    <p>There are a lot of bootcamps out there. At RocketU, you'll be surrounded by the 170+ amazing tech startups at RocketSpace.</p>
    <br>
    <img src="/static/img/rocketspace-name-logo-large-300x116.png" id="rocketSpaceLogo">
</section>

element
<section>
<h2>A network of your own</h2>
<p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p>
</section> element

element
<section>
<h2>RocketSpace staff</h2>
</section> element

element
<section>
<h2>Your instructors</h2>
<h4>Yeti</h4>
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div>
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div>
<div class="footer">
</div>
</section> element

element
<h2>A network of your own</h2> element

element
<p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p> element

element

element
<h2>RocketSpace staff</h2> element

element

element
<h2>Your instructors</h2> element

element
<h4>Yeti</h4> element

element
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div> element

element
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div> element

element
<div class="footer">
</div> element

element

element
<h2>Your classmates</h2> element

element
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul> element

element
<p><a href="#/4">Back to top</a></p> element

element

element
<h2>Prove you can program.</h2> element

element
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p> element

element
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p> element

element
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul> element

element
<section>
        <h2>A network of your own</h2>
        <p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p>
        <p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p>
        <div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div>
        <p style="clear:both;"><br>Will become</p>
        <div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div>
        <p style="clear:both"><br>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p>
        <div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div>
    </section>
<section class="titleSlide" data-background="#168eae">
                    <h1>
    File Manipulation
</h1>
                    <a id="yetiLogo" href="http://www.yetihq.com/"><img src="/static/img/yeti-power.png"></a>
                </section>
<section>
    <h2>Brief Python History</h2>
    <p>Python is a scripting language, which means at its core it has a bunch of functionality built in for operations like file manipulation.</p>
    <ul>
        <li>Python was created by Guido van Rossum, Benevolant Dictator for Life (BDFL), in the late 1980's.</li>
        <li>Python has released major versions 1, 2, and 3</li>
        <li>Version 3 of python had some backwards incompatible changes with version 2, so they also created 2.6 and 2.7.</li>
        <li>Many people still use python 2.7 over 3, especially because major operating systems have not converted over yet.</li>
        <li>The community is still slowly making the transition from python 2 to 3 even though 3 was released in December 2008.</li>
        <li>2.7 will be the last release in the version 2 line, it was released in July 2010.</li>
    </ul>
</section>

element
<section>
<h2>Directories and Files</h2>
<p>Python has a library called <code>os</code> which contains scripting utility functions.</p>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br/><br/></li>
<li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br/><br/></li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">import os

print os.getcwd()</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="7">
<pre><code class="python">
print os.getcwd()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<ul>
<li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
<li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
</ul>
</section> element

element

element
<h2>Directories and Files</h2> element

element
<p>Python has a library called <code>os</code> which contains scripting utility functions.</p> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br/><br/></li>
<li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br/><br/></li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">import os

print os.getcwd()</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="7">
<pre><code class="python">
print os.getcwd()
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<ul>
<li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
<li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
</ul> element

element
<section>
        <h2>Directories and Files</h2>
        <p>Python has a library called <code>os</code> which contains scripting utility functions.</p>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br><br><br></li>
                <li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br><br><br></li>
                <li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br><br></li>
                <li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br><br></li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">import os

print os.getcwd()</code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="3">
                <pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="7">
                <pre><code class="python">
print os.getcwd()
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>RocketSpace staff</h2>
    </section>

element
<h2>Your instructors</h2> element

element
<h4>Yeti</h4> element

element
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div> element

element
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div> element

element
<div class="footer">
</div> element

element

element
<h2>Your classmates</h2> element

element
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul> element

element
<p><a href="#/4">Back to top</a></p> element

element

element
<h2>Prove you can program.</h2> element

element
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p> element

element
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p> element

element
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul> element

element
<section>
        <h2>Your classmates</h2>
        <ul>
            <li>A brain</li>
            <li>An athlete</li>
            <li>A basket case</li>
            <li>A princess</li>
            <li>And a criminal</li>
        </ul>
        <p><a href="#/4">Back to top</a></p>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <ul>
            <li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
            <li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
        </ul>
    </section>

element
<section>
<h2>Reading a File</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
<li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
<li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
<li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
<li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre>

Hello world!
Hello universe!
                </pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="4">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="6">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Reading a File (Cont.)</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
<li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
<li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
<li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="2">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p>
<ul>
<li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
<li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
<li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
<li>Create new text files for testing out your function!</li>
</ul>
</section> element

element

element
<h2>Reading a File</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
<li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
<li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
<li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
<li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre>

Hello world!
Hello universe!
                </pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="4">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="6">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
</div>
</div> element

element

element
<h2>Reading a File (Cont.)</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
<li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
<li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
<li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="2">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p> element

element
<ul>
<li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
<li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
<li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
<li>Create new text files for testing out your function!</li>
</ul> element

element
<section>
        <h2>Reading a File</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
                <li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
                <li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
                <li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
                <li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre>

Hello world!
Hello universe!
                </pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="4">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="6">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
            </div>
        </div>
    </section>
<section>
    <h2>Prove you can program.</h2>
    <p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
    <p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
    <ul>
        <li><a target="_blank" href="http://codingbat.com/python">Coding Bat</a></li>
        <li><a target="_blank" href="http://www.pythonchallenge.com/">Python Challenge</a></li>
        <li><a target="_blank" href="http://www.coderbyte.com/">Coderbyte</a></li>
    </ul>
</section>
<section>
    <h2>Learn web development. Build awesome things.</h2>
    <p>
        You quit your job, you told your friends and family you're doing something crazy, maybe you moved here. You're ready to learn, intensively, for the next twelve weeks. By the time you're done, you'll be able to build pretty much anything you see on the internet.
    </p>
</section>

element
<section>
<h2>What you'll be learning</h2>
<p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p>
<ul>
<li><a href="#/2/1">Prework</a></li>
<li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
<li><a href="#/2/3">Integrating JavaScript and Design</a></li>
<li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
<li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
<li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
</ul>
</section> element

element
<section>
<h2>Prework</h2>
<p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p>
<ul>
<li>Command Line: Give your computer instructions like a real programmer</li>
<li>HTML: Learn the basic building blocks of the front-facing web</li>
<li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
<li>Git: Version control is a lifesaver</li>
<li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
<li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
<li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
</ul>
</section> element

element
<section>
<h2>Object-oriented Python and Beginner Django</h2>
<ul>
<li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
<li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
<li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
<li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
<li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
<li>Project: Build a Django application with user authentication and database storage</li>
</ul>
</section> element

element
<section>
<h2>Integrating JavaScript and Design</h2>
<ul>
<li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
<li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
<li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
<li>Using third-party APIs: Query external services like Google and Instagram</li>
<li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
<li>Project: Integrate front-end technologies for a more interactive Django application</li>
</ul>
</section> element

element
<section>
<h2>Expand Your Developer Toolkit</h2>
<ul>
<li>Pair programming</li>
<li>Git strategies</li>
<li>Test-driven development</li>
<li>HTTP lifecycle</li>
<li>Computer science topics</li>
<li>Introduction to dev ops</li>
<li>Analytics and error reporting</li>
<li>Project: Work in a group to build a test-driven Django application</li>
</ul>
</section> element

element
<section>
<h2>AngularJS and Building Custom APIs</h2>
<ul>
<li>Basics of AngularJS</li>
<li>Build a Basecamp clone with AngularJS</li>
<li>Building your own custom API with Django and Tastypie</li>
<li>Integrating Django with AngularJS</li>
<li>Final Project: Demonstrate mastery with Django and AngularJS</li>
</ul>
</section> element

element
<section>
<h2>Prepping for Life After Bootcamp</h2>
<ul>
<li>Interview Prep</li>
<li>Presentation Prep</li>
<li>Development ecosystem</li>
</ul>
<p><a href="#/2">Back to top</a></p>
</section> element

element

element
<h2>What you'll be learning</h2> element

element
<p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p> element

element
<ul>
<li><a href="#/2/1">Prework</a></li>
<li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
<li><a href="#/2/3">Integrating JavaScript and Design</a></li>
<li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
<li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
<li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
</ul> element

element

element
<h2>Prework</h2> element

element
<p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p> element

element
<ul>
<li>Command Line: Give your computer instructions like a real programmer</li>
<li>HTML: Learn the basic building blocks of the front-facing web</li>
<li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
<li>Git: Version control is a lifesaver</li>
<li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
<li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
<li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
</ul> element

element

element
<h2>Object-oriented Python and Beginner Django</h2> element

element
<ul>
<li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
<li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
<li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
<li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
<li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
<li>Project: Build a Django application with user authentication and database storage</li>
</ul> element

element

element
<h2>Integrating JavaScript and Design</h2> element

element
<ul>
<li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
<li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
<li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
<li>Using third-party APIs: Query external services like Google and Instagram</li>
<li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
<li>Project: Integrate front-end technologies for a more interactive Django application</li>
</ul> element

element

element
<h2>Expand Your Developer Toolkit</h2> element

element
<ul>
<li>Pair programming</li>
<li>Git strategies</li>
<li>Test-driven development</li>
<li>HTTP lifecycle</li>
<li>Computer science topics</li>
<li>Introduction to dev ops</li>
<li>Analytics and error reporting</li>
<li>Project: Work in a group to build a test-driven Django application</li>
</ul> element

element

element
<h2>AngularJS and Building Custom APIs</h2> element

element
<ul>
<li>Basics of AngularJS</li>
<li>Build a Basecamp clone with AngularJS</li>
<li>Building your own custom API with Django and Tastypie</li>
<li>Integrating Django with AngularJS</li>
<li>Final Project: Demonstrate mastery with Django and AngularJS</li>
</ul> element

element

element
<h2>Prepping for Life After Bootcamp</h2> element

element
<ul>
<li>Interview Prep</li>
<li>Presentation Prep</li>
<li>Development ecosystem</li>
</ul> element

element
<p><a href="#/2">Back to top</a></p> element

element
<section>
        <h2>What you'll be learning</h2>
        <p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p>
        <ul>
            <li><a href="#/2/1">Prework</a></li>
            <li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
            <li><a href="#/2/3">Integrating JavaScript and Design</a></li>
            <li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
            <li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
            <li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
        </ul>
    </section>
<section>
        <h2>Reading a File (Cont.)</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
                <li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
                <li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
                <li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="2">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p>
        <ul>
            <li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
            <li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
            <li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
            <li>Create new text files for testing out your function!</li>
        </ul>
    </section>
<section>
        <h2>Prework</h2>
        <p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p>
        <ul>
            <li>Command Line: Give your computer instructions like a real programmer</li>
            <li>HTML: Learn the basic building blocks of the front-facing web</li>
            <li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
            <li>Git: Version control is a lifesaver</li>
            <li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
            <li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
            <li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
        </ul>
    </section>
<section>
        <h2>Object-oriented Python and Beginner Django</h2>
        <ul>
            <li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
            <li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
            <li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
            <li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
            <li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
            <li>Project: Build a Django application with user authentication and database storage</li>
        </ul>
    </section>
<section>
        <h2>Integrating JavaScript and Design</h2>
        <ul>
            <li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
            <li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
            <li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
            <li>Using third-party APIs: Query external services like Google and Instagram</li>
            <li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
            <li>Project: Integrate front-end technologies for a more interactive Django application</li>
        </ul>
    </section>

element
<section>
<h2>Writing a File</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
<li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
<li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Writing a File (Cont.)</h2>
<div class="col-4">
<br/>
<ul>
<li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Context Manager</h2>
<p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p>
<p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p>
<p>They are used to run certain functions before and after a block of code.</p>
<br/><br/>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
<li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
<li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p>
<p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p>
<div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div>
<p style="clear:both;"><br/>Will become</p>
<div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div>
<p style="clear:both"><br/>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p>
<div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div>
</section> element

element

element
<h2>Writing a File</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
<li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
<li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
</div>
</div> element

element

element
<h2>Writing a File (Cont.)</h2> element

element
<div class="col-4">
<br/>
<ul>
<li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
</div>
</div> element

element

element
<h2>Context Manager</h2> element

element
<p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p> element

element
<p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p> element

element
<p>They are used to run certain functions before and after a block of code.</p> element

element
<br/> element
<br/> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
<li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
<li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p> element

element
<p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p> element

element
<div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div> element

element
<p style="clear:both;"><br/>Will become</p> element

element
<div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div> element

element
<p style="clear:both"><br/>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p> element

element
<div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div> element

element
<section>
        <h2>Writing a File</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
                <li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
                <li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Expand Your Developer Toolkit</h2>
        <ul>
            <li>Pair programming</li>
            <li>Git strategies</li>
            <li>Test-driven development</li>
            <li>HTTP lifecycle</li>
            <li>Computer science topics</li>
            <li>Introduction to dev ops</li>
            <li>Analytics and error reporting</li>
            <li>Project: Work in a group to build a test-driven Django application</li>
        </ul>
    </section>
<section>
        <h2>AngularJS and Building Custom APIs</h2>
        <ul>
            <li>Basics of AngularJS</li>
            <li>Build a Basecamp clone with AngularJS</li>
            <li>Building your own custom API with Django and Tastypie</li>
            <li>Integrating Django with AngularJS</li>
            <li>Final Project: Demonstrate mastery with Django and AngularJS</li>
        </ul>
    </section>
<section>
        <h2>Prepping for Life After Bootcamp</h2>
        <ul>
            <li>Interview Prep</li>
            <li>Presentation Prep</li>
            <li>Development ecosystem</li>
        </ul>
        <p><a href="#/2">Back to top</a></p>
    </section>
<section>
    <h2>More than an education</h2>
    <p>There are a lot of bootcamps out there. At RocketU, you'll be surrounded by the 170+ amazing tech startups at RocketSpace.</p>
    <br>
    <img src="/static/img/rocketspace-name-logo-large-300x116.png" id="rocketSpaceLogo">
</section>

element
<section>
<h2>A network of your own</h2>
<p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p>
</section> element

element
<section>
<h2>RocketSpace staff</h2>
</section> element

element
<section>
<h2>Your instructors</h2>
<h4>Yeti</h4>
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div>
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div>
<div class="footer">
</div>
</section> element

element
<h2>A network of your own</h2> element

element
<p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p> element

element

element
<h2>RocketSpace staff</h2> element

element

element
<h2>Your instructors</h2> element

element
<h4>Yeti</h4> element

element
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div> element

element
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div> element

element
<div class="footer">
</div> element

element

element
<h2>Your classmates</h2> element

element
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul> element

element
<p><a href="#/4">Back to top</a></p> element

element

element
<h2>Prove you can program.</h2> element

element
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p> element

element
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p> element

element
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul> element

element
<section>
        <h2>A network of your own</h2>
        <p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p>
    </section>
<section>
        <h2>Writing a File (Cont.)</h2>
        <div class="col-4">
            <br>
            <ul>
                <li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br><br><br><br><br></li>
                <li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br><br><br><br><br></li>
                <li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="3">
                <pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Context Manager</h2>
        <p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p>
        <p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p>
        <p>They are used to run certain functions before and after a block of code.</p>
        <br><br>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
                <li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
                <li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p>
        <p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p>
        <div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div>
        <p style="clear:both;"><br>Will become</p>
        <div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div>
        <p style="clear:both"><br>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p>
        <div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div>
    </section>
<section>
        <h2>RocketSpace staff</h2>
    </section>

element
<h2>Your instructors</h2> element

element
<h4>Yeti</h4> element

element
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div> element

element
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div> element

element
<div class="footer">
</div> element

element

element
<h2>Your classmates</h2> element

element
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul> element

element
<p><a href="#/4">Back to top</a></p> element

element

element
<h2>Prove you can program.</h2> element

element
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p> element

element
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p> element

element
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul> element

element
<section>
        <h2>Your classmates</h2>
        <ul>
            <li>A brain</li>
            <li>An athlete</li>
            <li>A basket case</li>
            <li>A princess</li>
            <li>And a criminal</li>
        </ul>
        <p><a href="#/4">Back to top</a></p>
    </section>
<section class="titleSlide" data-background="#168eae">
                    <h1>
    File Manipulation
</h1>
                    <a id="yetiLogo" href="http://www.yetihq.com/"><img src="/static/img/yeti-power.png"></a>
                </section>
<section>
    <h2>Brief Python History</h2>
    <p>Python is a scripting language, which means at its core it has a bunch of functionality built in for operations like file manipulation.</p>
    <ul>
        <li>Python was created by Guido van Rossum, Benevolant Dictator for Life (BDFL), in the late 1980's.</li>
        <li>Python has released major versions 1, 2, and 3</li>
        <li>Version 3 of python had some backwards incompatible changes with version 2, so they also created 2.6 and 2.7.</li>
        <li>Many people still use python 2.7 over 3, especially because major operating systems have not converted over yet.</li>
        <li>The community is still slowly making the transition from python 2 to 3 even though 3 was released in December 2008.</li>
        <li>2.7 will be the last release in the version 2 line, it was released in July 2010.</li>
    </ul>
</section>

element
<section>
<h2>Directories and Files</h2>
<p>Python has a library called <code>os</code> which contains scripting utility functions.</p>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br/><br/></li>
<li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br/><br/></li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">import os

print os.getcwd()</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="7">
<pre><code class="python">
print os.getcwd()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<ul>
<li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
<li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
</ul>
</section> element

element

element
<h2>Directories and Files</h2> element

element
<p>Python has a library called <code>os</code> which contains scripting utility functions.</p> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br/><br/></li>
<li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br/><br/></li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">import os

print os.getcwd()</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="7">
<pre><code class="python">
print os.getcwd()
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<ul>
<li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
<li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
</ul> element

element
<section>
        <h2>Directories and Files</h2>
        <p>Python has a library called <code>os</code> which contains scripting utility functions.</p>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br><br><br></li>
                <li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br><br><br></li>
                <li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br><br></li>
                <li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br><br></li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">import os

print os.getcwd()</code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="3">
                <pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="7">
                <pre><code class="python">
print os.getcwd()
                </code></pre>
            </div>
        </div>
    </section>
<section>
    <h2>Prove you can program.</h2>
    <p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
    <p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
    <ul>
        <li><a target="_blank" href="http://codingbat.com/python">Coding Bat</a></li>
        <li><a target="_blank" href="http://www.pythonchallenge.com/">Python Challenge</a></li>
        <li><a target="_blank" href="http://www.coderbyte.com/">Coderbyte</a></li>
    </ul>
</section>
<section>
    <h2>Learn web development. Build awesome things.</h2>
    <p>
        You quit your job, you told your friends and family you're doing something crazy, maybe you moved here. You're ready to learn, intensively, for the next twelve weeks. By the time you're done, you'll be able to build pretty much anything you see on the internet.
    </p>
</section>

element
<section>
<h2>What you'll be learning</h2>
<p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p>
<ul>
<li><a href="#/2/1">Prework</a></li>
<li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
<li><a href="#/2/3">Integrating JavaScript and Design</a></li>
<li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
<li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
<li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
</ul>
</section> element

element
<section>
<h2>Prework</h2>
<p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p>
<ul>
<li>Command Line: Give your computer instructions like a real programmer</li>
<li>HTML: Learn the basic building blocks of the front-facing web</li>
<li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
<li>Git: Version control is a lifesaver</li>
<li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
<li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
<li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
</ul>
</section> element

element
<section>
<h2>Object-oriented Python and Beginner Django</h2>
<ul>
<li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
<li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
<li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
<li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
<li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
<li>Project: Build a Django application with user authentication and database storage</li>
</ul>
</section> element

element
<section>
<h2>Integrating JavaScript and Design</h2>
<ul>
<li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
<li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
<li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
<li>Using third-party APIs: Query external services like Google and Instagram</li>
<li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
<li>Project: Integrate front-end technologies for a more interactive Django application</li>
</ul>
</section> element

element
<section>
<h2>Expand Your Developer Toolkit</h2>
<ul>
<li>Pair programming</li>
<li>Git strategies</li>
<li>Test-driven development</li>
<li>HTTP lifecycle</li>
<li>Computer science topics</li>
<li>Introduction to dev ops</li>
<li>Analytics and error reporting</li>
<li>Project: Work in a group to build a test-driven Django application</li>
</ul>
</section> element

element
<section>
<h2>AngularJS and Building Custom APIs</h2>
<ul>
<li>Basics of AngularJS</li>
<li>Build a Basecamp clone with AngularJS</li>
<li>Building your own custom API with Django and Tastypie</li>
<li>Integrating Django with AngularJS</li>
<li>Final Project: Demonstrate mastery with Django and AngularJS</li>
</ul>
</section> element

element
<section>
<h2>Prepping for Life After Bootcamp</h2>
<ul>
<li>Interview Prep</li>
<li>Presentation Prep</li>
<li>Development ecosystem</li>
</ul>
<p><a href="#/2">Back to top</a></p>
</section> element

element

element
<h2>What you'll be learning</h2> element

element
<p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p> element

element
<ul>
<li><a href="#/2/1">Prework</a></li>
<li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
<li><a href="#/2/3">Integrating JavaScript and Design</a></li>
<li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
<li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
<li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
</ul> element

element

element
<h2>Prework</h2> element

element
<p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p> element

element
<ul>
<li>Command Line: Give your computer instructions like a real programmer</li>
<li>HTML: Learn the basic building blocks of the front-facing web</li>
<li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
<li>Git: Version control is a lifesaver</li>
<li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
<li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
<li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
</ul> element

element

element
<h2>Object-oriented Python and Beginner Django</h2> element

element
<ul>
<li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
<li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
<li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
<li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
<li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
<li>Project: Build a Django application with user authentication and database storage</li>
</ul> element

element

element
<h2>Integrating JavaScript and Design</h2> element

element
<ul>
<li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
<li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
<li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
<li>Using third-party APIs: Query external services like Google and Instagram</li>
<li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
<li>Project: Integrate front-end technologies for a more interactive Django application</li>
</ul> element

element

element
<h2>Expand Your Developer Toolkit</h2> element

element
<ul>
<li>Pair programming</li>
<li>Git strategies</li>
<li>Test-driven development</li>
<li>HTTP lifecycle</li>
<li>Computer science topics</li>
<li>Introduction to dev ops</li>
<li>Analytics and error reporting</li>
<li>Project: Work in a group to build a test-driven Django application</li>
</ul> element

element

element
<h2>AngularJS and Building Custom APIs</h2> element

element
<ul>
<li>Basics of AngularJS</li>
<li>Build a Basecamp clone with AngularJS</li>
<li>Building your own custom API with Django and Tastypie</li>
<li>Integrating Django with AngularJS</li>
<li>Final Project: Demonstrate mastery with Django and AngularJS</li>
</ul> element

element

element
<h2>Prepping for Life After Bootcamp</h2> element

element
<ul>
<li>Interview Prep</li>
<li>Presentation Prep</li>
<li>Development ecosystem</li>
</ul> element

element
<p><a href="#/2">Back to top</a></p> element

element
<section>
        <h2>What you'll be learning</h2>
        <p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p>
        <ul>
            <li><a href="#/2/1">Prework</a></li>
            <li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
            <li><a href="#/2/3">Integrating JavaScript and Design</a></li>
            <li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
            <li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
            <li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
        </ul>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <ul>
            <li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
            <li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
        </ul>
    </section>

element
<section>
<h2>Reading a File</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
<li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
<li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
<li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
<li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre>

Hello world!
Hello universe!
                </pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="4">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="6">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Reading a File (Cont.)</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
<li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
<li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
<li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="2">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p>
<ul>
<li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
<li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
<li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
<li>Create new text files for testing out your function!</li>
</ul>
</section> element

element

element
<h2>Reading a File</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
<li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
<li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
<li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
<li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre>

Hello world!
Hello universe!
                </pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="4">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="6">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
</div>
</div> element

element

element
<h2>Reading a File (Cont.)</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
<li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
<li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
<li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="2">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p> element

element
<ul>
<li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
<li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
<li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
<li>Create new text files for testing out your function!</li>
</ul> element

element
<section>
        <h2>Reading a File</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
                <li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
                <li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
                <li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
                <li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre>

Hello world!
Hello universe!
                </pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="4">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="6">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Prework</h2>
        <p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p>
        <ul>
            <li>Command Line: Give your computer instructions like a real programmer</li>
            <li>HTML: Learn the basic building blocks of the front-facing web</li>
            <li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
            <li>Git: Version control is a lifesaver</li>
            <li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
            <li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
            <li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
        </ul>
    </section>
<section>
        <h2>Object-oriented Python and Beginner Django</h2>
        <ul>
            <li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
            <li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
            <li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
            <li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
            <li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
            <li>Project: Build a Django application with user authentication and database storage</li>
        </ul>
    </section>
<section>
        <h2>Integrating JavaScript and Design</h2>
        <ul>
            <li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
            <li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
            <li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
            <li>Using third-party APIs: Query external services like Google and Instagram</li>
            <li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
            <li>Project: Integrate front-end technologies for a more interactive Django application</li>
        </ul>
    </section>
<section>
        <h2>Expand Your Developer Toolkit</h2>
        <ul>
            <li>Pair programming</li>
            <li>Git strategies</li>
            <li>Test-driven development</li>
            <li>HTTP lifecycle</li>
            <li>Computer science topics</li>
            <li>Introduction to dev ops</li>
            <li>Analytics and error reporting</li>
            <li>Project: Work in a group to build a test-driven Django application</li>
        </ul>
    </section>
<section>
        <h2>Reading a File (Cont.)</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
                <li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
                <li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
                <li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="2">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p>
        <ul>
            <li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
            <li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
            <li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
            <li>Create new text files for testing out your function!</li>
        </ul>
    </section>

element
<section>
<h2>Writing a File</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
<li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
<li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Writing a File (Cont.)</h2>
<div class="col-4">
<br/>
<ul>
<li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Context Manager</h2>
<p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p>
<p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p>
<p>They are used to run certain functions before and after a block of code.</p>
<br/><br/>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
<li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
<li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p>
<p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p>
<div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div>
<p style="clear:both;"><br/>Will become</p>
<div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div>
<p style="clear:both"><br/>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p>
<div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div>
</section> element

element

element
<h2>Writing a File</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
<li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
<li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
</div>
</div> element

element

element
<h2>Writing a File (Cont.)</h2> element

element
<div class="col-4">
<br/>
<ul>
<li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
</div>
</div> element

element

element
<h2>Context Manager</h2> element

element
<p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p> element

element
<p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p> element

element
<p>They are used to run certain functions before and after a block of code.</p> element

element
<br/> element
<br/> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
<li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
<li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p> element

element
<p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p> element

element
<div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div> element

element
<p style="clear:both;"><br/>Will become</p> element

element
<div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div> element

element
<p style="clear:both"><br/>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p> element

element
<div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div> element

element
<section>
        <h2>Writing a File</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
                <li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
                <li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>AngularJS and Building Custom APIs</h2>
        <ul>
            <li>Basics of AngularJS</li>
            <li>Build a Basecamp clone with AngularJS</li>
            <li>Building your own custom API with Django and Tastypie</li>
            <li>Integrating Django with AngularJS</li>
            <li>Final Project: Demonstrate mastery with Django and AngularJS</li>
        </ul>
    </section>
<section>
        <h2>Prepping for Life After Bootcamp</h2>
        <ul>
            <li>Interview Prep</li>
            <li>Presentation Prep</li>
            <li>Development ecosystem</li>
        </ul>
        <p><a href="#/2">Back to top</a></p>
    </section>
<section>
    <h2>More than an education</h2>
    <p>There are a lot of bootcamps out there. At RocketU, you'll be surrounded by the 170+ amazing tech startups at RocketSpace.</p>
    <br>
    <img src="/static/img/rocketspace-name-logo-large-300x116.png" id="rocketSpaceLogo">
</section>

element
<section>
<h2>A network of your own</h2>
<p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p>
</section> element

element
<section>
<h2>RocketSpace staff</h2>
</section> element

element
<section>
<h2>Your instructors</h2>
<h4>Yeti</h4>
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div>
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div>
<div class="footer">
</div>
</section> element

element
<h2>A network of your own</h2> element

element
<p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p> element

element

element
<h2>RocketSpace staff</h2> element

element

element
<h2>Your instructors</h2> element

element
<h4>Yeti</h4> element

element
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div> element

element
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div> element

element
<div class="footer">
</div> element

element

element
<h2>Your classmates</h2> element

element
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul> element

element
<p><a href="#/4">Back to top</a></p> element

element

element
<h2>Prove you can program.</h2> element

element
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p> element

element
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p> element

element
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul> element

element
<section>
        <h2>A network of your own</h2>
        <p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p>
    </section>
<section>
        <h2>Writing a File (Cont.)</h2>
        <div class="col-4">
            <br>
            <ul>
                <li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br><br><br><br><br></li>
                <li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br><br><br><br><br></li>
                <li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="3">
                <pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Context Manager</h2>
        <p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p>
        <p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p>
        <p>They are used to run certain functions before and after a block of code.</p>
        <br><br>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
                <li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
                <li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p>
        <p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p>
        <div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div>
        <p style="clear:both;"><br>Will become</p>
        <div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div>
        <p style="clear:both"><br>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p>
        <div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div>
    </section>
<section>
        <h2>RocketSpace staff</h2>
    </section>

element
<h2>Your instructors</h2> element

element
<h4>Yeti</h4> element

element
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div> element

element
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div> element

element
<div class="footer">
</div> element

element

element
<h2>Your classmates</h2> element

element
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul> element

element
<p><a href="#/4">Back to top</a></p> element

element

element
<h2>Prove you can program.</h2> element

element
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p> element

element
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p> element

element
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul> element

element
<section>
        <h2>Your classmates</h2>
        <ul>
            <li>A brain</li>
            <li>An athlete</li>
            <li>A basket case</li>
            <li>A princess</li>
            <li>And a criminal</li>
        </ul>
        <p><a href="#/4">Back to top</a></p>
    </section>
<section class="titleSlide" data-background="#168eae">
                    <h1>
    File Manipulation
</h1>
                    <a id="yetiLogo" href="http://www.yetihq.com/"><img src="/static/img/yeti-power.png"></a>
                </section>
<section>
    <h2>Brief Python History</h2>
    <p>Python is a scripting language, which means at its core it has a bunch of functionality built in for operations like file manipulation.</p>
    <ul>
        <li>Python was created by Guido van Rossum, Benevolant Dictator for Life (BDFL), in the late 1980's.</li>
        <li>Python has released major versions 1, 2, and 3</li>
        <li>Version 3 of python had some backwards incompatible changes with version 2, so they also created 2.6 and 2.7.</li>
        <li>Many people still use python 2.7 over 3, especially because major operating systems have not converted over yet.</li>
        <li>The community is still slowly making the transition from python 2 to 3 even though 3 was released in December 2008.</li>
        <li>2.7 will be the last release in the version 2 line, it was released in July 2010.</li>
    </ul>
</section>

element
<section>
<h2>Directories and Files</h2>
<p>Python has a library called <code>os</code> which contains scripting utility functions.</p>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br/><br/></li>
<li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br/><br/></li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">import os

print os.getcwd()</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="7">
<pre><code class="python">
print os.getcwd()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<ul>
<li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
<li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
</ul>
</section> element

element

element
<h2>Directories and Files</h2> element

element
<p>Python has a library called <code>os</code> which contains scripting utility functions.</p> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br/><br/></li>
<li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br/><br/></li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">import os

print os.getcwd()</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="7">
<pre><code class="python">
print os.getcwd()
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<ul>
<li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
<li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
</ul> element

element
<section>
        <h2>Directories and Files</h2>
        <p>Python has a library called <code>os</code> which contains scripting utility functions.</p>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br><br><br></li>
                <li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br><br><br></li>
                <li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br><br></li>
                <li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br><br></li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">import os

print os.getcwd()</code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="3">
                <pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="7">
                <pre><code class="python">
print os.getcwd()
                </code></pre>
            </div>
        </div>
    </section>
<section>
    <h2>Prove you can program.</h2>
    <p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
    <p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
    <ul>
        <li><a target="_blank" href="http://codingbat.com/python">Coding Bat</a></li>
        <li><a target="_blank" href="http://www.pythonchallenge.com/">Python Challenge</a></li>
        <li><a target="_blank" href="http://www.coderbyte.com/">Coderbyte</a></li>
    </ul>
</section>
<section>
    <h2>Learn web development. Build awesome things.</h2>
    <p>
        You quit your job, you told your friends and family you're doing something crazy, maybe you moved here. You're ready to learn, intensively, for the next twelve weeks. By the time you're done, you'll be able to build pretty much anything you see on the internet.
    </p>
</section>

element
<section>
<h2>What you'll be learning</h2>
<p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p>
<ul>
<li><a href="#/2/1">Prework</a></li>
<li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
<li><a href="#/2/3">Integrating JavaScript and Design</a></li>
<li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
<li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
<li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
</ul>
</section> element

element
<section>
<h2>Prework</h2>
<p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p>
<ul>
<li>Command Line: Give your computer instructions like a real programmer</li>
<li>HTML: Learn the basic building blocks of the front-facing web</li>
<li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
<li>Git: Version control is a lifesaver</li>
<li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
<li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
<li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
</ul>
</section> element

element
<section>
<h2>Object-oriented Python and Beginner Django</h2>
<ul>
<li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
<li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
<li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
<li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
<li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
<li>Project: Build a Django application with user authentication and database storage</li>
</ul>
</section> element

element
<section>
<h2>Integrating JavaScript and Design</h2>
<ul>
<li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
<li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
<li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
<li>Using third-party APIs: Query external services like Google and Instagram</li>
<li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
<li>Project: Integrate front-end technologies for a more interactive Django application</li>
</ul>
</section> element

element
<section>
<h2>Expand Your Developer Toolkit</h2>
<ul>
<li>Pair programming</li>
<li>Git strategies</li>
<li>Test-driven development</li>
<li>HTTP lifecycle</li>
<li>Computer science topics</li>
<li>Introduction to dev ops</li>
<li>Analytics and error reporting</li>
<li>Project: Work in a group to build a test-driven Django application</li>
</ul>
</section> element

element
<section>
<h2>AngularJS and Building Custom APIs</h2>
<ul>
<li>Basics of AngularJS</li>
<li>Build a Basecamp clone with AngularJS</li>
<li>Building your own custom API with Django and Tastypie</li>
<li>Integrating Django with AngularJS</li>
<li>Final Project: Demonstrate mastery with Django and AngularJS</li>
</ul>
</section> element

element
<section>
<h2>Prepping for Life After Bootcamp</h2>
<ul>
<li>Interview Prep</li>
<li>Presentation Prep</li>
<li>Development ecosystem</li>
</ul>
<p><a href="#/2">Back to top</a></p>
</section> element

element

element
<h2>What you'll be learning</h2> element

element
<p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p> element

element
<ul>
<li><a href="#/2/1">Prework</a></li>
<li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
<li><a href="#/2/3">Integrating JavaScript and Design</a></li>
<li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
<li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
<li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
</ul> element

element

element
<h2>Prework</h2> element

element
<p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p> element

element
<ul>
<li>Command Line: Give your computer instructions like a real programmer</li>
<li>HTML: Learn the basic building blocks of the front-facing web</li>
<li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
<li>Git: Version control is a lifesaver</li>
<li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
<li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
<li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
</ul> element

element

element
<h2>Object-oriented Python and Beginner Django</h2> element

element
<ul>
<li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
<li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
<li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
<li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
<li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
<li>Project: Build a Django application with user authentication and database storage</li>
</ul> element

element

element
<h2>Integrating JavaScript and Design</h2> element

element
<ul>
<li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
<li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
<li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
<li>Using third-party APIs: Query external services like Google and Instagram</li>
<li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
<li>Project: Integrate front-end technologies for a more interactive Django application</li>
</ul> element

element

element
<h2>Expand Your Developer Toolkit</h2> element

element
<ul>
<li>Pair programming</li>
<li>Git strategies</li>
<li>Test-driven development</li>
<li>HTTP lifecycle</li>
<li>Computer science topics</li>
<li>Introduction to dev ops</li>
<li>Analytics and error reporting</li>
<li>Project: Work in a group to build a test-driven Django application</li>
</ul> element

element

element
<h2>AngularJS and Building Custom APIs</h2> element

element
<ul>
<li>Basics of AngularJS</li>
<li>Build a Basecamp clone with AngularJS</li>
<li>Building your own custom API with Django and Tastypie</li>
<li>Integrating Django with AngularJS</li>
<li>Final Project: Demonstrate mastery with Django and AngularJS</li>
</ul> element

element

element
<h2>Prepping for Life After Bootcamp</h2> element

element
<ul>
<li>Interview Prep</li>
<li>Presentation Prep</li>
<li>Development ecosystem</li>
</ul> element

element
<p><a href="#/2">Back to top</a></p> element

element
<section>
        <h2>What you'll be learning</h2>
        <p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p>
        <ul>
            <li><a href="#/2/1">Prework</a></li>
            <li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
            <li><a href="#/2/3">Integrating JavaScript and Design</a></li>
            <li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
            <li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
            <li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
        </ul>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <ul>
            <li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
            <li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
        </ul>
    </section>

element
<section>
<h2>Reading a File</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
<li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
<li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
<li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
<li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre>

Hello world!
Hello universe!
                </pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="4">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="6">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Reading a File (Cont.)</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
<li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
<li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
<li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="2">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p>
<ul>
<li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
<li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
<li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
<li>Create new text files for testing out your function!</li>
</ul>
</section> element

element

element
<h2>Reading a File</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
<li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
<li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
<li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
<li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre>

Hello world!
Hello universe!
                </pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="4">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="6">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
</div>
</div> element

element

element
<h2>Reading a File (Cont.)</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
<li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
<li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
<li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="2">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p> element

element
<ul>
<li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
<li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
<li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
<li>Create new text files for testing out your function!</li>
</ul> element

element
<section>
        <h2>Reading a File</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
                <li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
                <li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
                <li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
                <li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre>

Hello world!
Hello universe!
                </pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="4">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="6">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Prework</h2>
        <p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p>
        <ul>
            <li>Command Line: Give your computer instructions like a real programmer</li>
            <li>HTML: Learn the basic building blocks of the front-facing web</li>
            <li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
            <li>Git: Version control is a lifesaver</li>
            <li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
            <li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
            <li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
        </ul>
    </section>
<section>
        <h2>Object-oriented Python and Beginner Django</h2>
        <ul>
            <li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
            <li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
            <li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
            <li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
            <li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
            <li>Project: Build a Django application with user authentication and database storage</li>
        </ul>
    </section>
<section>
        <h2>Integrating JavaScript and Design</h2>
        <ul>
            <li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
            <li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
            <li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
            <li>Using third-party APIs: Query external services like Google and Instagram</li>
            <li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
            <li>Project: Integrate front-end technologies for a more interactive Django application</li>
        </ul>
    </section>
<section>
        <h2>Expand Your Developer Toolkit</h2>
        <ul>
            <li>Pair programming</li>
            <li>Git strategies</li>
            <li>Test-driven development</li>
            <li>HTTP lifecycle</li>
            <li>Computer science topics</li>
            <li>Introduction to dev ops</li>
            <li>Analytics and error reporting</li>
            <li>Project: Work in a group to build a test-driven Django application</li>
        </ul>
    </section>
<section>
        <h2>AngularJS and Building Custom APIs</h2>
        <ul>
            <li>Basics of AngularJS</li>
            <li>Build a Basecamp clone with AngularJS</li>
            <li>Building your own custom API with Django and Tastypie</li>
            <li>Integrating Django with AngularJS</li>
            <li>Final Project: Demonstrate mastery with Django and AngularJS</li>
        </ul>
    </section>
<section>
        <h2>Reading a File (Cont.)</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
                <li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
                <li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
                <li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="2">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p>
        <ul>
            <li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
            <li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
            <li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
            <li>Create new text files for testing out your function!</li>
        </ul>
    </section>

element
<section>
<h2>Writing a File</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
<li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
<li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Writing a File (Cont.)</h2>
<div class="col-4">
<br/>
<ul>
<li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Context Manager</h2>
<p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p>
<p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p>
<p>They are used to run certain functions before and after a block of code.</p>
<br/><br/>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
<li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
<li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p>
<p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p>
<div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div>
<p style="clear:both;"><br/>Will become</p>
<div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div>
<p style="clear:both"><br/>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p>
<div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div>
</section> element

element

element
<h2>Writing a File</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
<li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
<li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
</div>
</div> element

element

element
<h2>Writing a File (Cont.)</h2> element

element
<div class="col-4">
<br/>
<ul>
<li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
</div>
</div> element

element

element
<h2>Context Manager</h2> element

element
<p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p> element

element
<p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p> element

element
<p>They are used to run certain functions before and after a block of code.</p> element

element
<br/> element
<br/> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
<li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
<li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p> element

element
<p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p> element

element
<div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div> element

element
<p style="clear:both;"><br/>Will become</p> element

element
<div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div> element

element
<p style="clear:both"><br/>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p> element

element
<div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div> element

element
<section>
        <h2>Writing a File</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
                <li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
                <li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Prepping for Life After Bootcamp</h2>
        <ul>
            <li>Interview Prep</li>
            <li>Presentation Prep</li>
            <li>Development ecosystem</li>
        </ul>
        <p><a href="#/2">Back to top</a></p>
    </section>
<section>
    <h2>More than an education</h2>
    <p>There are a lot of bootcamps out there. At RocketU, you'll be surrounded by the 170+ amazing tech startups at RocketSpace.</p>
    <br>
    <img src="/static/img/rocketspace-name-logo-large-300x116.png" id="rocketSpaceLogo">
</section>

element
<section>
<h2>A network of your own</h2>
<p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p>
</section> element

element
<section>
<h2>RocketSpace staff</h2>
</section> element

element
<section>
<h2>Your instructors</h2>
<h4>Yeti</h4>
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div>
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div>
<div class="footer">
</div>
</section> element

element
<h2>A network of your own</h2> element

element
<p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p> element

element

element
<h2>RocketSpace staff</h2> element

element

element
<h2>Your instructors</h2> element

element
<h4>Yeti</h4> element

element
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div> element

element
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div> element

element
<div class="footer">
</div> element

element

element
<h2>Your classmates</h2> element

element
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul> element

element
<p><a href="#/4">Back to top</a></p> element

element

element
<h2>Prove you can program.</h2> element

element
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p> element

element
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p> element

element
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul> element

element
<section>
        <h2>A network of your own</h2>
        <p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p>
    </section>
<section>
        <h2>Writing a File (Cont.)</h2>
        <div class="col-4">
            <br>
            <ul>
                <li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br><br><br><br><br></li>
                <li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br><br><br><br><br></li>
                <li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="3">
                <pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Context Manager</h2>
        <p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p>
        <p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p>
        <p>They are used to run certain functions before and after a block of code.</p>
        <br><br>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
                <li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
                <li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p>
        <p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p>
        <div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div>
        <p style="clear:both;"><br>Will become</p>
        <div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div>
        <p style="clear:both"><br>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p>
        <div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div>
    </section>
<section>
        <h2>RocketSpace staff</h2>
    </section>

element
<h2>Your instructors</h2> element

element
<h4>Yeti</h4> element

element
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div> element

element
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div> element

element
<div class="footer">
</div> element

element

element
<h2>Your classmates</h2> element

element
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul> element

element
<p><a href="#/4">Back to top</a></p> element

element

element
<h2>Prove you can program.</h2> element

element
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p> element

element
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p> element

element
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul> element

element
<section>
        <h2>Your classmates</h2>
        <ul>
            <li>A brain</li>
            <li>An athlete</li>
            <li>A basket case</li>
            <li>A princess</li>
            <li>And a criminal</li>
        </ul>
        <p><a href="#/4">Back to top</a></p>
    </section>
<section class="titleSlide" data-background="#168eae">
                    <h1>
    File Manipulation
</h1>
                    <a id="yetiLogo" href="http://www.yetihq.com/"><img src="/static/img/yeti-power.png"></a>
                </section>
<section>
    <h2>Brief Python History</h2>
    <p>Python is a scripting language, which means at its core it has a bunch of functionality built in for operations like file manipulation.</p>
    <ul>
        <li>Python was created by Guido van Rossum, Benevolant Dictator for Life (BDFL), in the late 1980's.</li>
        <li>Python has released major versions 1, 2, and 3</li>
        <li>Version 3 of python had some backwards incompatible changes with version 2, so they also created 2.6 and 2.7.</li>
        <li>Many people still use python 2.7 over 3, especially because major operating systems have not converted over yet.</li>
        <li>The community is still slowly making the transition from python 2 to 3 even though 3 was released in December 2008.</li>
        <li>2.7 will be the last release in the version 2 line, it was released in July 2010.</li>
    </ul>
</section>

element
<section>
<h2>Directories and Files</h2>
<p>Python has a library called <code>os</code> which contains scripting utility functions.</p>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br/><br/></li>
<li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br/><br/></li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">import os

print os.getcwd()</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="7">
<pre><code class="python">
print os.getcwd()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<ul>
<li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
<li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
</ul>
</section> element

element

element
<h2>Directories and Files</h2> element

element
<p>Python has a library called <code>os</code> which contains scripting utility functions.</p> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br/><br/></li>
<li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br/><br/></li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">import os

print os.getcwd()</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="7">
<pre><code class="python">
print os.getcwd()
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<ul>
<li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
<li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
</ul> element

element
<section>
        <h2>Directories and Files</h2>
        <p>Python has a library called <code>os</code> which contains scripting utility functions.</p>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br><br><br></li>
                <li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br><br><br></li>
                <li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br><br></li>
                <li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br><br></li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">import os

print os.getcwd()</code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="3">
                <pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="7">
                <pre><code class="python">
print os.getcwd()
                </code></pre>
            </div>
        </div>
    </section>
<section>
    <h2>Prove you can program.</h2>
    <p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
    <p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
    <ul>
        <li><a target="_blank" href="http://codingbat.com/python">Coding Bat</a></li>
        <li><a target="_blank" href="http://www.pythonchallenge.com/">Python Challenge</a></li>
        <li><a target="_blank" href="http://www.coderbyte.com/">Coderbyte</a></li>
    </ul>
</section>
<section>
    <h2>Learn web development. Build awesome things.</h2>
    <p>
        You quit your job, you told your friends and family you're doing something crazy, maybe you moved here. You're ready to learn, intensively, for the next twelve weeks. By the time you're done, you'll be able to build pretty much anything you see on the internet.
    </p>
</section>

element
<section>
<h2>What you'll be learning</h2>
<p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p>
<ul>
<li><a href="#/2/1">Prework</a></li>
<li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
<li><a href="#/2/3">Integrating JavaScript and Design</a></li>
<li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
<li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
<li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
</ul>
</section> element

element
<section>
<h2>Prework</h2>
<p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p>
<ul>
<li>Command Line: Give your computer instructions like a real programmer</li>
<li>HTML: Learn the basic building blocks of the front-facing web</li>
<li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
<li>Git: Version control is a lifesaver</li>
<li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
<li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
<li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
</ul>
</section> element

element
<section>
<h2>Object-oriented Python and Beginner Django</h2>
<ul>
<li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
<li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
<li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
<li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
<li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
<li>Project: Build a Django application with user authentication and database storage</li>
</ul>
</section> element

element
<section>
<h2>Integrating JavaScript and Design</h2>
<ul>
<li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
<li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
<li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
<li>Using third-party APIs: Query external services like Google and Instagram</li>
<li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
<li>Project: Integrate front-end technologies for a more interactive Django application</li>
</ul>
</section> element

element
<section>
<h2>Expand Your Developer Toolkit</h2>
<ul>
<li>Pair programming</li>
<li>Git strategies</li>
<li>Test-driven development</li>
<li>HTTP lifecycle</li>
<li>Computer science topics</li>
<li>Introduction to dev ops</li>
<li>Analytics and error reporting</li>
<li>Project: Work in a group to build a test-driven Django application</li>
</ul>
</section> element

element
<section>
<h2>AngularJS and Building Custom APIs</h2>
<ul>
<li>Basics of AngularJS</li>
<li>Build a Basecamp clone with AngularJS</li>
<li>Building your own custom API with Django and Tastypie</li>
<li>Integrating Django with AngularJS</li>
<li>Final Project: Demonstrate mastery with Django and AngularJS</li>
</ul>
</section> element

element
<section>
<h2>Prepping for Life After Bootcamp</h2>
<ul>
<li>Interview Prep</li>
<li>Presentation Prep</li>
<li>Development ecosystem</li>
</ul>
<p><a href="#/2">Back to top</a></p>
</section> element

element

element
<h2>What you'll be learning</h2> element

element
<p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p> element

element
<ul>
<li><a href="#/2/1">Prework</a></li>
<li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
<li><a href="#/2/3">Integrating JavaScript and Design</a></li>
<li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
<li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
<li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
</ul> element

element

element
<h2>Prework</h2> element

element
<p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p> element

element
<ul>
<li>Command Line: Give your computer instructions like a real programmer</li>
<li>HTML: Learn the basic building blocks of the front-facing web</li>
<li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
<li>Git: Version control is a lifesaver</li>
<li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
<li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
<li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
</ul> element

element

element
<h2>Object-oriented Python and Beginner Django</h2> element

element
<ul>
<li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
<li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
<li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
<li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
<li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
<li>Project: Build a Django application with user authentication and database storage</li>
</ul> element

element

element
<h2>Integrating JavaScript and Design</h2> element

element
<ul>
<li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
<li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
<li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
<li>Using third-party APIs: Query external services like Google and Instagram</li>
<li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
<li>Project: Integrate front-end technologies for a more interactive Django application</li>
</ul> element

element

element
<h2>Expand Your Developer Toolkit</h2> element

element
<ul>
<li>Pair programming</li>
<li>Git strategies</li>
<li>Test-driven development</li>
<li>HTTP lifecycle</li>
<li>Computer science topics</li>
<li>Introduction to dev ops</li>
<li>Analytics and error reporting</li>
<li>Project: Work in a group to build a test-driven Django application</li>
</ul> element

element

element
<h2>AngularJS and Building Custom APIs</h2> element

element
<ul>
<li>Basics of AngularJS</li>
<li>Build a Basecamp clone with AngularJS</li>
<li>Building your own custom API with Django and Tastypie</li>
<li>Integrating Django with AngularJS</li>
<li>Final Project: Demonstrate mastery with Django and AngularJS</li>
</ul> element

element

element
<h2>Prepping for Life After Bootcamp</h2> element

element
<ul>
<li>Interview Prep</li>
<li>Presentation Prep</li>
<li>Development ecosystem</li>
</ul> element

element
<p><a href="#/2">Back to top</a></p> element

element
<section>
        <h2>What you'll be learning</h2>
        <p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p>
        <ul>
            <li><a href="#/2/1">Prework</a></li>
            <li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
            <li><a href="#/2/3">Integrating JavaScript and Design</a></li>
            <li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
            <li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
            <li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
        </ul>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <ul>
            <li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
            <li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
        </ul>
    </section>

element
<section>
<h2>Reading a File</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
<li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
<li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
<li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
<li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre>

Hello world!
Hello universe!
                </pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="4">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="6">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Reading a File (Cont.)</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
<li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
<li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
<li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="2">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p>
<ul>
<li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
<li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
<li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
<li>Create new text files for testing out your function!</li>
</ul>
</section> element

element

element
<h2>Reading a File</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
<li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
<li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
<li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
<li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre>

Hello world!
Hello universe!
                </pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="4">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="6">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
</div>
</div> element

element

element
<h2>Reading a File (Cont.)</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
<li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
<li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
<li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="2">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p> element

element
<ul>
<li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
<li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
<li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
<li>Create new text files for testing out your function!</li>
</ul> element

element
<section>
        <h2>Reading a File</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
                <li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
                <li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
                <li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
                <li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre>

Hello world!
Hello universe!
                </pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="4">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="6">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Prework</h2>
        <p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p>
        <ul>
            <li>Command Line: Give your computer instructions like a real programmer</li>
            <li>HTML: Learn the basic building blocks of the front-facing web</li>
            <li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
            <li>Git: Version control is a lifesaver</li>
            <li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
            <li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
            <li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
        </ul>
    </section>
<section>
        <h2>Object-oriented Python and Beginner Django</h2>
        <ul>
            <li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
            <li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
            <li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
            <li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
            <li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
            <li>Project: Build a Django application with user authentication and database storage</li>
        </ul>
    </section>
<section>
        <h2>Integrating JavaScript and Design</h2>
        <ul>
            <li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
            <li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
            <li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
            <li>Using third-party APIs: Query external services like Google and Instagram</li>
            <li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
            <li>Project: Integrate front-end technologies for a more interactive Django application</li>
        </ul>
    </section>
<section>
        <h2>Reading a File (Cont.)</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
                <li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
                <li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
                <li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="2">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p>
        <ul>
            <li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
            <li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
            <li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
            <li>Create new text files for testing out your function!</li>
        </ul>
    </section>
<section>
        <h2>Expand Your Developer Toolkit</h2>
        <ul>
            <li>Pair programming</li>
            <li>Git strategies</li>
            <li>Test-driven development</li>
            <li>HTTP lifecycle</li>
            <li>Computer science topics</li>
            <li>Introduction to dev ops</li>
            <li>Analytics and error reporting</li>
            <li>Project: Work in a group to build a test-driven Django application</li>
        </ul>
    </section>
<section>
        <h2>AngularJS and Building Custom APIs</h2>
        <ul>
            <li>Basics of AngularJS</li>
            <li>Build a Basecamp clone with AngularJS</li>
            <li>Building your own custom API with Django and Tastypie</li>
            <li>Integrating Django with AngularJS</li>
            <li>Final Project: Demonstrate mastery with Django and AngularJS</li>
        </ul>
    </section>
<section>
        <h2>Prepping for Life After Bootcamp</h2>
        <ul>
            <li>Interview Prep</li>
            <li>Presentation Prep</li>
            <li>Development ecosystem</li>
        </ul>
        <p><a href="#/2">Back to top</a></p>
    </section>
<section>
    <h2>More than an education</h2>
    <p>There are a lot of bootcamps out there. At RocketU, you'll be surrounded by the 170+ amazing tech startups at RocketSpace.</p>
    <br>
    <img src="/static/img/rocketspace-name-logo-large-300x116.png" id="rocketSpaceLogo">
</section>

element
<section>
<h2>A network of your own</h2>
<p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p>
</section> element

element
<section>
<h2>RocketSpace staff</h2>
</section> element

element
<section>
<h2>Your instructors</h2>
<h4>Yeti</h4>
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div>
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div>
<div class="footer">
</div>
</section> element

element
<h2>A network of your own</h2> element

element
<p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p> element

element

element
<h2>RocketSpace staff</h2> element

element

element
<h2>Your instructors</h2> element

element
<h4>Yeti</h4> element

element
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div> element

element
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div> element

element
<div class="footer">
</div> element

element

element
<h2>Your classmates</h2> element

element
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul> element

element
<p><a href="#/4">Back to top</a></p> element

element

element
<h2>Prove you can program.</h2> element

element
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p> element

element
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p> element

element
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul> element

element
<section>
        <h2>A network of your own</h2>
        <p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p>
    </section>

element
<section>
<h2>Writing a File</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
<li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
<li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Writing a File (Cont.)</h2>
<div class="col-4">
<br/>
<ul>
<li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Context Manager</h2>
<p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p>
<p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p>
<p>They are used to run certain functions before and after a block of code.</p>
<br/><br/>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
<li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
<li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p>
<p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p>
<div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div>
<p style="clear:both;"><br/>Will become</p>
<div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div>
<p style="clear:both"><br/>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p>
<div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div>
</section> element

element

element
<h2>Writing a File</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
<li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
<li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
</div>
</div> element

element

element
<h2>Writing a File (Cont.)</h2> element

element
<div class="col-4">
<br/>
<ul>
<li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
</div>
</div> element

element

element
<h2>Context Manager</h2> element

element
<p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p> element

element
<p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p> element

element
<p>They are used to run certain functions before and after a block of code.</p> element

element
<br/> element
<br/> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
<li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
<li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p> element

element
<p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p> element

element
<div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div> element

element
<p style="clear:both;"><br/>Will become</p> element

element
<div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div> element

element
<p style="clear:both"><br/>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p> element

element
<div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div> element

element
<section>
        <h2>Writing a File</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
                <li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
                <li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>RocketSpace staff</h2>
    </section>

element
<h2>Your instructors</h2> element

element
<h4>Yeti</h4> element

element
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div> element

element
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div> element

element
<div class="footer">
</div> element

element

element
<h2>Your classmates</h2> element

element
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul> element

element
<p><a href="#/4">Back to top</a></p> element

element

element
<h2>Prove you can program.</h2> element

element
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p> element

element
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p> element

element
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul> element

element
<section>
        <h2>Your classmates</h2>
        <ul>
            <li>A brain</li>
            <li>An athlete</li>
            <li>A basket case</li>
            <li>A princess</li>
            <li>And a criminal</li>
        </ul>
        <p><a href="#/4">Back to top</a></p>
    </section>
<section>
        <h2>Writing a File (Cont.)</h2>
        <div class="col-4">
            <br>
            <ul>
                <li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br><br><br><br><br></li>
                <li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br><br><br><br><br></li>
                <li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="3">
                <pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Context Manager</h2>
        <p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p>
        <p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p>
        <p>They are used to run certain functions before and after a block of code.</p>
        <br><br>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
                <li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
                <li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
            </div>
        </div>
    </section>
<section>
    <h2>Prove you can program.</h2>
    <p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
    <p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
    <ul>
        <li><a target="_blank" href="http://codingbat.com/python">Coding Bat</a></li>
        <li><a target="_blank" href="http://www.pythonchallenge.com/">Python Challenge</a></li>
        <li><a target="_blank" href="http://www.coderbyte.com/">Coderbyte</a></li>
    </ul>
</section>
<section>
    <h2>Learn web development. Build awesome things.</h2>
    <p>
        You quit your job, you told your friends and family you're doing something crazy, maybe you moved here. You're ready to learn, intensively, for the next twelve weeks. By the time you're done, you'll be able to build pretty much anything you see on the internet.
    </p>
</section>

element
<section>
<h2>What you'll be learning</h2>
<p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p>
<ul>
<li><a href="#/2/1">Prework</a></li>
<li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
<li><a href="#/2/3">Integrating JavaScript and Design</a></li>
<li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
<li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
<li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
</ul>
</section> element

element
<section>
<h2>Prework</h2>
<p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p>
<ul>
<li>Command Line: Give your computer instructions like a real programmer</li>
<li>HTML: Learn the basic building blocks of the front-facing web</li>
<li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
<li>Git: Version control is a lifesaver</li>
<li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
<li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
<li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
</ul>
</section> element

element
<section>
<h2>Object-oriented Python and Beginner Django</h2>
<ul>
<li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
<li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
<li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
<li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
<li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
<li>Project: Build a Django application with user authentication and database storage</li>
</ul>
</section> element

element
<section>
<h2>Integrating JavaScript and Design</h2>
<ul>
<li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
<li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
<li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
<li>Using third-party APIs: Query external services like Google and Instagram</li>
<li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
<li>Project: Integrate front-end technologies for a more interactive Django application</li>
</ul>
</section> element

element
<section>
<h2>Expand Your Developer Toolkit</h2>
<ul>
<li>Pair programming</li>
<li>Git strategies</li>
<li>Test-driven development</li>
<li>HTTP lifecycle</li>
<li>Computer science topics</li>
<li>Introduction to dev ops</li>
<li>Analytics and error reporting</li>
<li>Project: Work in a group to build a test-driven Django application</li>
</ul>
</section> element

element
<section>
<h2>AngularJS and Building Custom APIs</h2>
<ul>
<li>Basics of AngularJS</li>
<li>Build a Basecamp clone with AngularJS</li>
<li>Building your own custom API with Django and Tastypie</li>
<li>Integrating Django with AngularJS</li>
<li>Final Project: Demonstrate mastery with Django and AngularJS</li>
</ul>
</section> element

element
<section>
<h2>Prepping for Life After Bootcamp</h2>
<ul>
<li>Interview Prep</li>
<li>Presentation Prep</li>
<li>Development ecosystem</li>
</ul>
<p><a href="#/2">Back to top</a></p>
</section> element

element

element
<h2>What you'll be learning</h2> element

element
<p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p> element

element
<ul>
<li><a href="#/2/1">Prework</a></li>
<li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
<li><a href="#/2/3">Integrating JavaScript and Design</a></li>
<li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
<li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
<li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
</ul> element

element

element
<h2>Prework</h2> element

element
<p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p> element

element
<ul>
<li>Command Line: Give your computer instructions like a real programmer</li>
<li>HTML: Learn the basic building blocks of the front-facing web</li>
<li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
<li>Git: Version control is a lifesaver</li>
<li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
<li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
<li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
</ul> element

element

element
<h2>Object-oriented Python and Beginner Django</h2> element

element
<ul>
<li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
<li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
<li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
<li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
<li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
<li>Project: Build a Django application with user authentication and database storage</li>
</ul> element

element

element
<h2>Integrating JavaScript and Design</h2> element

element
<ul>
<li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
<li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
<li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
<li>Using third-party APIs: Query external services like Google and Instagram</li>
<li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
<li>Project: Integrate front-end technologies for a more interactive Django application</li>
</ul> element

element

element
<h2>Expand Your Developer Toolkit</h2> element

element
<ul>
<li>Pair programming</li>
<li>Git strategies</li>
<li>Test-driven development</li>
<li>HTTP lifecycle</li>
<li>Computer science topics</li>
<li>Introduction to dev ops</li>
<li>Analytics and error reporting</li>
<li>Project: Work in a group to build a test-driven Django application</li>
</ul> element

element

element
<h2>AngularJS and Building Custom APIs</h2> element

element
<ul>
<li>Basics of AngularJS</li>
<li>Build a Basecamp clone with AngularJS</li>
<li>Building your own custom API with Django and Tastypie</li>
<li>Integrating Django with AngularJS</li>
<li>Final Project: Demonstrate mastery with Django and AngularJS</li>
</ul> element

element

element
<h2>Prepping for Life After Bootcamp</h2> element

element
<ul>
<li>Interview Prep</li>
<li>Presentation Prep</li>
<li>Development ecosystem</li>
</ul> element

element
<p><a href="#/2">Back to top</a></p> element

element
<section>
        <h2>What you'll be learning</h2>
        <p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p>
        <ul>
            <li><a href="#/2/1">Prework</a></li>
            <li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
            <li><a href="#/2/3">Integrating JavaScript and Design</a></li>
            <li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
            <li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
            <li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
        </ul>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p>
        <p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p>
        <div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div>
        <p style="clear:both;"><br>Will become</p>
        <div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div>
        <p style="clear:both"><br>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p>
        <div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div>
    </section>
<section class="titleSlide" data-background="#168eae">
                    <h1>
    File Manipulation
</h1>
                    <a id="yetiLogo" href="http://www.yetihq.com/"><img src="/static/img/yeti-power.png"></a>
                </section>
<section>
    <h2>Brief Python History</h2>
    <p>Python is a scripting language, which means at its core it has a bunch of functionality built in for operations like file manipulation.</p>
    <ul>
        <li>Python was created by Guido van Rossum, Benevolant Dictator for Life (BDFL), in the late 1980's.</li>
        <li>Python has released major versions 1, 2, and 3</li>
        <li>Version 3 of python had some backwards incompatible changes with version 2, so they also created 2.6 and 2.7.</li>
        <li>Many people still use python 2.7 over 3, especially because major operating systems have not converted over yet.</li>
        <li>The community is still slowly making the transition from python 2 to 3 even though 3 was released in December 2008.</li>
        <li>2.7 will be the last release in the version 2 line, it was released in July 2010.</li>
    </ul>
</section>

element
<section>
<h2>Directories and Files</h2>
<p>Python has a library called <code>os</code> which contains scripting utility functions.</p>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br/><br/></li>
<li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br/><br/></li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">import os

print os.getcwd()</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="7">
<pre><code class="python">
print os.getcwd()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<ul>
<li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
<li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
</ul>
</section> element

element

element
<h2>Directories and Files</h2> element

element
<p>Python has a library called <code>os</code> which contains scripting utility functions.</p> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br/><br/></li>
<li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br/><br/></li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">import os

print os.getcwd()</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="7">
<pre><code class="python">
print os.getcwd()
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<ul>
<li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
<li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
</ul> element

element
<section>
        <h2>Directories and Files</h2>
        <p>Python has a library called <code>os</code> which contains scripting utility functions.</p>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br><br><br></li>
                <li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br><br><br></li>
                <li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br><br></li>
                <li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br><br></li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">import os

print os.getcwd()</code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="3">
                <pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="7">
                <pre><code class="python">
print os.getcwd()
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Prework</h2>
        <p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p>
        <ul>
            <li>Command Line: Give your computer instructions like a real programmer</li>
            <li>HTML: Learn the basic building blocks of the front-facing web</li>
            <li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
            <li>Git: Version control is a lifesaver</li>
            <li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
            <li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
            <li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
        </ul>
    </section>
<section>
        <h2>Object-oriented Python and Beginner Django</h2>
        <ul>
            <li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
            <li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
            <li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
            <li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
            <li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
            <li>Project: Build a Django application with user authentication and database storage</li>
        </ul>
    </section>
<section>
        <h2>Integrating JavaScript and Design</h2>
        <ul>
            <li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
            <li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
            <li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
            <li>Using third-party APIs: Query external services like Google and Instagram</li>
            <li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
            <li>Project: Integrate front-end technologies for a more interactive Django application</li>
        </ul>
    </section>
<section>
        <h2>Expand Your Developer Toolkit</h2>
        <ul>
            <li>Pair programming</li>
            <li>Git strategies</li>
            <li>Test-driven development</li>
            <li>HTTP lifecycle</li>
            <li>Computer science topics</li>
            <li>Introduction to dev ops</li>
            <li>Analytics and error reporting</li>
            <li>Project: Work in a group to build a test-driven Django application</li>
        </ul>
    </section>
<section>
        <h2>AngularJS and Building Custom APIs</h2>
        <ul>
            <li>Basics of AngularJS</li>
            <li>Build a Basecamp clone with AngularJS</li>
            <li>Building your own custom API with Django and Tastypie</li>
            <li>Integrating Django with AngularJS</li>
            <li>Final Project: Demonstrate mastery with Django and AngularJS</li>
        </ul>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <ul>
            <li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
            <li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
        </ul>
    </section>

element
<section>
<h2>Reading a File</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
<li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
<li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
<li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
<li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre>

Hello world!
Hello universe!
                </pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="4">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="6">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Reading a File (Cont.)</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
<li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
<li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
<li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="2">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p>
<ul>
<li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
<li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
<li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
<li>Create new text files for testing out your function!</li>
</ul>
</section> element

element

element
<h2>Reading a File</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
<li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
<li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
<li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
<li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre>

Hello world!
Hello universe!
                </pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="4">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="6">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
</div>
</div> element

element

element
<h2>Reading a File (Cont.)</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
<li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
<li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
<li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="2">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p> element

element
<ul>
<li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
<li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
<li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
<li>Create new text files for testing out your function!</li>
</ul> element

element
<section>
        <h2>Reading a File</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
                <li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
                <li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
                <li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
                <li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre>

Hello world!
Hello universe!
                </pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="4">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="6">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Prepping for Life After Bootcamp</h2>
        <ul>
            <li>Interview Prep</li>
            <li>Presentation Prep</li>
            <li>Development ecosystem</li>
        </ul>
        <p><a href="#/2">Back to top</a></p>
    </section>
<section>
    <h2>More than an education</h2>
    <p>There are a lot of bootcamps out there. At RocketU, you'll be surrounded by the 170+ amazing tech startups at RocketSpace.</p>
    <br>
    <img src="/static/img/rocketspace-name-logo-large-300x116.png" id="rocketSpaceLogo">
</section>

element
<section>
<h2>A network of your own</h2>
<p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p>
</section> element

element
<section>
<h2>RocketSpace staff</h2>
</section> element

element
<section>
<h2>Your instructors</h2>
<h4>Yeti</h4>
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div>
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div>
<div class="footer">
</div>
</section> element

element
<h2>A network of your own</h2> element

element
<p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p> element

element

element
<h2>RocketSpace staff</h2> element

element

element
<h2>Your instructors</h2> element

element
<h4>Yeti</h4> element

element
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div> element

element
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div> element

element
<div class="footer">
</div> element

element

element
<h2>Your classmates</h2> element

element
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul> element

element
<p><a href="#/4">Back to top</a></p> element

element

element
<h2>Prove you can program.</h2> element

element
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p> element

element
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p> element

element
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul> element

element
<section>
        <h2>A network of your own</h2>
        <p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p>
    </section>
<section>
        <h2>Reading a File (Cont.)</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
                <li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
                <li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
                <li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="2">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p>
        <ul>
            <li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
            <li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
            <li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
            <li>Create new text files for testing out your function!</li>
        </ul>
    </section>

element
<section>
<h2>Writing a File</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
<li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
<li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Writing a File (Cont.)</h2>
<div class="col-4">
<br/>
<ul>
<li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Context Manager</h2>
<p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p>
<p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p>
<p>They are used to run certain functions before and after a block of code.</p>
<br/><br/>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
<li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
<li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p>
<p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p>
<div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div>
<p style="clear:both;"><br/>Will become</p>
<div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div>
<p style="clear:both"><br/>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p>
<div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div>
</section> element

element

element
<h2>Writing a File</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
<li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
<li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
</div>
</div> element

element

element
<h2>Writing a File (Cont.)</h2> element

element
<div class="col-4">
<br/>
<ul>
<li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
</div>
</div> element

element

element
<h2>Context Manager</h2> element

element
<p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p> element

element
<p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p> element

element
<p>They are used to run certain functions before and after a block of code.</p> element

element
<br/> element
<br/> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
<li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
<li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p> element

element
<p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p> element

element
<div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div> element

element
<p style="clear:both;"><br/>Will become</p> element

element
<div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div> element

element
<p style="clear:both"><br/>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p> element

element
<div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div> element

element
<section>
        <h2>Writing a File</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
                <li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
                <li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>RocketSpace staff</h2>
    </section>

element
<h2>Your instructors</h2> element

element
<h4>Yeti</h4> element

element
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div> element

element
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div> element

element
<div class="footer">
</div> element

element

element
<h2>Your classmates</h2> element

element
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul> element

element
<p><a href="#/4">Back to top</a></p> element

element

element
<h2>Prove you can program.</h2> element

element
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p> element

element
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p> element

element
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul> element

element
<section>
        <h2>Your classmates</h2>
        <ul>
            <li>A brain</li>
            <li>An athlete</li>
            <li>A basket case</li>
            <li>A princess</li>
            <li>And a criminal</li>
        </ul>
        <p><a href="#/4">Back to top</a></p>
    </section>
<section>
        <h2>Writing a File (Cont.)</h2>
        <div class="col-4">
            <br>
            <ul>
                <li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br><br><br><br><br></li>
                <li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br><br><br><br><br></li>
                <li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="3">
                <pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Context Manager</h2>
        <p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p>
        <p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p>
        <p>They are used to run certain functions before and after a block of code.</p>
        <br><br>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
                <li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
                <li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p>
        <p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p>
        <div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div>
        <p style="clear:both;"><br>Will become</p>
        <div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div>
        <p style="clear:both"><br>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p>
        <div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div>
    </section>
<section>
    <h2>Prove you can program.</h2>
    <p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
    <p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
    <ul>
        <li><a target="_blank" href="http://codingbat.com/python">Coding Bat</a></li>
        <li><a target="_blank" href="http://www.pythonchallenge.com/">Python Challenge</a></li>
        <li><a target="_blank" href="http://www.coderbyte.com/">Coderbyte</a></li>
    </ul>
</section>
<section>
    <h2>Learn web development. Build awesome things.</h2>
    <p>
        You quit your job, you told your friends and family you're doing something crazy, maybe you moved here. You're ready to learn, intensively, for the next twelve weeks. By the time you're done, you'll be able to build pretty much anything you see on the internet.
    </p>
</section>

element
<section>
<h2>What you'll be learning</h2>
<p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p>
<ul>
<li><a href="#/2/1">Prework</a></li>
<li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
<li><a href="#/2/3">Integrating JavaScript and Design</a></li>
<li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
<li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
<li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
</ul>
</section> element

element
<section>
<h2>Prework</h2>
<p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p>
<ul>
<li>Command Line: Give your computer instructions like a real programmer</li>
<li>HTML: Learn the basic building blocks of the front-facing web</li>
<li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
<li>Git: Version control is a lifesaver</li>
<li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
<li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
<li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
</ul>
</section> element

element
<section>
<h2>Object-oriented Python and Beginner Django</h2>
<ul>
<li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
<li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
<li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
<li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
<li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
<li>Project: Build a Django application with user authentication and database storage</li>
</ul>
</section> element

element
<section>
<h2>Integrating JavaScript and Design</h2>
<ul>
<li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
<li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
<li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
<li>Using third-party APIs: Query external services like Google and Instagram</li>
<li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
<li>Project: Integrate front-end technologies for a more interactive Django application</li>
</ul>
</section> element

element
<section>
<h2>Expand Your Developer Toolkit</h2>
<ul>
<li>Pair programming</li>
<li>Git strategies</li>
<li>Test-driven development</li>
<li>HTTP lifecycle</li>
<li>Computer science topics</li>
<li>Introduction to dev ops</li>
<li>Analytics and error reporting</li>
<li>Project: Work in a group to build a test-driven Django application</li>
</ul>
</section> element

element
<section>
<h2>AngularJS and Building Custom APIs</h2>
<ul>
<li>Basics of AngularJS</li>
<li>Build a Basecamp clone with AngularJS</li>
<li>Building your own custom API with Django and Tastypie</li>
<li>Integrating Django with AngularJS</li>
<li>Final Project: Demonstrate mastery with Django and AngularJS</li>
</ul>
</section> element

element
<section>
<h2>Prepping for Life After Bootcamp</h2>
<ul>
<li>Interview Prep</li>
<li>Presentation Prep</li>
<li>Development ecosystem</li>
</ul>
<p><a href="#/2">Back to top</a></p>
</section> element

element

element
<h2>What you'll be learning</h2> element

element
<p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p> element

element
<ul>
<li><a href="#/2/1">Prework</a></li>
<li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
<li><a href="#/2/3">Integrating JavaScript and Design</a></li>
<li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
<li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
<li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
</ul> element

element

element
<h2>Prework</h2> element

element
<p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p> element

element
<ul>
<li>Command Line: Give your computer instructions like a real programmer</li>
<li>HTML: Learn the basic building blocks of the front-facing web</li>
<li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
<li>Git: Version control is a lifesaver</li>
<li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
<li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
<li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
</ul> element

element

element
<h2>Object-oriented Python and Beginner Django</h2> element

element
<ul>
<li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
<li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
<li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
<li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
<li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
<li>Project: Build a Django application with user authentication and database storage</li>
</ul> element

element

element
<h2>Integrating JavaScript and Design</h2> element

element
<ul>
<li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
<li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
<li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
<li>Using third-party APIs: Query external services like Google and Instagram</li>
<li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
<li>Project: Integrate front-end technologies for a more interactive Django application</li>
</ul> element

element

element
<h2>Expand Your Developer Toolkit</h2> element

element
<ul>
<li>Pair programming</li>
<li>Git strategies</li>
<li>Test-driven development</li>
<li>HTTP lifecycle</li>
<li>Computer science topics</li>
<li>Introduction to dev ops</li>
<li>Analytics and error reporting</li>
<li>Project: Work in a group to build a test-driven Django application</li>
</ul> element

element

element
<h2>AngularJS and Building Custom APIs</h2> element

element
<ul>
<li>Basics of AngularJS</li>
<li>Build a Basecamp clone with AngularJS</li>
<li>Building your own custom API with Django and Tastypie</li>
<li>Integrating Django with AngularJS</li>
<li>Final Project: Demonstrate mastery with Django and AngularJS</li>
</ul> element

element

element
<h2>Prepping for Life After Bootcamp</h2> element

element
<ul>
<li>Interview Prep</li>
<li>Presentation Prep</li>
<li>Development ecosystem</li>
</ul> element

element
<p><a href="#/2">Back to top</a></p> element

element
<section>
        <h2>What you'll be learning</h2>
        <p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p>
        <ul>
            <li><a href="#/2/1">Prework</a></li>
            <li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
            <li><a href="#/2/3">Integrating JavaScript and Design</a></li>
            <li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
            <li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
            <li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
        </ul>
    </section>
<section class="titleSlide" data-background="#168eae">
                    <h1>
    File Manipulation
</h1>
                    <a id="yetiLogo" href="http://www.yetihq.com/"><img src="/static/img/yeti-power.png"></a>
                </section>
<section>
    <h2>Brief Python History</h2>
    <p>Python is a scripting language, which means at its core it has a bunch of functionality built in for operations like file manipulation.</p>
    <ul>
        <li>Python was created by Guido van Rossum, Benevolant Dictator for Life (BDFL), in the late 1980's.</li>
        <li>Python has released major versions 1, 2, and 3</li>
        <li>Version 3 of python had some backwards incompatible changes with version 2, so they also created 2.6 and 2.7.</li>
        <li>Many people still use python 2.7 over 3, especially because major operating systems have not converted over yet.</li>
        <li>The community is still slowly making the transition from python 2 to 3 even though 3 was released in December 2008.</li>
        <li>2.7 will be the last release in the version 2 line, it was released in July 2010.</li>
    </ul>
</section>

element
<section>
<h2>Directories and Files</h2>
<p>Python has a library called <code>os</code> which contains scripting utility functions.</p>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br/><br/></li>
<li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br/><br/></li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">import os

print os.getcwd()</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="7">
<pre><code class="python">
print os.getcwd()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<ul>
<li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
<li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
</ul>
</section> element

element

element
<h2>Directories and Files</h2> element

element
<p>Python has a library called <code>os</code> which contains scripting utility functions.</p> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br/><br/></li>
<li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br/><br/></li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">import os

print os.getcwd()</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="7">
<pre><code class="python">
print os.getcwd()
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<ul>
<li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
<li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
</ul> element

element
<section>
        <h2>Directories and Files</h2>
        <p>Python has a library called <code>os</code> which contains scripting utility functions.</p>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br><br><br></li>
                <li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br><br><br></li>
                <li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br><br></li>
                <li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br><br></li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">import os

print os.getcwd()</code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="3">
                <pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="7">
                <pre><code class="python">
print os.getcwd()
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Prework</h2>
        <p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p>
        <ul>
            <li>Command Line: Give your computer instructions like a real programmer</li>
            <li>HTML: Learn the basic building blocks of the front-facing web</li>
            <li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
            <li>Git: Version control is a lifesaver</li>
            <li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
            <li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
            <li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
        </ul>
    </section>
<section>
        <h2>Object-oriented Python and Beginner Django</h2>
        <ul>
            <li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
            <li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
            <li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
            <li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
            <li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
            <li>Project: Build a Django application with user authentication and database storage</li>
        </ul>
    </section>
<section>
        <h2>Integrating JavaScript and Design</h2>
        <ul>
            <li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
            <li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
            <li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
            <li>Using third-party APIs: Query external services like Google and Instagram</li>
            <li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
            <li>Project: Integrate front-end technologies for a more interactive Django application</li>
        </ul>
    </section>
<section>
        <h2>Expand Your Developer Toolkit</h2>
        <ul>
            <li>Pair programming</li>
            <li>Git strategies</li>
            <li>Test-driven development</li>
            <li>HTTP lifecycle</li>
            <li>Computer science topics</li>
            <li>Introduction to dev ops</li>
            <li>Analytics and error reporting</li>
            <li>Project: Work in a group to build a test-driven Django application</li>
        </ul>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <ul>
            <li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
            <li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
        </ul>
    </section>

element
<section>
<h2>Reading a File</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
<li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
<li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
<li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
<li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre>

Hello world!
Hello universe!
                </pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="4">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="6">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Reading a File (Cont.)</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
<li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
<li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
<li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="2">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p>
<ul>
<li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
<li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
<li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
<li>Create new text files for testing out your function!</li>
</ul>
</section> element

element

element
<h2>Reading a File</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
<li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
<li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
<li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
<li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre>

Hello world!
Hello universe!
                </pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="4">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="6">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
</div>
</div> element

element

element
<h2>Reading a File (Cont.)</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
<li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
<li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
<li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="2">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p> element

element
<ul>
<li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
<li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
<li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
<li>Create new text files for testing out your function!</li>
</ul> element

element
<section>
        <h2>Reading a File</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
                <li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
                <li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
                <li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
                <li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre>

Hello world!
Hello universe!
                </pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="4">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="6">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>AngularJS and Building Custom APIs</h2>
        <ul>
            <li>Basics of AngularJS</li>
            <li>Build a Basecamp clone with AngularJS</li>
            <li>Building your own custom API with Django and Tastypie</li>
            <li>Integrating Django with AngularJS</li>
            <li>Final Project: Demonstrate mastery with Django and AngularJS</li>
        </ul>
    </section>
<section>
        <h2>Prepping for Life After Bootcamp</h2>
        <ul>
            <li>Interview Prep</li>
            <li>Presentation Prep</li>
            <li>Development ecosystem</li>
        </ul>
        <p><a href="#/2">Back to top</a></p>
    </section>
<section>
    <h2>More than an education</h2>
    <p>There are a lot of bootcamps out there. At RocketU, you'll be surrounded by the 170+ amazing tech startups at RocketSpace.</p>
    <br>
    <img src="/static/img/rocketspace-name-logo-large-300x116.png" id="rocketSpaceLogo">
</section>

element
<section>
<h2>A network of your own</h2>
<p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p>
</section> element

element
<section>
<h2>RocketSpace staff</h2>
</section> element

element
<section>
<h2>Your instructors</h2>
<h4>Yeti</h4>
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div>
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div>
<div class="footer">
</div>
</section> element

element
<h2>A network of your own</h2> element

element
<p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p> element

element

element
<h2>RocketSpace staff</h2> element

element

element
<h2>Your instructors</h2> element

element
<h4>Yeti</h4> element

element
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div> element

element
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div> element

element
<div class="footer">
</div> element

element

element
<h2>Your classmates</h2> element

element
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul> element

element
<p><a href="#/4">Back to top</a></p> element

element

element
<h2>Prove you can program.</h2> element

element
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p> element

element
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p> element

element
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul> element

element
<section>
        <h2>A network of your own</h2>
        <p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p>
    </section>
<section>
        <h2>Reading a File (Cont.)</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
                <li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
                <li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
                <li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="2">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p>
        <ul>
            <li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
            <li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
            <li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
            <li>Create new text files for testing out your function!</li>
        </ul>
    </section>

element
<section>
<h2>Writing a File</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
<li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
<li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Writing a File (Cont.)</h2>
<div class="col-4">
<br/>
<ul>
<li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Context Manager</h2>
<p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p>
<p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p>
<p>They are used to run certain functions before and after a block of code.</p>
<br/><br/>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
<li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
<li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p>
<p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p>
<div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div>
<p style="clear:both;"><br/>Will become</p>
<div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div>
<p style="clear:both"><br/>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p>
<div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div>
</section> element

element

element
<h2>Writing a File</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
<li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
<li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
</div>
</div> element

element

element
<h2>Writing a File (Cont.)</h2> element

element
<div class="col-4">
<br/>
<ul>
<li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
</div>
</div> element

element

element
<h2>Context Manager</h2> element

element
<p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p> element

element
<p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p> element

element
<p>They are used to run certain functions before and after a block of code.</p> element

element
<br/> element
<br/> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
<li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
<li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p> element

element
<p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p> element

element
<div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div> element

element
<p style="clear:both;"><br/>Will become</p> element

element
<div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div> element

element
<p style="clear:both"><br/>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p> element

element
<div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div> element

element
<section>
        <h2>Writing a File</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
                <li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
                <li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>RocketSpace staff</h2>
    </section>

element
<h2>Your instructors</h2> element

element
<h4>Yeti</h4> element

element
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div> element

element
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div> element

element
<div class="footer">
</div> element

element

element
<h2>Your classmates</h2> element

element
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul> element

element
<p><a href="#/4">Back to top</a></p> element

element

element
<h2>Prove you can program.</h2> element

element
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p> element

element
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p> element

element
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul> element

element
<section>
        <h2>Your classmates</h2>
        <ul>
            <li>A brain</li>
            <li>An athlete</li>
            <li>A basket case</li>
            <li>A princess</li>
            <li>And a criminal</li>
        </ul>
        <p><a href="#/4">Back to top</a></p>
    </section>
<section>
        <h2>Writing a File (Cont.)</h2>
        <div class="col-4">
            <br>
            <ul>
                <li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br><br><br><br><br></li>
                <li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br><br><br><br><br></li>
                <li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="3">
                <pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Context Manager</h2>
        <p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p>
        <p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p>
        <p>They are used to run certain functions before and after a block of code.</p>
        <br><br>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
                <li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
                <li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
            </div>
        </div>
    </section>
<section>
    <h2>Prove you can program.</h2>
    <p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
    <p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
    <ul>
        <li><a target="_blank" href="http://codingbat.com/python">Coding Bat</a></li>
        <li><a target="_blank" href="http://www.pythonchallenge.com/">Python Challenge</a></li>
        <li><a target="_blank" href="http://www.coderbyte.com/">Coderbyte</a></li>
    </ul>
</section>
<section>
    <h2>Learn web development. Build awesome things.</h2>
    <p>
        You quit your job, you told your friends and family you're doing something crazy, maybe you moved here. You're ready to learn, intensively, for the next twelve weeks. By the time you're done, you'll be able to build pretty much anything you see on the internet.
    </p>
</section>

element
<section>
<h2>What you'll be learning</h2>
<p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p>
<ul>
<li><a href="#/2/1">Prework</a></li>
<li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
<li><a href="#/2/3">Integrating JavaScript and Design</a></li>
<li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
<li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
<li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
</ul>
</section> element

element
<section>
<h2>Prework</h2>
<p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p>
<ul>
<li>Command Line: Give your computer instructions like a real programmer</li>
<li>HTML: Learn the basic building blocks of the front-facing web</li>
<li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
<li>Git: Version control is a lifesaver</li>
<li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
<li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
<li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
</ul>
</section> element

element
<section>
<h2>Object-oriented Python and Beginner Django</h2>
<ul>
<li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
<li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
<li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
<li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
<li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
<li>Project: Build a Django application with user authentication and database storage</li>
</ul>
</section> element

element
<section>
<h2>Integrating JavaScript and Design</h2>
<ul>
<li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
<li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
<li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
<li>Using third-party APIs: Query external services like Google and Instagram</li>
<li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
<li>Project: Integrate front-end technologies for a more interactive Django application</li>
</ul>
</section> element

element
<section>
<h2>Expand Your Developer Toolkit</h2>
<ul>
<li>Pair programming</li>
<li>Git strategies</li>
<li>Test-driven development</li>
<li>HTTP lifecycle</li>
<li>Computer science topics</li>
<li>Introduction to dev ops</li>
<li>Analytics and error reporting</li>
<li>Project: Work in a group to build a test-driven Django application</li>
</ul>
</section> element

element
<section>
<h2>AngularJS and Building Custom APIs</h2>
<ul>
<li>Basics of AngularJS</li>
<li>Build a Basecamp clone with AngularJS</li>
<li>Building your own custom API with Django and Tastypie</li>
<li>Integrating Django with AngularJS</li>
<li>Final Project: Demonstrate mastery with Django and AngularJS</li>
</ul>
</section> element

element
<section>
<h2>Prepping for Life After Bootcamp</h2>
<ul>
<li>Interview Prep</li>
<li>Presentation Prep</li>
<li>Development ecosystem</li>
</ul>
<p><a href="#/2">Back to top</a></p>
</section> element

element

element
<h2>What you'll be learning</h2> element

element
<p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p> element

element
<ul>
<li><a href="#/2/1">Prework</a></li>
<li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
<li><a href="#/2/3">Integrating JavaScript and Design</a></li>
<li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
<li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
<li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
</ul> element

element

element
<h2>Prework</h2> element

element
<p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p> element

element
<ul>
<li>Command Line: Give your computer instructions like a real programmer</li>
<li>HTML: Learn the basic building blocks of the front-facing web</li>
<li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
<li>Git: Version control is a lifesaver</li>
<li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
<li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
<li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
</ul> element

element

element
<h2>Object-oriented Python and Beginner Django</h2> element

element
<ul>
<li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
<li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
<li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
<li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
<li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
<li>Project: Build a Django application with user authentication and database storage</li>
</ul> element

element

element
<h2>Integrating JavaScript and Design</h2> element

element
<ul>
<li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
<li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
<li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
<li>Using third-party APIs: Query external services like Google and Instagram</li>
<li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
<li>Project: Integrate front-end technologies for a more interactive Django application</li>
</ul> element

element

element
<h2>Expand Your Developer Toolkit</h2> element

element
<ul>
<li>Pair programming</li>
<li>Git strategies</li>
<li>Test-driven development</li>
<li>HTTP lifecycle</li>
<li>Computer science topics</li>
<li>Introduction to dev ops</li>
<li>Analytics and error reporting</li>
<li>Project: Work in a group to build a test-driven Django application</li>
</ul> element

element

element
<h2>AngularJS and Building Custom APIs</h2> element

element
<ul>
<li>Basics of AngularJS</li>
<li>Build a Basecamp clone with AngularJS</li>
<li>Building your own custom API with Django and Tastypie</li>
<li>Integrating Django with AngularJS</li>
<li>Final Project: Demonstrate mastery with Django and AngularJS</li>
</ul> element

element

element
<h2>Prepping for Life After Bootcamp</h2> element

element
<ul>
<li>Interview Prep</li>
<li>Presentation Prep</li>
<li>Development ecosystem</li>
</ul> element

element
<p><a href="#/2">Back to top</a></p> element

element
<section>
        <h2>What you'll be learning</h2>
        <p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p>
        <ul>
            <li><a href="#/2/1">Prework</a></li>
            <li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
            <li><a href="#/2/3">Integrating JavaScript and Design</a></li>
            <li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
            <li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
            <li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
        </ul>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p>
        <p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p>
        <div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div>
        <p style="clear:both;"><br>Will become</p>
        <div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div>
        <p style="clear:both"><br>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p>
        <div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div>
    </section>
<section class="titleSlide" data-background="#168eae">
                    <h1>
    File Manipulation
</h1>
                    <a id="yetiLogo" href="http://www.yetihq.com/"><img src="/static/img/yeti-power.png"></a>
                </section>
<section>
    <h2>Brief Python History</h2>
    <p>Python is a scripting language, which means at its core it has a bunch of functionality built in for operations like file manipulation.</p>
    <ul>
        <li>Python was created by Guido van Rossum, Benevolant Dictator for Life (BDFL), in the late 1980's.</li>
        <li>Python has released major versions 1, 2, and 3</li>
        <li>Version 3 of python had some backwards incompatible changes with version 2, so they also created 2.6 and 2.7.</li>
        <li>Many people still use python 2.7 over 3, especially because major operating systems have not converted over yet.</li>
        <li>The community is still slowly making the transition from python 2 to 3 even though 3 was released in December 2008.</li>
        <li>2.7 will be the last release in the version 2 line, it was released in July 2010.</li>
    </ul>
</section>

element
<section>
<h2>Directories and Files</h2>
<p>Python has a library called <code>os</code> which contains scripting utility functions.</p>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br/><br/></li>
<li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br/><br/></li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">import os

print os.getcwd()</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="7">
<pre><code class="python">
print os.getcwd()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<ul>
<li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
<li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
</ul>
</section> element

element

element
<h2>Directories and Files</h2> element

element
<p>Python has a library called <code>os</code> which contains scripting utility functions.</p> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br/><br/></li>
<li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br/><br/></li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">import os

print os.getcwd()</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="7">
<pre><code class="python">
print os.getcwd()
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<ul>
<li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
<li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
</ul> element

element
<section>
        <h2>Directories and Files</h2>
        <p>Python has a library called <code>os</code> which contains scripting utility functions.</p>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br><br><br></li>
                <li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br><br><br></li>
                <li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br><br></li>
                <li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br><br></li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">import os

print os.getcwd()</code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="3">
                <pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="7">
                <pre><code class="python">
print os.getcwd()
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Prework</h2>
        <p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p>
        <ul>
            <li>Command Line: Give your computer instructions like a real programmer</li>
            <li>HTML: Learn the basic building blocks of the front-facing web</li>
            <li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
            <li>Git: Version control is a lifesaver</li>
            <li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
            <li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
            <li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
        </ul>
    </section>
<section>
        <h2>Object-oriented Python and Beginner Django</h2>
        <ul>
            <li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
            <li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
            <li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
            <li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
            <li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
            <li>Project: Build a Django application with user authentication and database storage</li>
        </ul>
    </section>
<section>
        <h2>Integrating JavaScript and Design</h2>
        <ul>
            <li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
            <li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
            <li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
            <li>Using third-party APIs: Query external services like Google and Instagram</li>
            <li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
            <li>Project: Integrate front-end technologies for a more interactive Django application</li>
        </ul>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <ul>
            <li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
            <li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
        </ul>
    </section>

element
<section>
<h2>Reading a File</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
<li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
<li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
<li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
<li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre>

Hello world!
Hello universe!
                </pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="4">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="6">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Reading a File (Cont.)</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
<li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
<li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
<li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="2">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p>
<ul>
<li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
<li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
<li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
<li>Create new text files for testing out your function!</li>
</ul>
</section> element

element

element
<h2>Reading a File</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
<li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
<li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
<li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
<li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre>

Hello world!
Hello universe!
                </pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="4">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="6">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
</div>
</div> element

element

element
<h2>Reading a File (Cont.)</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
<li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
<li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
<li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="2">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p> element

element
<ul>
<li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
<li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
<li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
<li>Create new text files for testing out your function!</li>
</ul> element

element
<section>
        <h2>Reading a File</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
                <li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
                <li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
                <li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
                <li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre>

Hello world!
Hello universe!
                </pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="4">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="6">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Expand Your Developer Toolkit</h2>
        <ul>
            <li>Pair programming</li>
            <li>Git strategies</li>
            <li>Test-driven development</li>
            <li>HTTP lifecycle</li>
            <li>Computer science topics</li>
            <li>Introduction to dev ops</li>
            <li>Analytics and error reporting</li>
            <li>Project: Work in a group to build a test-driven Django application</li>
        </ul>
    </section>
<section>
        <h2>AngularJS and Building Custom APIs</h2>
        <ul>
            <li>Basics of AngularJS</li>
            <li>Build a Basecamp clone with AngularJS</li>
            <li>Building your own custom API with Django and Tastypie</li>
            <li>Integrating Django with AngularJS</li>
            <li>Final Project: Demonstrate mastery with Django and AngularJS</li>
        </ul>
    </section>
<section>
        <h2>Prepping for Life After Bootcamp</h2>
        <ul>
            <li>Interview Prep</li>
            <li>Presentation Prep</li>
            <li>Development ecosystem</li>
        </ul>
        <p><a href="#/2">Back to top</a></p>
    </section>
<section>
    <h2>More than an education</h2>
    <p>There are a lot of bootcamps out there. At RocketU, you'll be surrounded by the 170+ amazing tech startups at RocketSpace.</p>
    <br>
    <img src="/static/img/rocketspace-name-logo-large-300x116.png" id="rocketSpaceLogo">
</section>
<section>
        <h2>Reading a File (Cont.)</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
                <li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
                <li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
                <li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="2">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p>
        <ul>
            <li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
            <li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
            <li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
            <li>Create new text files for testing out your function!</li>
        </ul>
    </section>

element
<section>
<h2>Writing a File</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
<li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
<li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Writing a File (Cont.)</h2>
<div class="col-4">
<br/>
<ul>
<li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Context Manager</h2>
<p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p>
<p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p>
<p>They are used to run certain functions before and after a block of code.</p>
<br/><br/>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
<li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
<li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p>
<p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p>
<div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div>
<p style="clear:both;"><br/>Will become</p>
<div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div>
<p style="clear:both"><br/>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p>
<div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div>
</section> element

element

element
<h2>Writing a File</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
<li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
<li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
</div>
</div> element

element

element
<h2>Writing a File (Cont.)</h2> element

element
<div class="col-4">
<br/>
<ul>
<li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
</div>
</div> element

element

element
<h2>Context Manager</h2> element

element
<p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p> element

element
<p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p> element

element
<p>They are used to run certain functions before and after a block of code.</p> element

element
<br/> element
<br/> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
<li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
<li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p> element

element
<p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p> element

element
<div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div> element

element
<p style="clear:both;"><br/>Will become</p> element

element
<div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div> element

element
<p style="clear:both"><br/>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p> element

element
<div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div> element

element
<section>
        <h2>Writing a File</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
                <li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
                <li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
            </div>
        </div>
    </section>

element
<section>
<h2>A network of your own</h2>
<p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p>
</section> element

element
<section>
<h2>RocketSpace staff</h2>
</section> element

element
<section>
<h2>Your instructors</h2>
<h4>Yeti</h4>
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div>
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div>
<div class="footer">
</div>
</section> element

element
<h2>A network of your own</h2> element

element
<p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p> element

element

element
<h2>RocketSpace staff</h2> element

element

element
<h2>Your instructors</h2> element

element
<h4>Yeti</h4> element

element
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div> element

element
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div> element

element
<div class="footer">
</div> element

element

element
<h2>Your classmates</h2> element

element
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul> element

element
<p><a href="#/4">Back to top</a></p> element

element

element
<h2>Prove you can program.</h2> element

element
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p> element

element
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p> element

element
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul> element

element
<section>
        <h2>A network of your own</h2>
        <p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p>
    </section>
<section>
        <h2>RocketSpace staff</h2>
    </section>

element
<h2>Your instructors</h2> element

element
<h4>Yeti</h4> element

element
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div> element

element
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div> element

element
<div class="footer">
</div> element

element

element
<h2>Your classmates</h2> element

element
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul> element

element
<p><a href="#/4">Back to top</a></p> element

element

element
<h2>Prove you can program.</h2> element

element
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p> element

element
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p> element

element
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul> element

element
<section>
        <h2>Your classmates</h2>
        <ul>
            <li>A brain</li>
            <li>An athlete</li>
            <li>A basket case</li>
            <li>A princess</li>
            <li>And a criminal</li>
        </ul>
        <p><a href="#/4">Back to top</a></p>
    </section>
<section>
        <h2>Writing a File (Cont.)</h2>
        <div class="col-4">
            <br>
            <ul>
                <li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br><br><br><br><br></li>
                <li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br><br><br><br><br></li>
                <li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="3">
                <pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Context Manager</h2>
        <p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p>
        <p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p>
        <p>They are used to run certain functions before and after a block of code.</p>
        <br><br>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
                <li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
                <li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p>
        <p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p>
        <div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div>
        <p style="clear:both;"><br>Will become</p>
        <div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div>
        <p style="clear:both"><br>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p>
        <div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div>
    </section>
<section class="titleSlide" data-background="#168eae">
                    <h1>
    File Manipulation
</h1>
                    <a id="yetiLogo" href="http://www.yetihq.com/"><img src="/static/img/yeti-power.png"></a>
                </section>
<section>
    <h2>Brief Python History</h2>
    <p>Python is a scripting language, which means at its core it has a bunch of functionality built in for operations like file manipulation.</p>
    <ul>
        <li>Python was created by Guido van Rossum, Benevolant Dictator for Life (BDFL), in the late 1980's.</li>
        <li>Python has released major versions 1, 2, and 3</li>
        <li>Version 3 of python had some backwards incompatible changes with version 2, so they also created 2.6 and 2.7.</li>
        <li>Many people still use python 2.7 over 3, especially because major operating systems have not converted over yet.</li>
        <li>The community is still slowly making the transition from python 2 to 3 even though 3 was released in December 2008.</li>
        <li>2.7 will be the last release in the version 2 line, it was released in July 2010.</li>
    </ul>
</section>
<section>
    <h2>Prove you can program.</h2>
    <p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
    <p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
    <ul>
        <li><a target="_blank" href="http://codingbat.com/python">Coding Bat</a></li>
        <li><a target="_blank" href="http://www.pythonchallenge.com/">Python Challenge</a></li>
        <li><a target="_blank" href="http://www.coderbyte.com/">Coderbyte</a></li>
    </ul>
</section>
<section>
    <h2>Learn web development. Build awesome things.</h2>
    <p>
        You quit your job, you told your friends and family you're doing something crazy, maybe you moved here. You're ready to learn, intensively, for the next twelve weeks. By the time you're done, you'll be able to build pretty much anything you see on the internet.
    </p>
</section>

element
<section>
<h2>What you'll be learning</h2>
<p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p>
<ul>
<li><a href="#/2/1">Prework</a></li>
<li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
<li><a href="#/2/3">Integrating JavaScript and Design</a></li>
<li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
<li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
<li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
</ul>
</section> element

element
<section>
<h2>Prework</h2>
<p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p>
<ul>
<li>Command Line: Give your computer instructions like a real programmer</li>
<li>HTML: Learn the basic building blocks of the front-facing web</li>
<li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
<li>Git: Version control is a lifesaver</li>
<li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
<li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
<li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
</ul>
</section> element

element
<section>
<h2>Object-oriented Python and Beginner Django</h2>
<ul>
<li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
<li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
<li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
<li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
<li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
<li>Project: Build a Django application with user authentication and database storage</li>
</ul>
</section> element

element
<section>
<h2>Integrating JavaScript and Design</h2>
<ul>
<li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
<li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
<li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
<li>Using third-party APIs: Query external services like Google and Instagram</li>
<li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
<li>Project: Integrate front-end technologies for a more interactive Django application</li>
</ul>
</section> element

element
<section>
<h2>Expand Your Developer Toolkit</h2>
<ul>
<li>Pair programming</li>
<li>Git strategies</li>
<li>Test-driven development</li>
<li>HTTP lifecycle</li>
<li>Computer science topics</li>
<li>Introduction to dev ops</li>
<li>Analytics and error reporting</li>
<li>Project: Work in a group to build a test-driven Django application</li>
</ul>
</section> element

element
<section>
<h2>AngularJS and Building Custom APIs</h2>
<ul>
<li>Basics of AngularJS</li>
<li>Build a Basecamp clone with AngularJS</li>
<li>Building your own custom API with Django and Tastypie</li>
<li>Integrating Django with AngularJS</li>
<li>Final Project: Demonstrate mastery with Django and AngularJS</li>
</ul>
</section> element

element
<section>
<h2>Prepping for Life After Bootcamp</h2>
<ul>
<li>Interview Prep</li>
<li>Presentation Prep</li>
<li>Development ecosystem</li>
</ul>
<p><a href="#/2">Back to top</a></p>
</section> element

element

element
<h2>What you'll be learning</h2> element

element
<p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p> element

element
<ul>
<li><a href="#/2/1">Prework</a></li>
<li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
<li><a href="#/2/3">Integrating JavaScript and Design</a></li>
<li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
<li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
<li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
</ul> element

element

element
<h2>Prework</h2> element

element
<p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p> element

element
<ul>
<li>Command Line: Give your computer instructions like a real programmer</li>
<li>HTML: Learn the basic building blocks of the front-facing web</li>
<li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
<li>Git: Version control is a lifesaver</li>
<li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
<li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
<li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
</ul> element

element

element
<h2>Object-oriented Python and Beginner Django</h2> element

element
<ul>
<li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
<li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
<li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
<li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
<li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
<li>Project: Build a Django application with user authentication and database storage</li>
</ul> element

element

element
<h2>Integrating JavaScript and Design</h2> element

element
<ul>
<li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
<li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
<li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
<li>Using third-party APIs: Query external services like Google and Instagram</li>
<li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
<li>Project: Integrate front-end technologies for a more interactive Django application</li>
</ul> element

element

element
<h2>Expand Your Developer Toolkit</h2> element

element
<ul>
<li>Pair programming</li>
<li>Git strategies</li>
<li>Test-driven development</li>
<li>HTTP lifecycle</li>
<li>Computer science topics</li>
<li>Introduction to dev ops</li>
<li>Analytics and error reporting</li>
<li>Project: Work in a group to build a test-driven Django application</li>
</ul> element

element

element
<h2>AngularJS and Building Custom APIs</h2> element

element
<ul>
<li>Basics of AngularJS</li>
<li>Build a Basecamp clone with AngularJS</li>
<li>Building your own custom API with Django and Tastypie</li>
<li>Integrating Django with AngularJS</li>
<li>Final Project: Demonstrate mastery with Django and AngularJS</li>
</ul> element

element

element
<h2>Prepping for Life After Bootcamp</h2> element

element
<ul>
<li>Interview Prep</li>
<li>Presentation Prep</li>
<li>Development ecosystem</li>
</ul> element

element
<p><a href="#/2">Back to top</a></p> element

element
<section>
        <h2>What you'll be learning</h2>
        <p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p>
        <ul>
            <li><a href="#/2/1">Prework</a></li>
            <li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
            <li><a href="#/2/3">Integrating JavaScript and Design</a></li>
            <li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
            <li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
            <li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
        </ul>
    </section>

element
<section>
<h2>Directories and Files</h2>
<p>Python has a library called <code>os</code> which contains scripting utility functions.</p>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br/><br/></li>
<li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br/><br/></li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">import os

print os.getcwd()</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="7">
<pre><code class="python">
print os.getcwd()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<ul>
<li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
<li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
</ul>
</section> element

element

element
<h2>Directories and Files</h2> element

element
<p>Python has a library called <code>os</code> which contains scripting utility functions.</p> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br/><br/></li>
<li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br/><br/></li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">import os

print os.getcwd()</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="7">
<pre><code class="python">
print os.getcwd()
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<ul>
<li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
<li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
</ul> element

element
<section>
        <h2>Directories and Files</h2>
        <p>Python has a library called <code>os</code> which contains scripting utility functions.</p>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br><br><br></li>
                <li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br><br><br></li>
                <li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br><br></li>
                <li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br><br></li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">import os

print os.getcwd()</code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="3">
                <pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="7">
                <pre><code class="python">
print os.getcwd()
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Prework</h2>
        <p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p>
        <ul>
            <li>Command Line: Give your computer instructions like a real programmer</li>
            <li>HTML: Learn the basic building blocks of the front-facing web</li>
            <li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
            <li>Git: Version control is a lifesaver</li>
            <li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
            <li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
            <li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
        </ul>
    </section>
<section>
        <h2>Object-oriented Python and Beginner Django</h2>
        <ul>
            <li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
            <li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
            <li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
            <li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
            <li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
            <li>Project: Build a Django application with user authentication and database storage</li>
        </ul>
    </section>
<section>
        <h2>Integrating JavaScript and Design</h2>
        <ul>
            <li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
            <li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
            <li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
            <li>Using third-party APIs: Query external services like Google and Instagram</li>
            <li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
            <li>Project: Integrate front-end technologies for a more interactive Django application</li>
        </ul>
    </section>
<section>
        <h2>Expand Your Developer Toolkit</h2>
        <ul>
            <li>Pair programming</li>
            <li>Git strategies</li>
            <li>Test-driven development</li>
            <li>HTTP lifecycle</li>
            <li>Computer science topics</li>
            <li>Introduction to dev ops</li>
            <li>Analytics and error reporting</li>
            <li>Project: Work in a group to build a test-driven Django application</li>
        </ul>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <ul>
            <li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
            <li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
        </ul>
    </section>

element
<section>
<h2>Reading a File</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
<li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
<li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
<li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
<li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre>

Hello world!
Hello universe!
                </pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="4">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="6">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Reading a File (Cont.)</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
<li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
<li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
<li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="2">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p>
<ul>
<li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
<li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
<li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
<li>Create new text files for testing out your function!</li>
</ul>
</section> element

element

element
<h2>Reading a File</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
<li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
<li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
<li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
<li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre>

Hello world!
Hello universe!
                </pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="4">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="6">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
</div>
</div> element

element

element
<h2>Reading a File (Cont.)</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
<li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
<li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
<li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="2">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p> element

element
<ul>
<li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
<li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
<li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
<li>Create new text files for testing out your function!</li>
</ul> element

element
<section>
        <h2>Reading a File</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
                <li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
                <li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
                <li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
                <li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre>

Hello world!
Hello universe!
                </pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="4">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="6">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>AngularJS and Building Custom APIs</h2>
        <ul>
            <li>Basics of AngularJS</li>
            <li>Build a Basecamp clone with AngularJS</li>
            <li>Building your own custom API with Django and Tastypie</li>
            <li>Integrating Django with AngularJS</li>
            <li>Final Project: Demonstrate mastery with Django and AngularJS</li>
        </ul>
    </section>
<section>
        <h2>Prepping for Life After Bootcamp</h2>
        <ul>
            <li>Interview Prep</li>
            <li>Presentation Prep</li>
            <li>Development ecosystem</li>
        </ul>
        <p><a href="#/2">Back to top</a></p>
    </section>
<section>
    <h2>More than an education</h2>
    <p>There are a lot of bootcamps out there. At RocketU, you'll be surrounded by the 170+ amazing tech startups at RocketSpace.</p>
    <br>
    <img src="/static/img/rocketspace-name-logo-large-300x116.png" id="rocketSpaceLogo">
</section>

element
<section>
<h2>A network of your own</h2>
<p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p>
</section> element

element
<section>
<h2>RocketSpace staff</h2>
</section> element

element
<section>
<h2>Your instructors</h2>
<h4>Yeti</h4>
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div>
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div>
<div class="footer">
</div>
</section> element

element
<h2>A network of your own</h2> element

element
<p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p> element

element

element
<h2>RocketSpace staff</h2> element

element

element
<h2>Your instructors</h2> element

element
<h4>Yeti</h4> element

element
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div> element

element
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div> element

element
<div class="footer">
</div> element

element

element
<h2>Your classmates</h2> element

element
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul> element

element
<p><a href="#/4">Back to top</a></p> element

element

element
<h2>Prove you can program.</h2> element

element
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p> element

element
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p> element

element
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul> element

element
<section>
        <h2>A network of your own</h2>
        <p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p>
    </section>
<section>
        <h2>Reading a File (Cont.)</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
                <li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
                <li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
                <li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="2">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p>
        <ul>
            <li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
            <li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
            <li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
            <li>Create new text files for testing out your function!</li>
        </ul>
    </section>

element
<section>
<h2>Writing a File</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
<li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
<li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Writing a File (Cont.)</h2>
<div class="col-4">
<br/>
<ul>
<li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Context Manager</h2>
<p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p>
<p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p>
<p>They are used to run certain functions before and after a block of code.</p>
<br/><br/>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
<li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
<li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p>
<p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p>
<div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div>
<p style="clear:both;"><br/>Will become</p>
<div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div>
<p style="clear:both"><br/>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p>
<div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div>
</section> element

element

element
<h2>Writing a File</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
<li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
<li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
</div>
</div> element

element

element
<h2>Writing a File (Cont.)</h2> element

element
<div class="col-4">
<br/>
<ul>
<li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
</div>
</div> element

element

element
<h2>Context Manager</h2> element

element
<p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p> element

element
<p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p> element

element
<p>They are used to run certain functions before and after a block of code.</p> element

element
<br/> element
<br/> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
<li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
<li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p> element

element
<p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p> element

element
<div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div> element

element
<p style="clear:both;"><br/>Will become</p> element

element
<div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div> element

element
<p style="clear:both"><br/>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p> element

element
<div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div> element

element
<section>
        <h2>Writing a File</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
                <li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
                <li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>RocketSpace staff</h2>
    </section>

element
<h2>Your instructors</h2> element

element
<h4>Yeti</h4> element

element
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div> element

element
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div> element

element
<div class="footer">
</div> element

element

element
<h2>Your classmates</h2> element

element
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul> element

element
<p><a href="#/4">Back to top</a></p> element

element

element
<h2>Prove you can program.</h2> element

element
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p> element

element
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p> element

element
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul> element

element
<section>
        <h2>Your classmates</h2>
        <ul>
            <li>A brain</li>
            <li>An athlete</li>
            <li>A basket case</li>
            <li>A princess</li>
            <li>And a criminal</li>
        </ul>
        <p><a href="#/4">Back to top</a></p>
    </section>
<section>
        <h2>Writing a File (Cont.)</h2>
        <div class="col-4">
            <br>
            <ul>
                <li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br><br><br><br><br></li>
                <li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br><br><br><br><br></li>
                <li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="3">
                <pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Context Manager</h2>
        <p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p>
        <p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p>
        <p>They are used to run certain functions before and after a block of code.</p>
        <br><br>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
                <li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
                <li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p>
        <p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p>
        <div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div>
        <p style="clear:both;"><br>Will become</p>
        <div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div>
        <p style="clear:both"><br>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p>
        <div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div>
    </section>
<section>
    <h2>Prove you can program.</h2>
    <p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
    <p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
    <ul>
        <li><a target="_blank" href="http://codingbat.com/python">Coding Bat</a></li>
        <li><a target="_blank" href="http://www.pythonchallenge.com/">Python Challenge</a></li>
        <li><a target="_blank" href="http://www.coderbyte.com/">Coderbyte</a></li>
    </ul>
</section>
<section>
    <h2>Learn web development. Build awesome things.</h2>
    <p>
        You quit your job, you told your friends and family you're doing something crazy, maybe you moved here. You're ready to learn, intensively, for the next twelve weeks. By the time you're done, you'll be able to build pretty much anything you see on the internet.
    </p>
</section>

element
<section>
<h2>What you'll be learning</h2>
<p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p>
<ul>
<li><a href="#/2/1">Prework</a></li>
<li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
<li><a href="#/2/3">Integrating JavaScript and Design</a></li>
<li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
<li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
<li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
</ul>
</section> element

element
<section>
<h2>Prework</h2>
<p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p>
<ul>
<li>Command Line: Give your computer instructions like a real programmer</li>
<li>HTML: Learn the basic building blocks of the front-facing web</li>
<li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
<li>Git: Version control is a lifesaver</li>
<li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
<li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
<li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
</ul>
</section> element

element
<section>
<h2>Object-oriented Python and Beginner Django</h2>
<ul>
<li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
<li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
<li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
<li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
<li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
<li>Project: Build a Django application with user authentication and database storage</li>
</ul>
</section> element

element
<section>
<h2>Integrating JavaScript and Design</h2>
<ul>
<li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
<li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
<li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
<li>Using third-party APIs: Query external services like Google and Instagram</li>
<li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
<li>Project: Integrate front-end technologies for a more interactive Django application</li>
</ul>
</section> element

element
<section>
<h2>Expand Your Developer Toolkit</h2>
<ul>
<li>Pair programming</li>
<li>Git strategies</li>
<li>Test-driven development</li>
<li>HTTP lifecycle</li>
<li>Computer science topics</li>
<li>Introduction to dev ops</li>
<li>Analytics and error reporting</li>
<li>Project: Work in a group to build a test-driven Django application</li>
</ul>
</section> element

element
<section>
<h2>AngularJS and Building Custom APIs</h2>
<ul>
<li>Basics of AngularJS</li>
<li>Build a Basecamp clone with AngularJS</li>
<li>Building your own custom API with Django and Tastypie</li>
<li>Integrating Django with AngularJS</li>
<li>Final Project: Demonstrate mastery with Django and AngularJS</li>
</ul>
</section> element

element
<section>
<h2>Prepping for Life After Bootcamp</h2>
<ul>
<li>Interview Prep</li>
<li>Presentation Prep</li>
<li>Development ecosystem</li>
</ul>
<p><a href="#/2">Back to top</a></p>
</section> element

element

element
<h2>What you'll be learning</h2> element

element
<p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p> element

element
<ul>
<li><a href="#/2/1">Prework</a></li>
<li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
<li><a href="#/2/3">Integrating JavaScript and Design</a></li>
<li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
<li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
<li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
</ul> element

element

element
<h2>Prework</h2> element

element
<p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p> element

element
<ul>
<li>Command Line: Give your computer instructions like a real programmer</li>
<li>HTML: Learn the basic building blocks of the front-facing web</li>
<li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
<li>Git: Version control is a lifesaver</li>
<li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
<li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
<li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
</ul> element

element

element
<h2>Object-oriented Python and Beginner Django</h2> element

element
<ul>
<li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
<li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
<li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
<li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
<li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
<li>Project: Build a Django application with user authentication and database storage</li>
</ul> element

element

element
<h2>Integrating JavaScript and Design</h2> element

element
<ul>
<li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
<li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
<li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
<li>Using third-party APIs: Query external services like Google and Instagram</li>
<li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
<li>Project: Integrate front-end technologies for a more interactive Django application</li>
</ul> element

element

element
<h2>Expand Your Developer Toolkit</h2> element

element
<ul>
<li>Pair programming</li>
<li>Git strategies</li>
<li>Test-driven development</li>
<li>HTTP lifecycle</li>
<li>Computer science topics</li>
<li>Introduction to dev ops</li>
<li>Analytics and error reporting</li>
<li>Project: Work in a group to build a test-driven Django application</li>
</ul> element

element

element
<h2>AngularJS and Building Custom APIs</h2> element

element
<ul>
<li>Basics of AngularJS</li>
<li>Build a Basecamp clone with AngularJS</li>
<li>Building your own custom API with Django and Tastypie</li>
<li>Integrating Django with AngularJS</li>
<li>Final Project: Demonstrate mastery with Django and AngularJS</li>
</ul> element

element

element
<h2>Prepping for Life After Bootcamp</h2> element

element
<ul>
<li>Interview Prep</li>
<li>Presentation Prep</li>
<li>Development ecosystem</li>
</ul> element

element
<p><a href="#/2">Back to top</a></p> element

element
<section>
        <h2>What you'll be learning</h2>
        <p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p>
        <ul>
            <li><a href="#/2/1">Prework</a></li>
            <li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
            <li><a href="#/2/3">Integrating JavaScript and Design</a></li>
            <li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
            <li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
            <li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
        </ul>
    </section>
<section class="titleSlide" data-background="#168eae">
                    <h1>
    File Manipulation
</h1>
                    <a id="yetiLogo" href="http://www.yetihq.com/"><img src="/static/img/yeti-power.png"></a>
                </section>
<section>
    <h2>Brief Python History</h2>
    <p>Python is a scripting language, which means at its core it has a bunch of functionality built in for operations like file manipulation.</p>
    <ul>
        <li>Python was created by Guido van Rossum, Benevolant Dictator for Life (BDFL), in the late 1980's.</li>
        <li>Python has released major versions 1, 2, and 3</li>
        <li>Version 3 of python had some backwards incompatible changes with version 2, so they also created 2.6 and 2.7.</li>
        <li>Many people still use python 2.7 over 3, especially because major operating systems have not converted over yet.</li>
        <li>The community is still slowly making the transition from python 2 to 3 even though 3 was released in December 2008.</li>
        <li>2.7 will be the last release in the version 2 line, it was released in July 2010.</li>
    </ul>
</section>

element
<section>
<h2>Directories and Files</h2>
<p>Python has a library called <code>os</code> which contains scripting utility functions.</p>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br/><br/></li>
<li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br/><br/></li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">import os

print os.getcwd()</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="7">
<pre><code class="python">
print os.getcwd()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<ul>
<li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
<li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
</ul>
</section> element

element

element
<h2>Directories and Files</h2> element

element
<p>Python has a library called <code>os</code> which contains scripting utility functions.</p> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br/><br/></li>
<li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br/><br/></li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">import os

print os.getcwd()</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="7">
<pre><code class="python">
print os.getcwd()
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<ul>
<li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
<li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
</ul> element

element
<section>
        <h2>Directories and Files</h2>
        <p>Python has a library called <code>os</code> which contains scripting utility functions.</p>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br><br><br></li>
                <li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br><br><br></li>
                <li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br><br></li>
                <li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br><br></li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">import os

print os.getcwd()</code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="3">
                <pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="7">
                <pre><code class="python">
print os.getcwd()
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Prework</h2>
        <p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p>
        <ul>
            <li>Command Line: Give your computer instructions like a real programmer</li>
            <li>HTML: Learn the basic building blocks of the front-facing web</li>
            <li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
            <li>Git: Version control is a lifesaver</li>
            <li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
            <li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
            <li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
        </ul>
    </section>
<section>
        <h2>Object-oriented Python and Beginner Django</h2>
        <ul>
            <li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
            <li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
            <li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
            <li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
            <li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
            <li>Project: Build a Django application with user authentication and database storage</li>
        </ul>
    </section>
<section>
        <h2>Integrating JavaScript and Design</h2>
        <ul>
            <li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
            <li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
            <li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
            <li>Using third-party APIs: Query external services like Google and Instagram</li>
            <li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
            <li>Project: Integrate front-end technologies for a more interactive Django application</li>
        </ul>
    </section>
<section>
        <h2>Expand Your Developer Toolkit</h2>
        <ul>
            <li>Pair programming</li>
            <li>Git strategies</li>
            <li>Test-driven development</li>
            <li>HTTP lifecycle</li>
            <li>Computer science topics</li>
            <li>Introduction to dev ops</li>
            <li>Analytics and error reporting</li>
            <li>Project: Work in a group to build a test-driven Django application</li>
        </ul>
    </section>
<section>
        <h2>AngularJS and Building Custom APIs</h2>
        <ul>
            <li>Basics of AngularJS</li>
            <li>Build a Basecamp clone with AngularJS</li>
            <li>Building your own custom API with Django and Tastypie</li>
            <li>Integrating Django with AngularJS</li>
            <li>Final Project: Demonstrate mastery with Django and AngularJS</li>
        </ul>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <ul>
            <li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
            <li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
        </ul>
    </section>

element
<section>
<h2>Reading a File</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
<li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
<li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
<li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
<li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre>

Hello world!
Hello universe!
                </pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="4">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="6">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Reading a File (Cont.)</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
<li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
<li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
<li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="2">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p>
<ul>
<li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
<li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
<li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
<li>Create new text files for testing out your function!</li>
</ul>
</section> element

element

element
<h2>Reading a File</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
<li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
<li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
<li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
<li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre>

Hello world!
Hello universe!
                </pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="4">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="6">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
</div>
</div> element

element

element
<h2>Reading a File (Cont.)</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
<li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
<li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
<li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="2">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p> element

element
<ul>
<li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
<li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
<li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
<li>Create new text files for testing out your function!</li>
</ul> element

element
<section>
        <h2>Reading a File</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
                <li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
                <li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
                <li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
                <li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre>

Hello world!
Hello universe!
                </pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="4">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="6">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Prepping for Life After Bootcamp</h2>
        <ul>
            <li>Interview Prep</li>
            <li>Presentation Prep</li>
            <li>Development ecosystem</li>
        </ul>
        <p><a href="#/2">Back to top</a></p>
    </section>
<section>
    <h2>More than an education</h2>
    <p>There are a lot of bootcamps out there. At RocketU, you'll be surrounded by the 170+ amazing tech startups at RocketSpace.</p>
    <br>
    <img src="/static/img/rocketspace-name-logo-large-300x116.png" id="rocketSpaceLogo">
</section>

element
<section>
<h2>A network of your own</h2>
<p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p>
</section> element

element
<section>
<h2>RocketSpace staff</h2>
</section> element

element
<section>
<h2>Your instructors</h2>
<h4>Yeti</h4>
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div>
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div>
<div class="footer">
</div>
</section> element

element
<h2>A network of your own</h2> element

element
<p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p> element

element

element
<h2>RocketSpace staff</h2> element

element

element
<h2>Your instructors</h2> element

element
<h4>Yeti</h4> element

element
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div> element

element
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div> element

element
<div class="footer">
</div> element

element

element
<h2>Your classmates</h2> element

element
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul> element

element
<p><a href="#/4">Back to top</a></p> element

element

element
<h2>Prove you can program.</h2> element

element
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p> element

element
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p> element

element
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul> element

element
<section>
        <h2>A network of your own</h2>
        <p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p>
    </section>
<section>
        <h2>RocketSpace staff</h2>
    </section>
<section>
        <h2>Reading a File (Cont.)</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
                <li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
                <li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
                <li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="2">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p>
        <ul>
            <li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
            <li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
            <li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
            <li>Create new text files for testing out your function!</li>
        </ul>
    </section>

element
<section>
<h2>Writing a File</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
<li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
<li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Writing a File (Cont.)</h2>
<div class="col-4">
<br/>
<ul>
<li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Context Manager</h2>
<p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p>
<p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p>
<p>They are used to run certain functions before and after a block of code.</p>
<br/><br/>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
<li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
<li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p>
<p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p>
<div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div>
<p style="clear:both;"><br/>Will become</p>
<div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div>
<p style="clear:both"><br/>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p>
<div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div>
</section> element

element

element
<h2>Writing a File</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
<li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
<li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
</div>
</div> element

element

element
<h2>Writing a File (Cont.)</h2> element

element
<div class="col-4">
<br/>
<ul>
<li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
</div>
</div> element

element

element
<h2>Context Manager</h2> element

element
<p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p> element

element
<p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p> element

element
<p>They are used to run certain functions before and after a block of code.</p> element

element
<br/> element
<br/> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
<li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
<li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p> element

element
<p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p> element

element
<div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div> element

element
<p style="clear:both;"><br/>Will become</p> element

element
<div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div> element

element
<p style="clear:both"><br/>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p> element

element
<div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div> element

element
<section>
        <h2>Writing a File</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
                <li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
                <li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
            </div>
        </div>
    </section>

element
<h2>Your instructors</h2> element

element
<h4>Yeti</h4> element

element
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div> element

element
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div> element

element
<div class="footer">
</div> element

element

element
<h2>Your classmates</h2> element

element
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul> element

element
<p><a href="#/4">Back to top</a></p> element

element

element
<h2>Prove you can program.</h2> element

element
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p> element

element
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p> element

element
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul> element

element
<section>
        <h2>Your classmates</h2>
        <ul>
            <li>A brain</li>
            <li>An athlete</li>
            <li>A basket case</li>
            <li>A princess</li>
            <li>And a criminal</li>
        </ul>
        <p><a href="#/4">Back to top</a></p>
    </section>
<section>
    <h2>Prove you can program.</h2>
    <p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
    <p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
    <ul>
        <li><a target="_blank" href="http://codingbat.com/python">Coding Bat</a></li>
        <li><a target="_blank" href="http://www.pythonchallenge.com/">Python Challenge</a></li>
        <li><a target="_blank" href="http://www.coderbyte.com/">Coderbyte</a></li>
    </ul>
</section>
<section>
    <h2>Learn web development. Build awesome things.</h2>
    <p>
        You quit your job, you told your friends and family you're doing something crazy, maybe you moved here. You're ready to learn, intensively, for the next twelve weeks. By the time you're done, you'll be able to build pretty much anything you see on the internet.
    </p>
</section>

element
<section>
<h2>What you'll be learning</h2>
<p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p>
<ul>
<li><a href="#/2/1">Prework</a></li>
<li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
<li><a href="#/2/3">Integrating JavaScript and Design</a></li>
<li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
<li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
<li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
</ul>
</section> element

element
<section>
<h2>Prework</h2>
<p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p>
<ul>
<li>Command Line: Give your computer instructions like a real programmer</li>
<li>HTML: Learn the basic building blocks of the front-facing web</li>
<li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
<li>Git: Version control is a lifesaver</li>
<li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
<li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
<li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
</ul>
</section> element

element
<section>
<h2>Object-oriented Python and Beginner Django</h2>
<ul>
<li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
<li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
<li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
<li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
<li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
<li>Project: Build a Django application with user authentication and database storage</li>
</ul>
</section> element

element
<section>
<h2>Integrating JavaScript and Design</h2>
<ul>
<li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
<li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
<li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
<li>Using third-party APIs: Query external services like Google and Instagram</li>
<li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
<li>Project: Integrate front-end technologies for a more interactive Django application</li>
</ul>
</section> element

element
<section>
<h2>Expand Your Developer Toolkit</h2>
<ul>
<li>Pair programming</li>
<li>Git strategies</li>
<li>Test-driven development</li>
<li>HTTP lifecycle</li>
<li>Computer science topics</li>
<li>Introduction to dev ops</li>
<li>Analytics and error reporting</li>
<li>Project: Work in a group to build a test-driven Django application</li>
</ul>
</section> element

element
<section>
<h2>AngularJS and Building Custom APIs</h2>
<ul>
<li>Basics of AngularJS</li>
<li>Build a Basecamp clone with AngularJS</li>
<li>Building your own custom API with Django and Tastypie</li>
<li>Integrating Django with AngularJS</li>
<li>Final Project: Demonstrate mastery with Django and AngularJS</li>
</ul>
</section> element

element
<section>
<h2>Prepping for Life After Bootcamp</h2>
<ul>
<li>Interview Prep</li>
<li>Presentation Prep</li>
<li>Development ecosystem</li>
</ul>
<p><a href="#/2">Back to top</a></p>
</section> element

element

element
<h2>What you'll be learning</h2> element

element
<p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p> element

element
<ul>
<li><a href="#/2/1">Prework</a></li>
<li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
<li><a href="#/2/3">Integrating JavaScript and Design</a></li>
<li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
<li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
<li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
</ul> element

element

element
<h2>Prework</h2> element

element
<p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p> element

element
<ul>
<li>Command Line: Give your computer instructions like a real programmer</li>
<li>HTML: Learn the basic building blocks of the front-facing web</li>
<li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
<li>Git: Version control is a lifesaver</li>
<li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
<li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
<li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
</ul> element

element

element
<h2>Object-oriented Python and Beginner Django</h2> element

element
<ul>
<li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
<li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
<li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
<li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
<li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
<li>Project: Build a Django application with user authentication and database storage</li>
</ul> element

element

element
<h2>Integrating JavaScript and Design</h2> element

element
<ul>
<li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
<li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
<li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
<li>Using third-party APIs: Query external services like Google and Instagram</li>
<li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
<li>Project: Integrate front-end technologies for a more interactive Django application</li>
</ul> element

element

element
<h2>Expand Your Developer Toolkit</h2> element

element
<ul>
<li>Pair programming</li>
<li>Git strategies</li>
<li>Test-driven development</li>
<li>HTTP lifecycle</li>
<li>Computer science topics</li>
<li>Introduction to dev ops</li>
<li>Analytics and error reporting</li>
<li>Project: Work in a group to build a test-driven Django application</li>
</ul> element

element

element
<h2>AngularJS and Building Custom APIs</h2> element

element
<ul>
<li>Basics of AngularJS</li>
<li>Build a Basecamp clone with AngularJS</li>
<li>Building your own custom API with Django and Tastypie</li>
<li>Integrating Django with AngularJS</li>
<li>Final Project: Demonstrate mastery with Django and AngularJS</li>
</ul> element

element

element
<h2>Prepping for Life After Bootcamp</h2> element

element
<ul>
<li>Interview Prep</li>
<li>Presentation Prep</li>
<li>Development ecosystem</li>
</ul> element

element
<p><a href="#/2">Back to top</a></p> element

element
<section>
        <h2>What you'll be learning</h2>
        <p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p>
        <ul>
            <li><a href="#/2/1">Prework</a></li>
            <li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
            <li><a href="#/2/3">Integrating JavaScript and Design</a></li>
            <li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
            <li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
            <li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
        </ul>
    </section>
<section>
        <h2>Writing a File (Cont.)</h2>
        <div class="col-4">
            <br>
            <ul>
                <li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br><br><br><br><br></li>
                <li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br><br><br><br><br></li>
                <li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="3">
                <pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Context Manager</h2>
        <p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p>
        <p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p>
        <p>They are used to run certain functions before and after a block of code.</p>
        <br><br>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
                <li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
                <li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p>
        <p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p>
        <div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div>
        <p style="clear:both;"><br>Will become</p>
        <div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div>
        <p style="clear:both"><br>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p>
        <div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div>
    </section>
<section>
        <h2>Prework</h2>
        <p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p>
        <ul>
            <li>Command Line: Give your computer instructions like a real programmer</li>
            <li>HTML: Learn the basic building blocks of the front-facing web</li>
            <li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
            <li>Git: Version control is a lifesaver</li>
            <li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
            <li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
            <li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
        </ul>
    </section>
<section>
        <h2>Object-oriented Python and Beginner Django</h2>
        <ul>
            <li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
            <li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
            <li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
            <li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
            <li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
            <li>Project: Build a Django application with user authentication and database storage</li>
        </ul>
    </section>
<section>
        <h2>Integrating JavaScript and Design</h2>
        <ul>
            <li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
            <li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
            <li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
            <li>Using third-party APIs: Query external services like Google and Instagram</li>
            <li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
            <li>Project: Integrate front-end technologies for a more interactive Django application</li>
        </ul>
    </section>
<section>
        <h2>Expand Your Developer Toolkit</h2>
        <ul>
            <li>Pair programming</li>
            <li>Git strategies</li>
            <li>Test-driven development</li>
            <li>HTTP lifecycle</li>
            <li>Computer science topics</li>
            <li>Introduction to dev ops</li>
            <li>Analytics and error reporting</li>
            <li>Project: Work in a group to build a test-driven Django application</li>
        </ul>
    </section>
<section>
        <h2>AngularJS and Building Custom APIs</h2>
        <ul>
            <li>Basics of AngularJS</li>
            <li>Build a Basecamp clone with AngularJS</li>
            <li>Building your own custom API with Django and Tastypie</li>
            <li>Integrating Django with AngularJS</li>
            <li>Final Project: Demonstrate mastery with Django and AngularJS</li>
        </ul>
    </section>
<section class="titleSlide" data-background="#168eae">
                    <h1>
    File Manipulation
</h1>
                    <a id="yetiLogo" href="http://www.yetihq.com/"><img src="/static/img/yeti-power.png"></a>
                </section>
<section>
    <h2>Brief Python History</h2>
    <p>Python is a scripting language, which means at its core it has a bunch of functionality built in for operations like file manipulation.</p>
    <ul>
        <li>Python was created by Guido van Rossum, Benevolant Dictator for Life (BDFL), in the late 1980's.</li>
        <li>Python has released major versions 1, 2, and 3</li>
        <li>Version 3 of python had some backwards incompatible changes with version 2, so they also created 2.6 and 2.7.</li>
        <li>Many people still use python 2.7 over 3, especially because major operating systems have not converted over yet.</li>
        <li>The community is still slowly making the transition from python 2 to 3 even though 3 was released in December 2008.</li>
        <li>2.7 will be the last release in the version 2 line, it was released in July 2010.</li>
    </ul>
</section>

element
<section>
<h2>Directories and Files</h2>
<p>Python has a library called <code>os</code> which contains scripting utility functions.</p>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br/><br/></li>
<li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br/><br/></li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">import os

print os.getcwd()</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="7">
<pre><code class="python">
print os.getcwd()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<ul>
<li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
<li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
</ul>
</section> element

element

element
<h2>Directories and Files</h2> element

element
<p>Python has a library called <code>os</code> which contains scripting utility functions.</p> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br/><br/></li>
<li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br/><br/></li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">import os

print os.getcwd()</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="7">
<pre><code class="python">
print os.getcwd()
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<ul>
<li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
<li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
</ul> element

element
<section>
        <h2>Directories and Files</h2>
        <p>Python has a library called <code>os</code> which contains scripting utility functions.</p>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br><br><br></li>
                <li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br><br><br></li>
                <li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br><br></li>
                <li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br><br></li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">import os

print os.getcwd()</code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="3">
                <pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="7">
                <pre><code class="python">
print os.getcwd()
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Prepping for Life After Bootcamp</h2>
        <ul>
            <li>Interview Prep</li>
            <li>Presentation Prep</li>
            <li>Development ecosystem</li>
        </ul>
        <p><a href="#/2">Back to top</a></p>
    </section>
<section>
    <h2>More than an education</h2>
    <p>There are a lot of bootcamps out there. At RocketU, you'll be surrounded by the 170+ amazing tech startups at RocketSpace.</p>
    <br>
    <img src="/static/img/rocketspace-name-logo-large-300x116.png" id="rocketSpaceLogo">
</section>

element
<section>
<h2>A network of your own</h2>
<p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p>
</section> element

element
<section>
<h2>RocketSpace staff</h2>
</section> element

element
<section>
<h2>Your instructors</h2>
<h4>Yeti</h4>
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div>
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div>
<div class="footer">
</div>
</section> element

element
<h2>A network of your own</h2> element

element
<p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p> element

element

element
<h2>RocketSpace staff</h2> element

element

element
<h2>Your instructors</h2> element

element
<h4>Yeti</h4> element

element
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div> element

element
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div> element

element
<div class="footer">
</div> element

element

element
<h2>Your classmates</h2> element

element
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul> element

element
<p><a href="#/4">Back to top</a></p> element

element

element
<h2>Prove you can program.</h2> element

element
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p> element

element
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p> element

element
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul> element

element
<section>
        <h2>A network of your own</h2>
        <p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <ul>
            <li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
            <li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
        </ul>
    </section>

element
<section>
<h2>Reading a File</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
<li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
<li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
<li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
<li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre>

Hello world!
Hello universe!
                </pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="4">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="6">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Reading a File (Cont.)</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
<li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
<li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
<li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="2">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p>
<ul>
<li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
<li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
<li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
<li>Create new text files for testing out your function!</li>
</ul>
</section> element

element

element
<h2>Reading a File</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
<li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
<li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
<li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
<li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre>

Hello world!
Hello universe!
                </pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="4">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="6">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
</div>
</div> element

element

element
<h2>Reading a File (Cont.)</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
<li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
<li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
<li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="2">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p> element

element
<ul>
<li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
<li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
<li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
<li>Create new text files for testing out your function!</li>
</ul> element

element
<section>
        <h2>Reading a File</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
                <li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
                <li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
                <li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
                <li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre>

Hello world!
Hello universe!
                </pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="4">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="6">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>RocketSpace staff</h2>
    </section>

element
<h2>Your instructors</h2> element

element
<h4>Yeti</h4> element

element
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div> element

element
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div> element

element
<div class="footer">
</div> element

element

element
<h2>Your classmates</h2> element

element
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul> element

element
<p><a href="#/4">Back to top</a></p> element

element

element
<h2>Prove you can program.</h2> element

element
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p> element

element
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p> element

element
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul> element

element
<section>
        <h2>Your classmates</h2>
        <ul>
            <li>A brain</li>
            <li>An athlete</li>
            <li>A basket case</li>
            <li>A princess</li>
            <li>And a criminal</li>
        </ul>
        <p><a href="#/4">Back to top</a></p>
    </section>
<section>
    <h2>Prove you can program.</h2>
    <p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
    <p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
    <ul>
        <li><a target="_blank" href="http://codingbat.com/python">Coding Bat</a></li>
        <li><a target="_blank" href="http://www.pythonchallenge.com/">Python Challenge</a></li>
        <li><a target="_blank" href="http://www.coderbyte.com/">Coderbyte</a></li>
    </ul>
</section>
<section>
        <h2>Reading a File (Cont.)</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
                <li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
                <li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
                <li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="2">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p>
        <ul>
            <li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
            <li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
            <li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
            <li>Create new text files for testing out your function!</li>
        </ul>
    </section>

element
<section>
<h2>Writing a File</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
<li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
<li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Writing a File (Cont.)</h2>
<div class="col-4">
<br/>
<ul>
<li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Context Manager</h2>
<p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p>
<p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p>
<p>They are used to run certain functions before and after a block of code.</p>
<br/><br/>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
<li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
<li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p>
<p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p>
<div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div>
<p style="clear:both;"><br/>Will become</p>
<div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div>
<p style="clear:both"><br/>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p>
<div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div>
</section> element

element

element
<h2>Writing a File</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
<li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
<li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
</div>
</div> element

element

element
<h2>Writing a File (Cont.)</h2> element

element
<div class="col-4">
<br/>
<ul>
<li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
</div>
</div> element

element

element
<h2>Context Manager</h2> element

element
<p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p> element

element
<p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p> element

element
<p>They are used to run certain functions before and after a block of code.</p> element

element
<br/> element
<br/> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
<li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
<li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p> element

element
<p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p> element

element
<div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div> element

element
<p style="clear:both;"><br/>Will become</p> element

element
<div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div> element

element
<p style="clear:both"><br/>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p> element

element
<div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div> element

element
<section>
        <h2>Writing a File</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
                <li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
                <li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
            </div>
        </div>
    </section>
<section>
    <h2>Learn web development. Build awesome things.</h2>
    <p>
        You quit your job, you told your friends and family you're doing something crazy, maybe you moved here. You're ready to learn, intensively, for the next twelve weeks. By the time you're done, you'll be able to build pretty much anything you see on the internet.
    </p>
</section>

element
<section>
<h2>What you'll be learning</h2>
<p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p>
<ul>
<li><a href="#/2/1">Prework</a></li>
<li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
<li><a href="#/2/3">Integrating JavaScript and Design</a></li>
<li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
<li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
<li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
</ul>
</section> element

element
<section>
<h2>Prework</h2>
<p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p>
<ul>
<li>Command Line: Give your computer instructions like a real programmer</li>
<li>HTML: Learn the basic building blocks of the front-facing web</li>
<li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
<li>Git: Version control is a lifesaver</li>
<li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
<li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
<li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
</ul>
</section> element

element
<section>
<h2>Object-oriented Python and Beginner Django</h2>
<ul>
<li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
<li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
<li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
<li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
<li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
<li>Project: Build a Django application with user authentication and database storage</li>
</ul>
</section> element

element
<section>
<h2>Integrating JavaScript and Design</h2>
<ul>
<li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
<li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
<li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
<li>Using third-party APIs: Query external services like Google and Instagram</li>
<li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
<li>Project: Integrate front-end technologies for a more interactive Django application</li>
</ul>
</section> element

element
<section>
<h2>Expand Your Developer Toolkit</h2>
<ul>
<li>Pair programming</li>
<li>Git strategies</li>
<li>Test-driven development</li>
<li>HTTP lifecycle</li>
<li>Computer science topics</li>
<li>Introduction to dev ops</li>
<li>Analytics and error reporting</li>
<li>Project: Work in a group to build a test-driven Django application</li>
</ul>
</section> element

element
<section>
<h2>AngularJS and Building Custom APIs</h2>
<ul>
<li>Basics of AngularJS</li>
<li>Build a Basecamp clone with AngularJS</li>
<li>Building your own custom API with Django and Tastypie</li>
<li>Integrating Django with AngularJS</li>
<li>Final Project: Demonstrate mastery with Django and AngularJS</li>
</ul>
</section> element

element
<section>
<h2>Prepping for Life After Bootcamp</h2>
<ul>
<li>Interview Prep</li>
<li>Presentation Prep</li>
<li>Development ecosystem</li>
</ul>
<p><a href="#/2">Back to top</a></p>
</section> element

element

element
<h2>What you'll be learning</h2> element

element
<p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p> element

element
<ul>
<li><a href="#/2/1">Prework</a></li>
<li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
<li><a href="#/2/3">Integrating JavaScript and Design</a></li>
<li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
<li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
<li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
</ul> element

element

element
<h2>Prework</h2> element

element
<p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p> element

element
<ul>
<li>Command Line: Give your computer instructions like a real programmer</li>
<li>HTML: Learn the basic building blocks of the front-facing web</li>
<li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
<li>Git: Version control is a lifesaver</li>
<li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
<li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
<li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
</ul> element

element

element
<h2>Object-oriented Python and Beginner Django</h2> element

element
<ul>
<li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
<li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
<li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
<li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
<li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
<li>Project: Build a Django application with user authentication and database storage</li>
</ul> element

element

element
<h2>Integrating JavaScript and Design</h2> element

element
<ul>
<li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
<li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
<li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
<li>Using third-party APIs: Query external services like Google and Instagram</li>
<li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
<li>Project: Integrate front-end technologies for a more interactive Django application</li>
</ul> element

element

element
<h2>Expand Your Developer Toolkit</h2> element

element
<ul>
<li>Pair programming</li>
<li>Git strategies</li>
<li>Test-driven development</li>
<li>HTTP lifecycle</li>
<li>Computer science topics</li>
<li>Introduction to dev ops</li>
<li>Analytics and error reporting</li>
<li>Project: Work in a group to build a test-driven Django application</li>
</ul> element

element

element
<h2>AngularJS and Building Custom APIs</h2> element

element
<ul>
<li>Basics of AngularJS</li>
<li>Build a Basecamp clone with AngularJS</li>
<li>Building your own custom API with Django and Tastypie</li>
<li>Integrating Django with AngularJS</li>
<li>Final Project: Demonstrate mastery with Django and AngularJS</li>
</ul> element

element

element
<h2>Prepping for Life After Bootcamp</h2> element

element
<ul>
<li>Interview Prep</li>
<li>Presentation Prep</li>
<li>Development ecosystem</li>
</ul> element

element
<p><a href="#/2">Back to top</a></p> element

element
<section>
        <h2>What you'll be learning</h2>
        <p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p>
        <ul>
            <li><a href="#/2/1">Prework</a></li>
            <li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
            <li><a href="#/2/3">Integrating JavaScript and Design</a></li>
            <li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
            <li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
            <li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
        </ul>
    </section>
<section>
        <h2>Writing a File (Cont.)</h2>
        <div class="col-4">
            <br>
            <ul>
                <li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br><br><br><br><br></li>
                <li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br><br><br><br><br></li>
                <li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="3">
                <pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Prework</h2>
        <p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p>
        <ul>
            <li>Command Line: Give your computer instructions like a real programmer</li>
            <li>HTML: Learn the basic building blocks of the front-facing web</li>
            <li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
            <li>Git: Version control is a lifesaver</li>
            <li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
            <li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
            <li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
        </ul>
    </section>
<section>
        <h2>Object-oriented Python and Beginner Django</h2>
        <ul>
            <li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
            <li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
            <li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
            <li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
            <li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
            <li>Project: Build a Django application with user authentication and database storage</li>
        </ul>
    </section>
<section>
        <h2>Integrating JavaScript and Design</h2>
        <ul>
            <li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
            <li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
            <li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
            <li>Using third-party APIs: Query external services like Google and Instagram</li>
            <li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
            <li>Project: Integrate front-end technologies for a more interactive Django application</li>
        </ul>
    </section>
<section>
        <h2>Expand Your Developer Toolkit</h2>
        <ul>
            <li>Pair programming</li>
            <li>Git strategies</li>
            <li>Test-driven development</li>
            <li>HTTP lifecycle</li>
            <li>Computer science topics</li>
            <li>Introduction to dev ops</li>
            <li>Analytics and error reporting</li>
            <li>Project: Work in a group to build a test-driven Django application</li>
        </ul>
    </section>
<section>
        <h2>AngularJS and Building Custom APIs</h2>
        <ul>
            <li>Basics of AngularJS</li>
            <li>Build a Basecamp clone with AngularJS</li>
            <li>Building your own custom API with Django and Tastypie</li>
            <li>Integrating Django with AngularJS</li>
            <li>Final Project: Demonstrate mastery with Django and AngularJS</li>
        </ul>
    </section>
<section>
        <h2>Context Manager</h2>
        <p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p>
        <p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p>
        <p>They are used to run certain functions before and after a block of code.</p>
        <br><br>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
                <li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
                <li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p>
        <p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p>
        <div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div>
        <p style="clear:both;"><br>Will become</p>
        <div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div>
        <p style="clear:both"><br>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p>
        <div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div>
    </section>
<section class="titleSlide" data-background="#168eae">
                    <h1>
    File Manipulation
</h1>
                    <a id="yetiLogo" href="http://www.yetihq.com/"><img src="/static/img/yeti-power.png"></a>
                </section>
<section>
    <h2>Brief Python History</h2>
    <p>Python is a scripting language, which means at its core it has a bunch of functionality built in for operations like file manipulation.</p>
    <ul>
        <li>Python was created by Guido van Rossum, Benevolant Dictator for Life (BDFL), in the late 1980's.</li>
        <li>Python has released major versions 1, 2, and 3</li>
        <li>Version 3 of python had some backwards incompatible changes with version 2, so they also created 2.6 and 2.7.</li>
        <li>Many people still use python 2.7 over 3, especially because major operating systems have not converted over yet.</li>
        <li>The community is still slowly making the transition from python 2 to 3 even though 3 was released in December 2008.</li>
        <li>2.7 will be the last release in the version 2 line, it was released in July 2010.</li>
    </ul>
</section>
<section>
        <h2>Prepping for Life After Bootcamp</h2>
        <ul>
            <li>Interview Prep</li>
            <li>Presentation Prep</li>
            <li>Development ecosystem</li>
        </ul>
        <p><a href="#/2">Back to top</a></p>
    </section>
<section>
    <h2>More than an education</h2>
    <p>There are a lot of bootcamps out there. At RocketU, you'll be surrounded by the 170+ amazing tech startups at RocketSpace.</p>
    <br>
    <img src="/static/img/rocketspace-name-logo-large-300x116.png" id="rocketSpaceLogo">
</section>

element
<section>
<h2>A network of your own</h2>
<p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p>
</section> element

element
<section>
<h2>RocketSpace staff</h2>
</section> element

element
<section>
<h2>Your instructors</h2>
<h4>Yeti</h4>
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div>
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div>
<div class="footer">
</div>
</section> element

element
<h2>A network of your own</h2> element

element
<p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p> element

element

element
<h2>RocketSpace staff</h2> element

element

element
<h2>Your instructors</h2> element

element
<h4>Yeti</h4> element

element
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div> element

element
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div> element

element
<div class="footer">
</div> element

element

element
<h2>Your classmates</h2> element

element
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul> element

element
<p><a href="#/4">Back to top</a></p> element

element

element
<h2>Prove you can program.</h2> element

element
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p> element

element
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p> element

element
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul> element

element
<section>
        <h2>A network of your own</h2>
        <p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p>
    </section>

element
<section>
<h2>Directories and Files</h2>
<p>Python has a library called <code>os</code> which contains scripting utility functions.</p>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br/><br/></li>
<li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br/><br/></li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">import os

print os.getcwd()</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="7">
<pre><code class="python">
print os.getcwd()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<ul>
<li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
<li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
</ul>
</section> element

element

element
<h2>Directories and Files</h2> element

element
<p>Python has a library called <code>os</code> which contains scripting utility functions.</p> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br/><br/></li>
<li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br/><br/></li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">import os

print os.getcwd()</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="7">
<pre><code class="python">
print os.getcwd()
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<ul>
<li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
<li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
</ul> element

element
<section>
        <h2>Directories and Files</h2>
        <p>Python has a library called <code>os</code> which contains scripting utility functions.</p>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br><br><br></li>
                <li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br><br><br></li>
                <li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br><br></li>
                <li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br><br></li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">import os

print os.getcwd()</code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="3">
                <pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="7">
                <pre><code class="python">
print os.getcwd()
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>RocketSpace staff</h2>
    </section>

element
<h2>Your instructors</h2> element

element
<h4>Yeti</h4> element

element
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div> element

element
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div> element

element
<div class="footer">
</div> element

element

element
<h2>Your classmates</h2> element

element
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul> element

element
<p><a href="#/4">Back to top</a></p> element

element

element
<h2>Prove you can program.</h2> element

element
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p> element

element
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p> element

element
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul> element

element
<section>
        <h2>Your classmates</h2>
        <ul>
            <li>A brain</li>
            <li>An athlete</li>
            <li>A basket case</li>
            <li>A princess</li>
            <li>And a criminal</li>
        </ul>
        <p><a href="#/4">Back to top</a></p>
    </section>
<section>
    <h2>Prove you can program.</h2>
    <p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
    <p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
    <ul>
        <li><a target="_blank" href="http://codingbat.com/python">Coding Bat</a></li>
        <li><a target="_blank" href="http://www.pythonchallenge.com/">Python Challenge</a></li>
        <li><a target="_blank" href="http://www.coderbyte.com/">Coderbyte</a></li>
    </ul>
</section>
<section>
        <h2>Do it Yourself</h2>
        <ul>
            <li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
            <li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
        </ul>
    </section>

element
<section>
<h2>Reading a File</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
<li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
<li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
<li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
<li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre>

Hello world!
Hello universe!
                </pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="4">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="6">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Reading a File (Cont.)</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
<li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
<li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
<li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="2">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p>
<ul>
<li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
<li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
<li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
<li>Create new text files for testing out your function!</li>
</ul>
</section> element

element

element
<h2>Reading a File</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
<li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
<li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
<li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
<li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre>

Hello world!
Hello universe!
                </pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="4">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="6">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
</div>
</div> element

element

element
<h2>Reading a File (Cont.)</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
<li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
<li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
<li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="2">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p> element

element
<ul>
<li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
<li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
<li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
<li>Create new text files for testing out your function!</li>
</ul> element

element
<section>
        <h2>Reading a File</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
                <li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
                <li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
                <li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
                <li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre>

Hello world!
Hello universe!
                </pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="4">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="6">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
            </div>
        </div>
    </section>
<section>
    <h2>Learn web development. Build awesome things.</h2>
    <p>
        You quit your job, you told your friends and family you're doing something crazy, maybe you moved here. You're ready to learn, intensively, for the next twelve weeks. By the time you're done, you'll be able to build pretty much anything you see on the internet.
    </p>
</section>

element
<section>
<h2>What you'll be learning</h2>
<p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p>
<ul>
<li><a href="#/2/1">Prework</a></li>
<li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
<li><a href="#/2/3">Integrating JavaScript and Design</a></li>
<li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
<li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
<li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
</ul>
</section> element

element
<section>
<h2>Prework</h2>
<p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p>
<ul>
<li>Command Line: Give your computer instructions like a real programmer</li>
<li>HTML: Learn the basic building blocks of the front-facing web</li>
<li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
<li>Git: Version control is a lifesaver</li>
<li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
<li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
<li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
</ul>
</section> element

element
<section>
<h2>Object-oriented Python and Beginner Django</h2>
<ul>
<li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
<li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
<li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
<li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
<li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
<li>Project: Build a Django application with user authentication and database storage</li>
</ul>
</section> element

element
<section>
<h2>Integrating JavaScript and Design</h2>
<ul>
<li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
<li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
<li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
<li>Using third-party APIs: Query external services like Google and Instagram</li>
<li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
<li>Project: Integrate front-end technologies for a more interactive Django application</li>
</ul>
</section> element

element
<section>
<h2>Expand Your Developer Toolkit</h2>
<ul>
<li>Pair programming</li>
<li>Git strategies</li>
<li>Test-driven development</li>
<li>HTTP lifecycle</li>
<li>Computer science topics</li>
<li>Introduction to dev ops</li>
<li>Analytics and error reporting</li>
<li>Project: Work in a group to build a test-driven Django application</li>
</ul>
</section> element

element
<section>
<h2>AngularJS and Building Custom APIs</h2>
<ul>
<li>Basics of AngularJS</li>
<li>Build a Basecamp clone with AngularJS</li>
<li>Building your own custom API with Django and Tastypie</li>
<li>Integrating Django with AngularJS</li>
<li>Final Project: Demonstrate mastery with Django and AngularJS</li>
</ul>
</section> element

element
<section>
<h2>Prepping for Life After Bootcamp</h2>
<ul>
<li>Interview Prep</li>
<li>Presentation Prep</li>
<li>Development ecosystem</li>
</ul>
<p><a href="#/2">Back to top</a></p>
</section> element

element

element
<h2>What you'll be learning</h2> element

element
<p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p> element

element
<ul>
<li><a href="#/2/1">Prework</a></li>
<li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
<li><a href="#/2/3">Integrating JavaScript and Design</a></li>
<li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
<li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
<li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
</ul> element

element

element
<h2>Prework</h2> element

element
<p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p> element

element
<ul>
<li>Command Line: Give your computer instructions like a real programmer</li>
<li>HTML: Learn the basic building blocks of the front-facing web</li>
<li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
<li>Git: Version control is a lifesaver</li>
<li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
<li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
<li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
</ul> element

element

element
<h2>Object-oriented Python and Beginner Django</h2> element

element
<ul>
<li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
<li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
<li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
<li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
<li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
<li>Project: Build a Django application with user authentication and database storage</li>
</ul> element

element

element
<h2>Integrating JavaScript and Design</h2> element

element
<ul>
<li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
<li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
<li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
<li>Using third-party APIs: Query external services like Google and Instagram</li>
<li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
<li>Project: Integrate front-end technologies for a more interactive Django application</li>
</ul> element

element

element
<h2>Expand Your Developer Toolkit</h2> element

element
<ul>
<li>Pair programming</li>
<li>Git strategies</li>
<li>Test-driven development</li>
<li>HTTP lifecycle</li>
<li>Computer science topics</li>
<li>Introduction to dev ops</li>
<li>Analytics and error reporting</li>
<li>Project: Work in a group to build a test-driven Django application</li>
</ul> element

element

element
<h2>AngularJS and Building Custom APIs</h2> element

element
<ul>
<li>Basics of AngularJS</li>
<li>Build a Basecamp clone with AngularJS</li>
<li>Building your own custom API with Django and Tastypie</li>
<li>Integrating Django with AngularJS</li>
<li>Final Project: Demonstrate mastery with Django and AngularJS</li>
</ul> element

element

element
<h2>Prepping for Life After Bootcamp</h2> element

element
<ul>
<li>Interview Prep</li>
<li>Presentation Prep</li>
<li>Development ecosystem</li>
</ul> element

element
<p><a href="#/2">Back to top</a></p> element

element
<section>
        <h2>What you'll be learning</h2>
        <p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p>
        <ul>
            <li><a href="#/2/1">Prework</a></li>
            <li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
            <li><a href="#/2/3">Integrating JavaScript and Design</a></li>
            <li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
            <li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
            <li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
        </ul>
    </section>
<section>
        <h2>Reading a File (Cont.)</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
                <li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
                <li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
                <li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="2">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p>
        <ul>
            <li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
            <li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
            <li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
            <li>Create new text files for testing out your function!</li>
        </ul>
    </section>

element
<section>
<h2>Writing a File</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
<li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
<li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Writing a File (Cont.)</h2>
<div class="col-4">
<br/>
<ul>
<li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Context Manager</h2>
<p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p>
<p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p>
<p>They are used to run certain functions before and after a block of code.</p>
<br/><br/>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
<li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
<li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p>
<p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p>
<div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div>
<p style="clear:both;"><br/>Will become</p>
<div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div>
<p style="clear:both"><br/>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p>
<div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div>
</section> element

element

element
<h2>Writing a File</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
<li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
<li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
</div>
</div> element

element

element
<h2>Writing a File (Cont.)</h2> element

element
<div class="col-4">
<br/>
<ul>
<li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
</div>
</div> element

element

element
<h2>Context Manager</h2> element

element
<p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p> element

element
<p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p> element

element
<p>They are used to run certain functions before and after a block of code.</p> element

element
<br/> element
<br/> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
<li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
<li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p> element

element
<p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p> element

element
<div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div> element

element
<p style="clear:both;"><br/>Will become</p> element

element
<div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div> element

element
<p style="clear:both"><br/>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p> element

element
<div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div> element

element
<section>
        <h2>Writing a File</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
                <li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
                <li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Prework</h2>
        <p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p>
        <ul>
            <li>Command Line: Give your computer instructions like a real programmer</li>
            <li>HTML: Learn the basic building blocks of the front-facing web</li>
            <li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
            <li>Git: Version control is a lifesaver</li>
            <li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
            <li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
            <li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
        </ul>
    </section>
<section>
        <h2>Object-oriented Python and Beginner Django</h2>
        <ul>
            <li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
            <li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
            <li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
            <li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
            <li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
            <li>Project: Build a Django application with user authentication and database storage</li>
        </ul>
    </section>
<section>
        <h2>Integrating JavaScript and Design</h2>
        <ul>
            <li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
            <li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
            <li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
            <li>Using third-party APIs: Query external services like Google and Instagram</li>
            <li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
            <li>Project: Integrate front-end technologies for a more interactive Django application</li>
        </ul>
    </section>
<section>
        <h2>Writing a File (Cont.)</h2>
        <div class="col-4">
            <br>
            <ul>
                <li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br><br><br><br><br></li>
                <li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br><br><br><br><br></li>
                <li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="3">
                <pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Expand Your Developer Toolkit</h2>
        <ul>
            <li>Pair programming</li>
            <li>Git strategies</li>
            <li>Test-driven development</li>
            <li>HTTP lifecycle</li>
            <li>Computer science topics</li>
            <li>Introduction to dev ops</li>
            <li>Analytics and error reporting</li>
            <li>Project: Work in a group to build a test-driven Django application</li>
        </ul>
    </section>
<section>
        <h2>AngularJS and Building Custom APIs</h2>
        <ul>
            <li>Basics of AngularJS</li>
            <li>Build a Basecamp clone with AngularJS</li>
            <li>Building your own custom API with Django and Tastypie</li>
            <li>Integrating Django with AngularJS</li>
            <li>Final Project: Demonstrate mastery with Django and AngularJS</li>
        </ul>
    </section>
<section>
        <h2>Prepping for Life After Bootcamp</h2>
        <ul>
            <li>Interview Prep</li>
            <li>Presentation Prep</li>
            <li>Development ecosystem</li>
        </ul>
        <p><a href="#/2">Back to top</a></p>
    </section>
<section>
    <h2>More than an education</h2>
    <p>There are a lot of bootcamps out there. At RocketU, you'll be surrounded by the 170+ amazing tech startups at RocketSpace.</p>
    <br>
    <img src="/static/img/rocketspace-name-logo-large-300x116.png" id="rocketSpaceLogo">
</section>

element
<section>
<h2>A network of your own</h2>
<p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p>
</section> element

element
<section>
<h2>RocketSpace staff</h2>
</section> element

element
<section>
<h2>Your instructors</h2>
<h4>Yeti</h4>
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div>
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div>
<div class="footer">
</div>
</section> element

element
<h2>A network of your own</h2> element

element
<p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p> element

element

element
<h2>RocketSpace staff</h2> element

element

element
<h2>Your instructors</h2> element

element
<h4>Yeti</h4> element

element
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div> element

element
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div> element

element
<div class="footer">
</div> element

element

element
<h2>Your classmates</h2> element

element
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul> element

element
<p><a href="#/4">Back to top</a></p> element

element

element
<h2>Prove you can program.</h2> element

element
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p> element

element
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p> element

element
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul> element

element
<section>
        <h2>A network of your own</h2>
        <p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p>
    </section>
<section>
        <h2>Context Manager</h2>
        <p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p>
        <p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p>
        <p>They are used to run certain functions before and after a block of code.</p>
        <br><br>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
                <li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
                <li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p>
        <p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p>
        <div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div>
        <p style="clear:both;"><br>Will become</p>
        <div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div>
        <p style="clear:both"><br>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p>
        <div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div>
    </section>
<section class="titleSlide" data-background="#168eae">
                    <h1>
    File Manipulation
</h1>
                    <a id="yetiLogo" href="http://www.yetihq.com/"><img src="/static/img/yeti-power.png"></a>
                </section>
<section>
    <h2>Brief Python History</h2>
    <p>Python is a scripting language, which means at its core it has a bunch of functionality built in for operations like file manipulation.</p>
    <ul>
        <li>Python was created by Guido van Rossum, Benevolant Dictator for Life (BDFL), in the late 1980's.</li>
        <li>Python has released major versions 1, 2, and 3</li>
        <li>Version 3 of python had some backwards incompatible changes with version 2, so they also created 2.6 and 2.7.</li>
        <li>Many people still use python 2.7 over 3, especially because major operating systems have not converted over yet.</li>
        <li>The community is still slowly making the transition from python 2 to 3 even though 3 was released in December 2008.</li>
        <li>2.7 will be the last release in the version 2 line, it was released in July 2010.</li>
    </ul>
</section>

element
<section>
<h2>Directories and Files</h2>
<p>Python has a library called <code>os</code> which contains scripting utility functions.</p>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br/><br/></li>
<li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br/><br/></li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">import os

print os.getcwd()</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="7">
<pre><code class="python">
print os.getcwd()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<ul>
<li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
<li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
</ul>
</section> element

element

element
<h2>Directories and Files</h2> element

element
<p>Python has a library called <code>os</code> which contains scripting utility functions.</p> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br/><br/></li>
<li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br/><br/></li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">import os

print os.getcwd()</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="7">
<pre><code class="python">
print os.getcwd()
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<ul>
<li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
<li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
</ul> element

element
<section>
        <h2>Directories and Files</h2>
        <p>Python has a library called <code>os</code> which contains scripting utility functions.</p>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br><br><br></li>
                <li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br><br><br></li>
                <li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br><br></li>
                <li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br><br></li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">import os

print os.getcwd()</code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="3">
                <pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="7">
                <pre><code class="python">
print os.getcwd()
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>RocketSpace staff</h2>
    </section>

element
<h2>Your instructors</h2> element

element
<h4>Yeti</h4> element

element
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div> element

element
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div> element

element
<div class="footer">
</div> element

element

element
<h2>Your classmates</h2> element

element
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul> element

element
<p><a href="#/4">Back to top</a></p> element

element

element
<h2>Prove you can program.</h2> element

element
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p> element

element
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p> element

element
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul> element

element
<section>
        <h2>Your classmates</h2>
        <ul>
            <li>A brain</li>
            <li>An athlete</li>
            <li>A basket case</li>
            <li>A princess</li>
            <li>And a criminal</li>
        </ul>
        <p><a href="#/4">Back to top</a></p>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <ul>
            <li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
            <li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
        </ul>
    </section>

element
<section>
<h2>Reading a File</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
<li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
<li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
<li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
<li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre>

Hello world!
Hello universe!
                </pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="4">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="6">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Reading a File (Cont.)</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
<li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
<li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
<li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="2">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p>
<ul>
<li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
<li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
<li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
<li>Create new text files for testing out your function!</li>
</ul>
</section> element

element

element
<h2>Reading a File</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
<li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
<li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
<li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
<li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre>

Hello world!
Hello universe!
                </pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="4">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="6">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
</div>
</div> element

element

element
<h2>Reading a File (Cont.)</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
<li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
<li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
<li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="2">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p> element

element
<ul>
<li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
<li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
<li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
<li>Create new text files for testing out your function!</li>
</ul> element

element
<section>
        <h2>Reading a File</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
                <li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
                <li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
                <li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
                <li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre>

Hello world!
Hello universe!
                </pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="4">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="6">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
            </div>
        </div>
    </section>
<section>
    <h2>Prove you can program.</h2>
    <p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
    <p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
    <ul>
        <li><a target="_blank" href="http://codingbat.com/python">Coding Bat</a></li>
        <li><a target="_blank" href="http://www.pythonchallenge.com/">Python Challenge</a></li>
        <li><a target="_blank" href="http://www.coderbyte.com/">Coderbyte</a></li>
    </ul>
</section>
<section>
    <h2>Learn web development. Build awesome things.</h2>
    <p>
        You quit your job, you told your friends and family you're doing something crazy, maybe you moved here. You're ready to learn, intensively, for the next twelve weeks. By the time you're done, you'll be able to build pretty much anything you see on the internet.
    </p>
</section>

element
<section>
<h2>What you'll be learning</h2>
<p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p>
<ul>
<li><a href="#/2/1">Prework</a></li>
<li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
<li><a href="#/2/3">Integrating JavaScript and Design</a></li>
<li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
<li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
<li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
</ul>
</section> element

element
<section>
<h2>Prework</h2>
<p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p>
<ul>
<li>Command Line: Give your computer instructions like a real programmer</li>
<li>HTML: Learn the basic building blocks of the front-facing web</li>
<li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
<li>Git: Version control is a lifesaver</li>
<li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
<li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
<li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
</ul>
</section> element

element
<section>
<h2>Object-oriented Python and Beginner Django</h2>
<ul>
<li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
<li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
<li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
<li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
<li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
<li>Project: Build a Django application with user authentication and database storage</li>
</ul>
</section> element

element
<section>
<h2>Integrating JavaScript and Design</h2>
<ul>
<li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
<li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
<li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
<li>Using third-party APIs: Query external services like Google and Instagram</li>
<li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
<li>Project: Integrate front-end technologies for a more interactive Django application</li>
</ul>
</section> element

element
<section>
<h2>Expand Your Developer Toolkit</h2>
<ul>
<li>Pair programming</li>
<li>Git strategies</li>
<li>Test-driven development</li>
<li>HTTP lifecycle</li>
<li>Computer science topics</li>
<li>Introduction to dev ops</li>
<li>Analytics and error reporting</li>
<li>Project: Work in a group to build a test-driven Django application</li>
</ul>
</section> element

element
<section>
<h2>AngularJS and Building Custom APIs</h2>
<ul>
<li>Basics of AngularJS</li>
<li>Build a Basecamp clone with AngularJS</li>
<li>Building your own custom API with Django and Tastypie</li>
<li>Integrating Django with AngularJS</li>
<li>Final Project: Demonstrate mastery with Django and AngularJS</li>
</ul>
</section> element

element
<section>
<h2>Prepping for Life After Bootcamp</h2>
<ul>
<li>Interview Prep</li>
<li>Presentation Prep</li>
<li>Development ecosystem</li>
</ul>
<p><a href="#/2">Back to top</a></p>
</section> element

element

element
<h2>What you'll be learning</h2> element

element
<p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p> element

element
<ul>
<li><a href="#/2/1">Prework</a></li>
<li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
<li><a href="#/2/3">Integrating JavaScript and Design</a></li>
<li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
<li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
<li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
</ul> element

element

element
<h2>Prework</h2> element

element
<p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p> element

element
<ul>
<li>Command Line: Give your computer instructions like a real programmer</li>
<li>HTML: Learn the basic building blocks of the front-facing web</li>
<li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
<li>Git: Version control is a lifesaver</li>
<li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
<li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
<li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
</ul> element

element

element
<h2>Object-oriented Python and Beginner Django</h2> element

element
<ul>
<li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
<li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
<li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
<li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
<li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
<li>Project: Build a Django application with user authentication and database storage</li>
</ul> element

element

element
<h2>Integrating JavaScript and Design</h2> element

element
<ul>
<li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
<li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
<li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
<li>Using third-party APIs: Query external services like Google and Instagram</li>
<li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
<li>Project: Integrate front-end technologies for a more interactive Django application</li>
</ul> element

element

element
<h2>Expand Your Developer Toolkit</h2> element

element
<ul>
<li>Pair programming</li>
<li>Git strategies</li>
<li>Test-driven development</li>
<li>HTTP lifecycle</li>
<li>Computer science topics</li>
<li>Introduction to dev ops</li>
<li>Analytics and error reporting</li>
<li>Project: Work in a group to build a test-driven Django application</li>
</ul> element

element

element
<h2>AngularJS and Building Custom APIs</h2> element

element
<ul>
<li>Basics of AngularJS</li>
<li>Build a Basecamp clone with AngularJS</li>
<li>Building your own custom API with Django and Tastypie</li>
<li>Integrating Django with AngularJS</li>
<li>Final Project: Demonstrate mastery with Django and AngularJS</li>
</ul> element

element

element
<h2>Prepping for Life After Bootcamp</h2> element

element
<ul>
<li>Interview Prep</li>
<li>Presentation Prep</li>
<li>Development ecosystem</li>
</ul> element

element
<p><a href="#/2">Back to top</a></p> element

element
<section>
        <h2>What you'll be learning</h2>
        <p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p>
        <ul>
            <li><a href="#/2/1">Prework</a></li>
            <li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
            <li><a href="#/2/3">Integrating JavaScript and Design</a></li>
            <li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
            <li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
            <li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
        </ul>
    </section>
<section>
        <h2>Reading a File (Cont.)</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
                <li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
                <li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
                <li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="2">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p>
        <ul>
            <li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
            <li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
            <li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
            <li>Create new text files for testing out your function!</li>
        </ul>
    </section>

element
<section>
<h2>Writing a File</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
<li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
<li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Writing a File (Cont.)</h2>
<div class="col-4">
<br/>
<ul>
<li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Context Manager</h2>
<p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p>
<p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p>
<p>They are used to run certain functions before and after a block of code.</p>
<br/><br/>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
<li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
<li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p>
<p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p>
<div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div>
<p style="clear:both;"><br/>Will become</p>
<div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div>
<p style="clear:both"><br/>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p>
<div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div>
</section> element

element

element
<h2>Writing a File</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
<li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
<li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
</div>
</div> element

element

element
<h2>Writing a File (Cont.)</h2> element

element
<div class="col-4">
<br/>
<ul>
<li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
</div>
</div> element

element

element
<h2>Context Manager</h2> element

element
<p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p> element

element
<p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p> element

element
<p>They are used to run certain functions before and after a block of code.</p> element

element
<br/> element
<br/> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
<li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
<li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p> element

element
<p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p> element

element
<div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div> element

element
<p style="clear:both;"><br/>Will become</p> element

element
<div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div> element

element
<p style="clear:both"><br/>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p> element

element
<div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div> element

element
<section>
        <h2>Writing a File</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
                <li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
                <li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Prework</h2>
        <p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p>
        <ul>
            <li>Command Line: Give your computer instructions like a real programmer</li>
            <li>HTML: Learn the basic building blocks of the front-facing web</li>
            <li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
            <li>Git: Version control is a lifesaver</li>
            <li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
            <li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
            <li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
        </ul>
    </section>
<section>
        <h2>Object-oriented Python and Beginner Django</h2>
        <ul>
            <li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
            <li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
            <li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
            <li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
            <li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
            <li>Project: Build a Django application with user authentication and database storage</li>
        </ul>
    </section>
<section>
        <h2>Writing a File (Cont.)</h2>
        <div class="col-4">
            <br>
            <ul>
                <li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br><br><br><br><br></li>
                <li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br><br><br><br><br></li>
                <li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="3">
                <pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Context Manager</h2>
        <p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p>
        <p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p>
        <p>They are used to run certain functions before and after a block of code.</p>
        <br><br>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
                <li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
                <li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p>
        <p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p>
        <div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div>
        <p style="clear:both;"><br>Will become</p>
        <div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div>
        <p style="clear:both"><br>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p>
        <div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div>
    </section>
<section>
        <h2>Integrating JavaScript and Design</h2>
        <ul>
            <li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
            <li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
            <li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
            <li>Using third-party APIs: Query external services like Google and Instagram</li>
            <li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
            <li>Project: Integrate front-end technologies for a more interactive Django application</li>
        </ul>
    </section>
<section>
        <h2>Expand Your Developer Toolkit</h2>
        <ul>
            <li>Pair programming</li>
            <li>Git strategies</li>
            <li>Test-driven development</li>
            <li>HTTP lifecycle</li>
            <li>Computer science topics</li>
            <li>Introduction to dev ops</li>
            <li>Analytics and error reporting</li>
            <li>Project: Work in a group to build a test-driven Django application</li>
        </ul>
    </section>
<section>
        <h2>AngularJS and Building Custom APIs</h2>
        <ul>
            <li>Basics of AngularJS</li>
            <li>Build a Basecamp clone with AngularJS</li>
            <li>Building your own custom API with Django and Tastypie</li>
            <li>Integrating Django with AngularJS</li>
            <li>Final Project: Demonstrate mastery with Django and AngularJS</li>
        </ul>
    </section>
<section>
        <h2>Prepping for Life After Bootcamp</h2>
        <ul>
            <li>Interview Prep</li>
            <li>Presentation Prep</li>
            <li>Development ecosystem</li>
        </ul>
        <p><a href="#/2">Back to top</a></p>
    </section>
<section>
    <h2>More than an education</h2>
    <p>There are a lot of bootcamps out there. At RocketU, you'll be surrounded by the 170+ amazing tech startups at RocketSpace.</p>
    <br>
    <img src="/static/img/rocketspace-name-logo-large-300x116.png" id="rocketSpaceLogo">
</section>

element
<section>
<h2>A network of your own</h2>
<p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p>
</section> element

element
<section>
<h2>RocketSpace staff</h2>
</section> element

element
<section>
<h2>Your instructors</h2>
<h4>Yeti</h4>
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div>
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div>
<div class="footer">
</div>
</section> element

element
<h2>A network of your own</h2> element

element
<p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p> element

element

element
<h2>RocketSpace staff</h2> element

element

element
<h2>Your instructors</h2> element

element
<h4>Yeti</h4> element

element
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div> element

element
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div> element

element
<div class="footer">
</div> element

element

element
<h2>Your classmates</h2> element

element
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul> element

element
<p><a href="#/4">Back to top</a></p> element

element

element
<h2>Prove you can program.</h2> element

element
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p> element

element
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p> element

element
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul> element

element
<section>
        <h2>A network of your own</h2>
        <p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p>
    </section>
<section class="titleSlide" data-background="#168eae">
                    <h1>
    File Manipulation
</h1>
                    <a id="yetiLogo" href="http://www.yetihq.com/"><img src="/static/img/yeti-power.png"></a>
                </section>
<section>
    <h2>Brief Python History</h2>
    <p>Python is a scripting language, which means at its core it has a bunch of functionality built in for operations like file manipulation.</p>
    <ul>
        <li>Python was created by Guido van Rossum, Benevolant Dictator for Life (BDFL), in the late 1980's.</li>
        <li>Python has released major versions 1, 2, and 3</li>
        <li>Version 3 of python had some backwards incompatible changes with version 2, so they also created 2.6 and 2.7.</li>
        <li>Many people still use python 2.7 over 3, especially because major operating systems have not converted over yet.</li>
        <li>The community is still slowly making the transition from python 2 to 3 even though 3 was released in December 2008.</li>
        <li>2.7 will be the last release in the version 2 line, it was released in July 2010.</li>
    </ul>
</section>

element
<section>
<h2>Directories and Files</h2>
<p>Python has a library called <code>os</code> which contains scripting utility functions.</p>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br/><br/></li>
<li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br/><br/></li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">import os

print os.getcwd()</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="7">
<pre><code class="python">
print os.getcwd()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<ul>
<li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
<li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
</ul>
</section> element

element

element
<h2>Directories and Files</h2> element

element
<p>Python has a library called <code>os</code> which contains scripting utility functions.</p> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br/><br/></li>
<li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br/><br/></li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">import os

print os.getcwd()</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="7">
<pre><code class="python">
print os.getcwd()
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<ul>
<li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
<li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
</ul> element

element
<section>
        <h2>Directories and Files</h2>
        <p>Python has a library called <code>os</code> which contains scripting utility functions.</p>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br><br><br></li>
                <li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br><br><br></li>
                <li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br><br></li>
                <li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br><br></li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">import os

print os.getcwd()</code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="3">
                <pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="7">
                <pre><code class="python">
print os.getcwd()
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>RocketSpace staff</h2>
    </section>

element
<h2>Your instructors</h2> element

element
<h4>Yeti</h4> element

element
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div> element

element
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div> element

element
<div class="footer">
</div> element

element

element
<h2>Your classmates</h2> element

element
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul> element

element
<p><a href="#/4">Back to top</a></p> element

element

element
<h2>Prove you can program.</h2> element

element
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p> element

element
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p> element

element
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul> element

element
<section>
        <h2>Your classmates</h2>
        <ul>
            <li>A brain</li>
            <li>An athlete</li>
            <li>A basket case</li>
            <li>A princess</li>
            <li>And a criminal</li>
        </ul>
        <p><a href="#/4">Back to top</a></p>
    </section>
<section>
    <h2>Prove you can program.</h2>
    <p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
    <p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
    <ul>
        <li><a target="_blank" href="http://codingbat.com/python">Coding Bat</a></li>
        <li><a target="_blank" href="http://www.pythonchallenge.com/">Python Challenge</a></li>
        <li><a target="_blank" href="http://www.coderbyte.com/">Coderbyte</a></li>
    </ul>
</section>
<section>
        <h2>Do it Yourself</h2>
        <ul>
            <li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
            <li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
        </ul>
    </section>

element
<section>
<h2>Reading a File</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
<li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
<li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
<li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
<li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre>

Hello world!
Hello universe!
                </pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="4">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="6">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Reading a File (Cont.)</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
<li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
<li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
<li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="2">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p>
<ul>
<li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
<li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
<li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
<li>Create new text files for testing out your function!</li>
</ul>
</section> element

element

element
<h2>Reading a File</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
<li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
<li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
<li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
<li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre>

Hello world!
Hello universe!
                </pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="4">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="6">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
</div>
</div> element

element

element
<h2>Reading a File (Cont.)</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
<li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
<li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
<li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="2">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p> element

element
<ul>
<li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
<li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
<li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
<li>Create new text files for testing out your function!</li>
</ul> element

element
<section>
        <h2>Reading a File</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
                <li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
                <li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
                <li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
                <li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre>

Hello world!
Hello universe!
                </pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="4">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="6">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
            </div>
        </div>
    </section>
<section>
    <h2>Learn web development. Build awesome things.</h2>
    <p>
        You quit your job, you told your friends and family you're doing something crazy, maybe you moved here. You're ready to learn, intensively, for the next twelve weeks. By the time you're done, you'll be able to build pretty much anything you see on the internet.
    </p>
</section>

element
<section>
<h2>What you'll be learning</h2>
<p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p>
<ul>
<li><a href="#/2/1">Prework</a></li>
<li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
<li><a href="#/2/3">Integrating JavaScript and Design</a></li>
<li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
<li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
<li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
</ul>
</section> element

element
<section>
<h2>Prework</h2>
<p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p>
<ul>
<li>Command Line: Give your computer instructions like a real programmer</li>
<li>HTML: Learn the basic building blocks of the front-facing web</li>
<li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
<li>Git: Version control is a lifesaver</li>
<li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
<li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
<li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
</ul>
</section> element

element
<section>
<h2>Object-oriented Python and Beginner Django</h2>
<ul>
<li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
<li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
<li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
<li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
<li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
<li>Project: Build a Django application with user authentication and database storage</li>
</ul>
</section> element

element
<section>
<h2>Integrating JavaScript and Design</h2>
<ul>
<li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
<li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
<li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
<li>Using third-party APIs: Query external services like Google and Instagram</li>
<li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
<li>Project: Integrate front-end technologies for a more interactive Django application</li>
</ul>
</section> element

element
<section>
<h2>Expand Your Developer Toolkit</h2>
<ul>
<li>Pair programming</li>
<li>Git strategies</li>
<li>Test-driven development</li>
<li>HTTP lifecycle</li>
<li>Computer science topics</li>
<li>Introduction to dev ops</li>
<li>Analytics and error reporting</li>
<li>Project: Work in a group to build a test-driven Django application</li>
</ul>
</section> element

element
<section>
<h2>AngularJS and Building Custom APIs</h2>
<ul>
<li>Basics of AngularJS</li>
<li>Build a Basecamp clone with AngularJS</li>
<li>Building your own custom API with Django and Tastypie</li>
<li>Integrating Django with AngularJS</li>
<li>Final Project: Demonstrate mastery with Django and AngularJS</li>
</ul>
</section> element

element
<section>
<h2>Prepping for Life After Bootcamp</h2>
<ul>
<li>Interview Prep</li>
<li>Presentation Prep</li>
<li>Development ecosystem</li>
</ul>
<p><a href="#/2">Back to top</a></p>
</section> element

element

element
<h2>What you'll be learning</h2> element

element
<p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p> element

element
<ul>
<li><a href="#/2/1">Prework</a></li>
<li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
<li><a href="#/2/3">Integrating JavaScript and Design</a></li>
<li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
<li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
<li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
</ul> element

element

element
<h2>Prework</h2> element

element
<p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p> element

element
<ul>
<li>Command Line: Give your computer instructions like a real programmer</li>
<li>HTML: Learn the basic building blocks of the front-facing web</li>
<li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
<li>Git: Version control is a lifesaver</li>
<li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
<li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
<li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
</ul> element

element

element
<h2>Object-oriented Python and Beginner Django</h2> element

element
<ul>
<li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
<li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
<li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
<li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
<li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
<li>Project: Build a Django application with user authentication and database storage</li>
</ul> element

element

element
<h2>Integrating JavaScript and Design</h2> element

element
<ul>
<li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
<li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
<li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
<li>Using third-party APIs: Query external services like Google and Instagram</li>
<li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
<li>Project: Integrate front-end technologies for a more interactive Django application</li>
</ul> element

element

element
<h2>Expand Your Developer Toolkit</h2> element

element
<ul>
<li>Pair programming</li>
<li>Git strategies</li>
<li>Test-driven development</li>
<li>HTTP lifecycle</li>
<li>Computer science topics</li>
<li>Introduction to dev ops</li>
<li>Analytics and error reporting</li>
<li>Project: Work in a group to build a test-driven Django application</li>
</ul> element

element

element
<h2>AngularJS and Building Custom APIs</h2> element

element
<ul>
<li>Basics of AngularJS</li>
<li>Build a Basecamp clone with AngularJS</li>
<li>Building your own custom API with Django and Tastypie</li>
<li>Integrating Django with AngularJS</li>
<li>Final Project: Demonstrate mastery with Django and AngularJS</li>
</ul> element

element

element
<h2>Prepping for Life After Bootcamp</h2> element

element
<ul>
<li>Interview Prep</li>
<li>Presentation Prep</li>
<li>Development ecosystem</li>
</ul> element

element
<p><a href="#/2">Back to top</a></p> element

element
<section>
        <h2>What you'll be learning</h2>
        <p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p>
        <ul>
            <li><a href="#/2/1">Prework</a></li>
            <li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
            <li><a href="#/2/3">Integrating JavaScript and Design</a></li>
            <li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
            <li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
            <li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
        </ul>
    </section>
<section>
        <h2>Reading a File (Cont.)</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
                <li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
                <li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
                <li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="2">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p>
        <ul>
            <li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
            <li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
            <li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
            <li>Create new text files for testing out your function!</li>
        </ul>
    </section>

element
<section>
<h2>Writing a File</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
<li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
<li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Writing a File (Cont.)</h2>
<div class="col-4">
<br/>
<ul>
<li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Context Manager</h2>
<p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p>
<p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p>
<p>They are used to run certain functions before and after a block of code.</p>
<br/><br/>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
<li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
<li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p>
<p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p>
<div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div>
<p style="clear:both;"><br/>Will become</p>
<div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div>
<p style="clear:both"><br/>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p>
<div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div>
</section> element

element

element
<h2>Writing a File</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
<li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
<li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
</div>
</div> element

element

element
<h2>Writing a File (Cont.)</h2> element

element
<div class="col-4">
<br/>
<ul>
<li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
</div>
</div> element

element

element
<h2>Context Manager</h2> element

element
<p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p> element

element
<p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p> element

element
<p>They are used to run certain functions before and after a block of code.</p> element

element
<br/> element
<br/> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
<li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
<li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p> element

element
<p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p> element

element
<div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div> element

element
<p style="clear:both;"><br/>Will become</p> element

element
<div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div> element

element
<p style="clear:both"><br/>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p> element

element
<div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div> element

element
<section>
        <h2>Writing a File</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
                <li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
                <li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Prework</h2>
        <p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p>
        <ul>
            <li>Command Line: Give your computer instructions like a real programmer</li>
            <li>HTML: Learn the basic building blocks of the front-facing web</li>
            <li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
            <li>Git: Version control is a lifesaver</li>
            <li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
            <li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
            <li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
        </ul>
    </section>
<section>
        <h2>Object-oriented Python and Beginner Django</h2>
        <ul>
            <li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
            <li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
            <li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
            <li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
            <li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
            <li>Project: Build a Django application with user authentication and database storage</li>
        </ul>
    </section>
<section>
        <h2>Integrating JavaScript and Design</h2>
        <ul>
            <li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
            <li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
            <li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
            <li>Using third-party APIs: Query external services like Google and Instagram</li>
            <li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
            <li>Project: Integrate front-end technologies for a more interactive Django application</li>
        </ul>
    </section>
<section>
        <h2>Expand Your Developer Toolkit</h2>
        <ul>
            <li>Pair programming</li>
            <li>Git strategies</li>
            <li>Test-driven development</li>
            <li>HTTP lifecycle</li>
            <li>Computer science topics</li>
            <li>Introduction to dev ops</li>
            <li>Analytics and error reporting</li>
            <li>Project: Work in a group to build a test-driven Django application</li>
        </ul>
    </section>
<section>
        <h2>Writing a File (Cont.)</h2>
        <div class="col-4">
            <br>
            <ul>
                <li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br><br><br><br><br></li>
                <li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br><br><br><br><br></li>
                <li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="3">
                <pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Context Manager</h2>
        <p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p>
        <p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p>
        <p>They are used to run certain functions before and after a block of code.</p>
        <br><br>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
                <li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
                <li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>AngularJS and Building Custom APIs</h2>
        <ul>
            <li>Basics of AngularJS</li>
            <li>Build a Basecamp clone with AngularJS</li>
            <li>Building your own custom API with Django and Tastypie</li>
            <li>Integrating Django with AngularJS</li>
            <li>Final Project: Demonstrate mastery with Django and AngularJS</li>
        </ul>
    </section>
<section>
        <h2>Prepping for Life After Bootcamp</h2>
        <ul>
            <li>Interview Prep</li>
            <li>Presentation Prep</li>
            <li>Development ecosystem</li>
        </ul>
        <p><a href="#/2">Back to top</a></p>
    </section>
<section>
    <h2>More than an education</h2>
    <p>There are a lot of bootcamps out there. At RocketU, you'll be surrounded by the 170+ amazing tech startups at RocketSpace.</p>
    <br>
    <img src="/static/img/rocketspace-name-logo-large-300x116.png" id="rocketSpaceLogo">
</section>

element
<section>
<h2>A network of your own</h2>
<p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p>
</section> element

element
<section>
<h2>RocketSpace staff</h2>
</section> element

element
<section>
<h2>Your instructors</h2>
<h4>Yeti</h4>
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div>
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div>
<div class="footer">
</div>
</section> element

element
<h2>A network of your own</h2> element

element
<p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p> element

element

element
<h2>RocketSpace staff</h2> element

element

element
<h2>Your instructors</h2> element

element
<h4>Yeti</h4> element

element
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div> element

element
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div> element

element
<div class="footer">
</div> element

element

element
<h2>Your classmates</h2> element

element
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul> element

element
<p><a href="#/4">Back to top</a></p> element

element

element
<h2>Prove you can program.</h2> element

element
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p> element

element
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p> element

element
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul> element

element
<section>
        <h2>A network of your own</h2>
        <p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p>
        <p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p>
        <div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div>
        <p style="clear:both;"><br>Will become</p>
        <div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div>
        <p style="clear:both"><br>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p>
        <div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div>
    </section>
<section class="titleSlide" data-background="#168eae">
                    <h1>
    File Manipulation
</h1>
                    <a id="yetiLogo" href="http://www.yetihq.com/"><img src="/static/img/yeti-power.png"></a>
                </section>
<section>
    <h2>Brief Python History</h2>
    <p>Python is a scripting language, which means at its core it has a bunch of functionality built in for operations like file manipulation.</p>
    <ul>
        <li>Python was created by Guido van Rossum, Benevolant Dictator for Life (BDFL), in the late 1980's.</li>
        <li>Python has released major versions 1, 2, and 3</li>
        <li>Version 3 of python had some backwards incompatible changes with version 2, so they also created 2.6 and 2.7.</li>
        <li>Many people still use python 2.7 over 3, especially because major operating systems have not converted over yet.</li>
        <li>The community is still slowly making the transition from python 2 to 3 even though 3 was released in December 2008.</li>
        <li>2.7 will be the last release in the version 2 line, it was released in July 2010.</li>
    </ul>
</section>

element
<section>
<h2>Directories and Files</h2>
<p>Python has a library called <code>os</code> which contains scripting utility functions.</p>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br/><br/></li>
<li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br/><br/></li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">import os

print os.getcwd()</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="7">
<pre><code class="python">
print os.getcwd()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<ul>
<li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
<li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
</ul>
</section> element

element

element
<h2>Directories and Files</h2> element

element
<p>Python has a library called <code>os</code> which contains scripting utility functions.</p> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br/><br/></li>
<li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br/><br/></li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">import os

print os.getcwd()</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="7">
<pre><code class="python">
print os.getcwd()
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<ul>
<li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
<li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
</ul> element

element
<section>
        <h2>Directories and Files</h2>
        <p>Python has a library called <code>os</code> which contains scripting utility functions.</p>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">First let's try out getting the name of the current directory in with <code>os.getcwd()</code>.<br><br><br></li>
                <li class="fragment" data-fragment-index="2">Then let's make a new directory using <code>os.mkdir</code>.<br><br><br></li>
                <li class="fragment" data-fragment-index="4">Now we'll change directory into the new directory we just created using <code>os.chdir</code><br><br></li>
                <li class="fragment" data-fragment-index="6">Finally, let's check to make sure we're now in that new directory we created.<br><br></li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">import os

print os.getcwd()</code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="3">
                <pre><code class="python">
os.mkdir("mydirectory")
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
os.chdir("mydirectory")
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="7">
                <pre><code class="python">
print os.getcwd()
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>RocketSpace staff</h2>
    </section>

element
<h2>Your instructors</h2> element

element
<h4>Yeti</h4> element

element
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div> element

element
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div> element

element
<div class="footer">
</div> element

element

element
<h2>Your classmates</h2> element

element
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul> element

element
<p><a href="#/4">Back to top</a></p> element

element

element
<h2>Prove you can program.</h2> element

element
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p> element

element
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p> element

element
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul> element

element
<section>
        <h2>Your classmates</h2>
        <ul>
            <li>A brain</li>
            <li>An athlete</li>
            <li>A basket case</li>
            <li>A princess</li>
            <li>And a criminal</li>
        </ul>
        <p><a href="#/4">Back to top</a></p>
    </section>
<section>
    <h2>Prove you can program.</h2>
    <p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
    <p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
    <ul>
        <li><a target="_blank" href="http://codingbat.com/python">Coding Bat</a></li>
        <li><a target="_blank" href="http://www.pythonchallenge.com/">Python Challenge</a></li>
        <li><a target="_blank" href="http://www.coderbyte.com/">Coderbyte</a></li>
    </ul>
</section>
<section>
        <h2>Do it Yourself</h2>
        <ul>
            <li>Create a function, <code>create_directories</code> that takes in a list of directory names and creates a new directory for each in the list.</li>
            <li>Create another function, <code>create_nested_directories</code>, which takes in a list of directory names and creates each new directory inside of the last one.</li>
        </ul>
    </section>

element
<section>
<h2>Reading a File</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
<li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
<li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
<li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
<li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre>

Hello world!
Hello universe!
                </pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="4">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="6">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Reading a File (Cont.)</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
<li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
<li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
<li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="2">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p>
<ul>
<li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
<li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
<li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
<li>Create new text files for testing out your function!</li>
</ul>
</section> element

element

element
<h2>Reading a File</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
<li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
<li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
<li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
<li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre>

Hello world!
Hello universe!
                </pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="4">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="6">
<pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
</div>
</div> element

element

element
<h2>Reading a File (Cont.)</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
<li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
<li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
<li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="2">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
</div>
<br/><br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p> element

element
<ul>
<li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
<li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
<li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
<li>Create new text files for testing out your function!</li>
</ul> element

element
<section>
        <h2>Reading a File</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">First, let's create a text file in your folder using a text editor called <code>hello_world.txt</code>.</li>
                <li class="fragment" data-fragment-index="2">Put these two lines in your text file.</li>
                <li class="fragment" data-fragment-index="3">Let's open this file with our python, you'll notice we use a function called <code>open</code>. We pass it 'r' to read this file.</li>
                <li class="fragment" data-fragment-index="5">We can use the <code>read</code> function to specify how many characters we'd like to read from the file or just get the whole file as a string.</li>
                <li class="fragment" data-fragment-index="7">We can use <code>readline()</code> or <code>readlines()</code> to get one line at a time or a list of all lines.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre>

Hello world!
Hello universe!
                </pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="4">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
file.read(5)  # returns hello
file.read()   # returns the whole file as a string
                </code></pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="6">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
file.readline()   # returns 'Hello world!\n'
file.readlines()  # returns ['Hello world!\n', 'Hello universe!\n']
                </code></pre>
            </div>
        </div>
    </section>
<section>
    <h2>Learn web development. Build awesome things.</h2>
    <p>
        You quit your job, you told your friends and family you're doing something crazy, maybe you moved here. You're ready to learn, intensively, for the next twelve weeks. By the time you're done, you'll be able to build pretty much anything you see on the internet.
    </p>
</section>

element
<section>
<h2>What you'll be learning</h2>
<p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p>
<ul>
<li><a href="#/2/1">Prework</a></li>
<li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
<li><a href="#/2/3">Integrating JavaScript and Design</a></li>
<li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
<li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
<li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
</ul>
</section> element

element
<section>
<h2>Prework</h2>
<p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p>
<ul>
<li>Command Line: Give your computer instructions like a real programmer</li>
<li>HTML: Learn the basic building blocks of the front-facing web</li>
<li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
<li>Git: Version control is a lifesaver</li>
<li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
<li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
<li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
</ul>
</section> element

element
<section>
<h2>Object-oriented Python and Beginner Django</h2>
<ul>
<li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
<li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
<li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
<li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
<li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
<li>Project: Build a Django application with user authentication and database storage</li>
</ul>
</section> element

element
<section>
<h2>Integrating JavaScript and Design</h2>
<ul>
<li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
<li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
<li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
<li>Using third-party APIs: Query external services like Google and Instagram</li>
<li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
<li>Project: Integrate front-end technologies for a more interactive Django application</li>
</ul>
</section> element

element
<section>
<h2>Expand Your Developer Toolkit</h2>
<ul>
<li>Pair programming</li>
<li>Git strategies</li>
<li>Test-driven development</li>
<li>HTTP lifecycle</li>
<li>Computer science topics</li>
<li>Introduction to dev ops</li>
<li>Analytics and error reporting</li>
<li>Project: Work in a group to build a test-driven Django application</li>
</ul>
</section> element

element
<section>
<h2>AngularJS and Building Custom APIs</h2>
<ul>
<li>Basics of AngularJS</li>
<li>Build a Basecamp clone with AngularJS</li>
<li>Building your own custom API with Django and Tastypie</li>
<li>Integrating Django with AngularJS</li>
<li>Final Project: Demonstrate mastery with Django and AngularJS</li>
</ul>
</section> element

element
<section>
<h2>Prepping for Life After Bootcamp</h2>
<ul>
<li>Interview Prep</li>
<li>Presentation Prep</li>
<li>Development ecosystem</li>
</ul>
<p><a href="#/2">Back to top</a></p>
</section> element

element

element
<h2>What you'll be learning</h2> element

element
<p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p> element

element
<ul>
<li><a href="#/2/1">Prework</a></li>
<li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
<li><a href="#/2/3">Integrating JavaScript and Design</a></li>
<li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
<li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
<li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
</ul> element

element

element
<h2>Prework</h2> element

element
<p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p> element

element
<ul>
<li>Command Line: Give your computer instructions like a real programmer</li>
<li>HTML: Learn the basic building blocks of the front-facing web</li>
<li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
<li>Git: Version control is a lifesaver</li>
<li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
<li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
<li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
</ul> element

element

element
<h2>Object-oriented Python and Beginner Django</h2> element

element
<ul>
<li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
<li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
<li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
<li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
<li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
<li>Project: Build a Django application with user authentication and database storage</li>
</ul> element

element

element
<h2>Integrating JavaScript and Design</h2> element

element
<ul>
<li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
<li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
<li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
<li>Using third-party APIs: Query external services like Google and Instagram</li>
<li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
<li>Project: Integrate front-end technologies for a more interactive Django application</li>
</ul> element

element

element
<h2>Expand Your Developer Toolkit</h2> element

element
<ul>
<li>Pair programming</li>
<li>Git strategies</li>
<li>Test-driven development</li>
<li>HTTP lifecycle</li>
<li>Computer science topics</li>
<li>Introduction to dev ops</li>
<li>Analytics and error reporting</li>
<li>Project: Work in a group to build a test-driven Django application</li>
</ul> element

element

element
<h2>AngularJS and Building Custom APIs</h2> element

element
<ul>
<li>Basics of AngularJS</li>
<li>Build a Basecamp clone with AngularJS</li>
<li>Building your own custom API with Django and Tastypie</li>
<li>Integrating Django with AngularJS</li>
<li>Final Project: Demonstrate mastery with Django and AngularJS</li>
</ul> element

element

element
<h2>Prepping for Life After Bootcamp</h2> element

element
<ul>
<li>Interview Prep</li>
<li>Presentation Prep</li>
<li>Development ecosystem</li>
</ul> element

element
<p><a href="#/2">Back to top</a></p> element

element
<section>
        <h2>What you'll be learning</h2>
        <p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p>
        <ul>
            <li><a href="#/2/1">Prework</a></li>
            <li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
            <li><a href="#/2/3">Integrating JavaScript and Design</a></li>
            <li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
            <li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
            <li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
        </ul>
    </section>
<section>
        <h2>Reading a File (Cont.)</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">When reading through a file, it is most common to loop over every line and do something appropriately with that line.</li>
                <li class="fragment" data-fragment-index="1">This logically makes sense, and is usually more efficient than reading in every line of a file at a time.</li>
                <li class="fragment" data-fragment-index="3">Our <code>file</code> object is also iterable, so we can just loop over every line it.</li>
                <li class="fragment" data-fragment-index="4">We can then manipulate that line, however we would like to.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="2">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line

# Returns
# Hello world!

# Hello universe!
                </code></pre>
            </div>
            <br><br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
file = open('hello_world.txt', 'r')
for line in file:
    print line.upper()

# Returns
# HELLO WORLD!

# HELLO UNIVERSE!
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <p>Let's create a function <code>find_words</code>, which takes in the path to a file, reads that file and returns a list of every word in the file.</p>
        <ul>
            <li>We can 'find' words by just looking for whitespace in the lines of the text file.</li>
            <li>At first, the result of the function will be ['Hello', 'world!\n', 'Hello', 'universe!\n']</li>
            <li>If you finish, try to also remove any punctuation or newline characters and have no duplicate words.</li>
            <li>Create new text files for testing out your function!</li>
        </ul>
    </section>

element
<section>
<h2>Writing a File</h2>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
<li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
<li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Writing a File (Cont.)</h2>
<div class="col-4">
<br/>
<ul>
<li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Context Manager</h2>
<p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p>
<p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p>
<p>They are used to run certain functions before and after a block of code.</p>
<br/><br/>
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
<li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
<li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
</ul>
</div>
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
</div>
</div>
</section> element

element
<section>
<h2>Do it Yourself</h2>
<p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p>
<p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p>
<div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div>
<p style="clear:both;"><br/>Will become</p>
<div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div>
<p style="clear:both"><br/>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p>
<div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div>
</section> element

element

element
<h2>Writing a File</h2> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
<li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
<li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
</div>
</div> element

element

element
<h2>Writing a File (Cont.)</h2> element

element
<div class="col-4">
<br/>
<ul>
<li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br/><br/><br/><br/><br/></li>
<li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="3">
<pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
</div>
<br/>
<div class="fragment" data-fragment-index="5">
<pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
</div>
</div> element

element

element
<h2>Context Manager</h2> element

element
<p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p> element

element
<p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p> element

element
<p>They are used to run certain functions before and after a block of code.</p> element

element
<br/> element
<br/> element

element
<div class="col-4">
<ul>
<li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
<li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
<li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
</ul>
</div> element

element
<div class="col-7 col-offset-1">
<div class="fragment" data-fragment-index="1">
<pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
</div>
</div> element

element

element
<h2>Do it Yourself</h2> element

element
<p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p> element

element
<p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p> element

element
<div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div> element

element
<p style="clear:both;"><br/>Will become</p> element

element
<div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div> element

element
<p style="clear:both"><br/>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p> element

element
<div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div> element

element
<section>
        <h2>Writing a File</h2>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">This time we <code>open</code> the file but instead we use <code>w</code> so we can write to it.</li>
                <li class="fragment" data-fragment-index="2">We use <code>write</code> to print to the file. Notice we use <code>\n</code> to create newlines in the file.</li>
                <li class="fragment" data-fragment-index="3">When we're done we need to <code>close</code> the file.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">
file = open('hello_world.txt', 'w')
file.write('Hello world!\n')
file.write('Hello universe!\n')
file.close()
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Prework</h2>
        <p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p>
        <ul>
            <li>Command Line: Give your computer instructions like a real programmer</li>
            <li>HTML: Learn the basic building blocks of the front-facing web</li>
            <li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
            <li>Git: Version control is a lifesaver</li>
            <li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
            <li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
            <li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
        </ul>
    </section>
<section>
        <h2>Object-oriented Python and Beginner Django</h2>
        <ul>
            <li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
            <li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
            <li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
            <li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
            <li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
            <li>Project: Build a Django application with user authentication and database storage</li>
        </ul>
    </section>
<section>
        <h2>Integrating JavaScript and Design</h2>
        <ul>
            <li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
            <li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
            <li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
            <li>Using third-party APIs: Query external services like Google and Instagram</li>
            <li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
            <li>Project: Integrate front-end technologies for a more interactive Django application</li>
        </ul>
    </section>
<section>
        <h2>Writing a File (Cont.)</h2>
        <div class="col-4">
            <br>
            <ul>
                <li class="fragment" data-fragment-index="0">Let's say we have a list of lines we'd like to write to a file.<br><br><br><br><br></li>
                <li class="fragment" data-fragment-index="2">We can loop over each line and write them to the file.<br><br><br><br><br></li>
                <li class="fragment" data-fragment-index="4">We could also just use <code>writelines</code> which will write a list of strings to a file.</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code class="python">lines = [
    'First line\n',
    'Second line\n',
    'Third line\n'
]</code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="3">
                <pre><code class="python">
file = open('script.txt', 'w')
for line in lines:
    file.write(line)
file.close()
                </code></pre>
            </div>
            <br>
            <div class="fragment" data-fragment-index="5">
                <pre><code class="python">
file = open('script.txt', 'w')
file.writelines(lines)
file.close()
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Context Manager</h2>
        <p>Opening our file and closing it is a very common task. Python's created a context manager to handle this automatically for us.</p>
        <p>Context managers are also know as "with" statements and are written as <code>with x as y</code>.</p>
        <p>They are used to run certain functions before and after a block of code.</p>
        <br><br>
        <div class="col-4">
            <ul>
                <li class="fragment" data-fragment-index="0">Here's how we'd rewrite our file writing examples.</li>
                <li class="fragment" data-fragment-index="2">The "with" statement takes care of closing our file after this block of code has finished.</li>
                <li class="fragment" data-fragment-index="3">This also is less code and much cleaner!</li>
            </ul>
        </div>
        <div class="col-7 col-offset-1">
            <div class="fragment" data-fragment-index="1">
                <pre><code>
with open('script.txt', 'w') as file:
    file.writelines(lines)
                </code></pre>
            </div>
        </div>
    </section>
<section>
        <h2>Expand Your Developer Toolkit</h2>
        <ul>
            <li>Pair programming</li>
            <li>Git strategies</li>
            <li>Test-driven development</li>
            <li>HTTP lifecycle</li>
            <li>Computer science topics</li>
            <li>Introduction to dev ops</li>
            <li>Analytics and error reporting</li>
            <li>Project: Work in a group to build a test-driven Django application</li>
        </ul>
    </section>
<section>
        <h2>AngularJS and Building Custom APIs</h2>
        <ul>
            <li>Basics of AngularJS</li>
            <li>Build a Basecamp clone with AngularJS</li>
            <li>Building your own custom API with Django and Tastypie</li>
            <li>Integrating Django with AngularJS</li>
            <li>Final Project: Demonstrate mastery with Django and AngularJS</li>
        </ul>
    </section>
<section>
        <h2>Prepping for Life After Bootcamp</h2>
        <ul>
            <li>Interview Prep</li>
            <li>Presentation Prep</li>
            <li>Development ecosystem</li>
        </ul>
        <p><a href="#/2">Back to top</a></p>
    </section>
<section>
    <h2>More than an education</h2>
    <p>There are a lot of bootcamps out there. At RocketU, you'll be surrounded by the 170+ amazing tech startups at RocketSpace.</p>
    <br>
    <img src="/static/img/rocketspace-name-logo-large-300x116.png" id="rocketSpaceLogo">
</section>

element
<section>
<h2>A network of your own</h2>
<p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p>
</section> element

element
<section>
<h2>RocketSpace staff</h2>
</section> element

element
<section>
<h2>Your instructors</h2>
<h4>Yeti</h4>
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div>
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div>
<div class="footer">
</div>
</section> element

element
<h2>A network of your own</h2> element

element
<p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p> element

element

element
<h2>RocketSpace staff</h2> element

element

element
<h2>Your instructors</h2> element

element
<h4>Yeti</h4> element

element
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div> element

element
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div> element

element
<div class="footer">
</div> element

element

element
<h2>Your classmates</h2> element

element
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul> element

element
<p><a href="#/4">Back to top</a></p> element

element

element
<h2>Prove you can program.</h2> element

element
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p> element

element
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p> element

element
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul> element

element
<section>
        <h2>A network of your own</h2>
        <p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p>
    </section>
<section>
        <h2>Do it Yourself</h2>
        <p>Let's try to read in a file, manipulate it, and write it back out to a new file.</p>
        <p>The task is to take in a file, and write everything in it out to a new file, while reversing the order of every word on each line.</p>
        <div class="col-4"><pre>

This is an example text file.
It should have its order reversed.
        </pre></div>
        <p style="clear:both;"><br>Will become</p>
        <div class="col-4"><pre>

file. text example an is This
reversed. order its have should It
        </pre></div>
        <p style="clear:both"><br>For bonus, place the periods at the end of the line and capitalize on the first word of each line.</p>
        <div class="col-4"><pre>

File text example an is this.
Reversed order its have should it.
        </pre></div>
    </section>
<section>
        <h2>RocketSpace staff</h2>
    </section>

element
<h2>Your instructors</h2> element

element
<h4>Yeti</h4> element

element
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div> element

element
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div> element

element
<div class="footer">
</div> element

element

element
<h2>Your classmates</h2> element

element
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul> element

element
<p><a href="#/4">Back to top</a></p> element

element

element
<h2>Prove you can program.</h2> element

element
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p> element

element
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p> element

element
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul> element

element
<section>
        <h2>Your classmates</h2>
        <ul>
            <li>A brain</li>
            <li>An athlete</li>
            <li>A basket case</li>
            <li>A princess</li>
            <li>And a criminal</li>
        </ul>
        <p><a href="#/4">Back to top</a></p>
    </section>
<section>
    <h2>Prove you can program.</h2>
    <p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
    <p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
    <ul>
        <li><a target="_blank" href="http://codingbat.com/python">Coding Bat</a></li>
        <li><a target="_blank" href="http://www.pythonchallenge.com/">Python Challenge</a></li>
        <li><a target="_blank" href="http://www.coderbyte.com/">Coderbyte</a></li>
    </ul>
</section>
<section>
    <h2>Learn web development. Build awesome things.</h2>
    <p>
        You quit your job, you told your friends and family you're doing something crazy, maybe you moved here. You're ready to learn, intensively, for the next twelve weeks. By the time you're done, you'll be able to build pretty much anything you see on the internet.
    </p>
</section>

element
<section>
<h2>What you'll be learning</h2>
<p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p>
<ul>
<li><a href="#/2/1">Prework</a></li>
<li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
<li><a href="#/2/3">Integrating JavaScript and Design</a></li>
<li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
<li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
<li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
</ul>
</section> element

element
<section>
<h2>Prework</h2>
<p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p>
<ul>
<li>Command Line: Give your computer instructions like a real programmer</li>
<li>HTML: Learn the basic building blocks of the front-facing web</li>
<li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
<li>Git: Version control is a lifesaver</li>
<li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
<li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
<li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
</ul>
</section> element

element
<section>
<h2>Object-oriented Python and Beginner Django</h2>
<ul>
<li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
<li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
<li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
<li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
<li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
<li>Project: Build a Django application with user authentication and database storage</li>
</ul>
</section> element

element
<section>
<h2>Integrating JavaScript and Design</h2>
<ul>
<li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
<li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
<li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
<li>Using third-party APIs: Query external services like Google and Instagram</li>
<li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
<li>Project: Integrate front-end technologies for a more interactive Django application</li>
</ul>
</section> element

element
<section>
<h2>Expand Your Developer Toolkit</h2>
<ul>
<li>Pair programming</li>
<li>Git strategies</li>
<li>Test-driven development</li>
<li>HTTP lifecycle</li>
<li>Computer science topics</li>
<li>Introduction to dev ops</li>
<li>Analytics and error reporting</li>
<li>Project: Work in a group to build a test-driven Django application</li>
</ul>
</section> element

element
<section>
<h2>AngularJS and Building Custom APIs</h2>
<ul>
<li>Basics of AngularJS</li>
<li>Build a Basecamp clone with AngularJS</li>
<li>Building your own custom API with Django and Tastypie</li>
<li>Integrating Django with AngularJS</li>
<li>Final Project: Demonstrate mastery with Django and AngularJS</li>
</ul>
</section> element

element
<section>
<h2>Prepping for Life After Bootcamp</h2>
<ul>
<li>Interview Prep</li>
<li>Presentation Prep</li>
<li>Development ecosystem</li>
</ul>
<p><a href="#/2">Back to top</a></p>
</section> element

element

element
<h2>What you'll be learning</h2> element

element
<p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p> element

element
<ul>
<li><a href="#/2/1">Prework</a></li>
<li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
<li><a href="#/2/3">Integrating JavaScript and Design</a></li>
<li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
<li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
<li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
</ul> element

element

element
<h2>Prework</h2> element

element
<p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p> element

element
<ul>
<li>Command Line: Give your computer instructions like a real programmer</li>
<li>HTML: Learn the basic building blocks of the front-facing web</li>
<li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
<li>Git: Version control is a lifesaver</li>
<li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
<li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
<li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
</ul> element

element

element
<h2>Object-oriented Python and Beginner Django</h2> element

element
<ul>
<li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
<li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
<li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
<li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
<li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
<li>Project: Build a Django application with user authentication and database storage</li>
</ul> element

element

element
<h2>Integrating JavaScript and Design</h2> element

element
<ul>
<li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
<li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
<li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
<li>Using third-party APIs: Query external services like Google and Instagram</li>
<li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
<li>Project: Integrate front-end technologies for a more interactive Django application</li>
</ul> element

element

element
<h2>Expand Your Developer Toolkit</h2> element

element
<ul>
<li>Pair programming</li>
<li>Git strategies</li>
<li>Test-driven development</li>
<li>HTTP lifecycle</li>
<li>Computer science topics</li>
<li>Introduction to dev ops</li>
<li>Analytics and error reporting</li>
<li>Project: Work in a group to build a test-driven Django application</li>
</ul> element

element

element
<h2>AngularJS and Building Custom APIs</h2> element

element
<ul>
<li>Basics of AngularJS</li>
<li>Build a Basecamp clone with AngularJS</li>
<li>Building your own custom API with Django and Tastypie</li>
<li>Integrating Django with AngularJS</li>
<li>Final Project: Demonstrate mastery with Django and AngularJS</li>
</ul> element

element

element
<h2>Prepping for Life After Bootcamp</h2> element

element
<ul>
<li>Interview Prep</li>
<li>Presentation Prep</li>
<li>Development ecosystem</li>
</ul> element

element
<p><a href="#/2">Back to top</a></p> element

element
<section>
        <h2>What you'll be learning</h2>
        <p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p>
        <ul>
            <li><a href="#/2/1">Prework</a></li>
            <li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
            <li><a href="#/2/3">Integrating JavaScript and Design</a></li>
            <li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
            <li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
            <li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
        </ul>
    </section>
<section>
        <h2>Prework</h2>
        <p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p>
        <ul>
            <li>Command Line: Give your computer instructions like a real programmer</li>
            <li>HTML: Learn the basic building blocks of the front-facing web</li>
            <li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
            <li>Git: Version control is a lifesaver</li>
            <li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
            <li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
            <li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
        </ul>
    </section>
<section>
        <h2>Object-oriented Python and Beginner Django</h2>
        <ul>
            <li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
            <li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
            <li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
            <li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
            <li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
            <li>Project: Build a Django application with user authentication and database storage</li>
        </ul>
    </section>
<section>
        <h2>Integrating JavaScript and Design</h2>
        <ul>
            <li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
            <li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
            <li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
            <li>Using third-party APIs: Query external services like Google and Instagram</li>
            <li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
            <li>Project: Integrate front-end technologies for a more interactive Django application</li>
        </ul>
    </section>
<section>
        <h2>Expand Your Developer Toolkit</h2>
        <ul>
            <li>Pair programming</li>
            <li>Git strategies</li>
            <li>Test-driven development</li>
            <li>HTTP lifecycle</li>
            <li>Computer science topics</li>
            <li>Introduction to dev ops</li>
            <li>Analytics and error reporting</li>
            <li>Project: Work in a group to build a test-driven Django application</li>
        </ul>
    </section>
<section>
        <h2>AngularJS and Building Custom APIs</h2>
        <ul>
            <li>Basics of AngularJS</li>
            <li>Build a Basecamp clone with AngularJS</li>
            <li>Building your own custom API with Django and Tastypie</li>
            <li>Integrating Django with AngularJS</li>
            <li>Final Project: Demonstrate mastery with Django and AngularJS</li>
        </ul>
    </section>
<section>
        <h2>Prepping for Life After Bootcamp</h2>
        <ul>
            <li>Interview Prep</li>
            <li>Presentation Prep</li>
            <li>Development ecosystem</li>
        </ul>
        <p><a href="#/2">Back to top</a></p>
    </section>
<section>
    <h2>More than an education</h2>
    <p>There are a lot of bootcamps out there. At RocketU, you'll be surrounded by the 170+ amazing tech startups at RocketSpace.</p>
    <br>
    <img src="/static/img/rocketspace-name-logo-large-300x116.png" id="rocketSpaceLogo">
</section>

element
<section>
<h2>A network of your own</h2>
<p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p>
</section> element

element
<section>
<h2>RocketSpace staff</h2>
</section> element

element
<section>
<h2>Your instructors</h2>
<h4>Yeti</h4>
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div>
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div>
<div class="footer">
</div>
</section> element

element
<h2>A network of your own</h2> element

element
<p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p> element

element

element
<h2>RocketSpace staff</h2> element

element

element
<h2>Your instructors</h2> element

element
<h4>Yeti</h4> element

element
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div> element

element
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div> element

element
<div class="footer">
</div> element

element

element
<h2>Your classmates</h2> element

element
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul> element

element
<p><a href="#/4">Back to top</a></p> element

element

element
<h2>Prove you can program.</h2> element

element
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p> element

element
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p> element

element
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul> element

element
<section>
        <h2>A network of your own</h2>
        <p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p>
    </section>
<section>
        <h2>RocketSpace staff</h2>
    </section>

element
<h2>Your instructors</h2> element

element
<h4>Yeti</h4> element

element
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div> element

element
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div> element

element
<div class="footer">
</div> element

element

element
<h2>Your classmates</h2> element

element
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul> element

element
<p><a href="#/4">Back to top</a></p> element

element

element
<h2>Prove you can program.</h2> element

element
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p> element

element
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p> element

element
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul> element

element
<section>
        <h2>Your classmates</h2>
        <ul>
            <li>A brain</li>
            <li>An athlete</li>
            <li>A basket case</li>
            <li>A princess</li>
            <li>And a criminal</li>
        </ul>
        <p><a href="#/4">Back to top</a></p>
    </section>
<section>
    <h2>Prove you can program.</h2>
    <p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
    <p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
    <ul>
        <li><a target="_blank" href="http://codingbat.com/python">Coding Bat</a></li>
        <li><a target="_blank" href="http://www.pythonchallenge.com/">Python Challenge</a></li>
        <li><a target="_blank" href="http://www.coderbyte.com/">Coderbyte</a></li>
    </ul>
</section>
<section>
    <h2>Learn web development. Build awesome things.</h2>
    <p>
        You quit your job, you told your friends and family you're doing something crazy, maybe you moved here. You're ready to learn, intensively, for the next twelve weeks. By the time you're done, you'll be able to build pretty much anything you see on the internet.
    </p>
</section>

element
<section>
<h2>What you'll be learning</h2>
<p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p>
<ul>
<li><a href="#/2/1">Prework</a></li>
<li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
<li><a href="#/2/3">Integrating JavaScript and Design</a></li>
<li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
<li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
<li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
</ul>
</section> element

element
<section>
<h2>Prework</h2>
<p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p>
<ul>
<li>Command Line: Give your computer instructions like a real programmer</li>
<li>HTML: Learn the basic building blocks of the front-facing web</li>
<li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
<li>Git: Version control is a lifesaver</li>
<li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
<li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
<li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
</ul>
</section> element

element
<section>
<h2>Object-oriented Python and Beginner Django</h2>
<ul>
<li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
<li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
<li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
<li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
<li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
<li>Project: Build a Django application with user authentication and database storage</li>
</ul>
</section> element

element
<section>
<h2>Integrating JavaScript and Design</h2>
<ul>
<li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
<li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
<li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
<li>Using third-party APIs: Query external services like Google and Instagram</li>
<li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
<li>Project: Integrate front-end technologies for a more interactive Django application</li>
</ul>
</section> element

element
<section>
<h2>Expand Your Developer Toolkit</h2>
<ul>
<li>Pair programming</li>
<li>Git strategies</li>
<li>Test-driven development</li>
<li>HTTP lifecycle</li>
<li>Computer science topics</li>
<li>Introduction to dev ops</li>
<li>Analytics and error reporting</li>
<li>Project: Work in a group to build a test-driven Django application</li>
</ul>
</section> element

element
<section>
<h2>AngularJS and Building Custom APIs</h2>
<ul>
<li>Basics of AngularJS</li>
<li>Build a Basecamp clone with AngularJS</li>
<li>Building your own custom API with Django and Tastypie</li>
<li>Integrating Django with AngularJS</li>
<li>Final Project: Demonstrate mastery with Django and AngularJS</li>
</ul>
</section> element

element
<section>
<h2>Prepping for Life After Bootcamp</h2>
<ul>
<li>Interview Prep</li>
<li>Presentation Prep</li>
<li>Development ecosystem</li>
</ul>
<p><a href="#/2">Back to top</a></p>
</section> element

element

element
<h2>What you'll be learning</h2> element

element
<p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p> element

element
<ul>
<li><a href="#/2/1">Prework</a></li>
<li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
<li><a href="#/2/3">Integrating JavaScript and Design</a></li>
<li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
<li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
<li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
</ul> element

element

element
<h2>Prework</h2> element

element
<p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p> element

element
<ul>
<li>Command Line: Give your computer instructions like a real programmer</li>
<li>HTML: Learn the basic building blocks of the front-facing web</li>
<li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
<li>Git: Version control is a lifesaver</li>
<li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
<li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
<li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
</ul> element

element

element
<h2>Object-oriented Python and Beginner Django</h2> element

element
<ul>
<li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
<li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
<li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
<li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
<li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
<li>Project: Build a Django application with user authentication and database storage</li>
</ul> element

element

element
<h2>Integrating JavaScript and Design</h2> element

element
<ul>
<li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
<li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
<li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
<li>Using third-party APIs: Query external services like Google and Instagram</li>
<li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
<li>Project: Integrate front-end technologies for a more interactive Django application</li>
</ul> element

element

element
<h2>Expand Your Developer Toolkit</h2> element

element
<ul>
<li>Pair programming</li>
<li>Git strategies</li>
<li>Test-driven development</li>
<li>HTTP lifecycle</li>
<li>Computer science topics</li>
<li>Introduction to dev ops</li>
<li>Analytics and error reporting</li>
<li>Project: Work in a group to build a test-driven Django application</li>
</ul> element

element

element
<h2>AngularJS and Building Custom APIs</h2> element

element
<ul>
<li>Basics of AngularJS</li>
<li>Build a Basecamp clone with AngularJS</li>
<li>Building your own custom API with Django and Tastypie</li>
<li>Integrating Django with AngularJS</li>
<li>Final Project: Demonstrate mastery with Django and AngularJS</li>
</ul> element

element

element
<h2>Prepping for Life After Bootcamp</h2> element

element
<ul>
<li>Interview Prep</li>
<li>Presentation Prep</li>
<li>Development ecosystem</li>
</ul> element

element
<p><a href="#/2">Back to top</a></p> element

element
<section>
        <h2>What you'll be learning</h2>
        <p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p>
        <ul>
            <li><a href="#/2/1">Prework</a></li>
            <li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
            <li><a href="#/2/3">Integrating JavaScript and Design</a></li>
            <li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
            <li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
            <li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
        </ul>
    </section>
<section>
        <h2>Prework</h2>
        <p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p>
        <ul>
            <li>Command Line: Give your computer instructions like a real programmer</li>
            <li>HTML: Learn the basic building blocks of the front-facing web</li>
            <li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
            <li>Git: Version control is a lifesaver</li>
            <li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
            <li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
            <li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
        </ul>
    </section>
<section>
        <h2>Object-oriented Python and Beginner Django</h2>
        <ul>
            <li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
            <li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
            <li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
            <li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
            <li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
            <li>Project: Build a Django application with user authentication and database storage</li>
        </ul>
    </section>
<section>
        <h2>Integrating JavaScript and Design</h2>
        <ul>
            <li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
            <li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
            <li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
            <li>Using third-party APIs: Query external services like Google and Instagram</li>
            <li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
            <li>Project: Integrate front-end technologies for a more interactive Django application</li>
        </ul>
    </section>
<section>
        <h2>Expand Your Developer Toolkit</h2>
        <ul>
            <li>Pair programming</li>
            <li>Git strategies</li>
            <li>Test-driven development</li>
            <li>HTTP lifecycle</li>
            <li>Computer science topics</li>
            <li>Introduction to dev ops</li>
            <li>Analytics and error reporting</li>
            <li>Project: Work in a group to build a test-driven Django application</li>
        </ul>
    </section>
<section>
        <h2>AngularJS and Building Custom APIs</h2>
        <ul>
            <li>Basics of AngularJS</li>
            <li>Build a Basecamp clone with AngularJS</li>
            <li>Building your own custom API with Django and Tastypie</li>
            <li>Integrating Django with AngularJS</li>
            <li>Final Project: Demonstrate mastery with Django and AngularJS</li>
        </ul>
    </section>
<section>
        <h2>Prepping for Life After Bootcamp</h2>
        <ul>
            <li>Interview Prep</li>
            <li>Presentation Prep</li>
            <li>Development ecosystem</li>
        </ul>
        <p><a href="#/2">Back to top</a></p>
    </section>
<section>
    <h2>More than an education</h2>
    <p>There are a lot of bootcamps out there. At RocketU, you'll be surrounded by the 170+ amazing tech startups at RocketSpace.</p>
    <br>
    <img src="/static/img/rocketspace-name-logo-large-300x116.png" id="rocketSpaceLogo">
</section>

element
<section>
<h2>A network of your own</h2>
<p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p>
</section> element

element
<section>
<h2>RocketSpace staff</h2>
</section> element

element
<section>
<h2>Your instructors</h2>
<h4>Yeti</h4>
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div>
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div>
<div class="footer">
</div>
</section> element

element
<h2>A network of your own</h2> element

element
<p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p> element

element

element
<h2>RocketSpace staff</h2> element

element

element
<h2>Your instructors</h2> element

element
<h4>Yeti</h4> element

element
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div> element

element
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div> element

element
<div class="footer">
</div> element

element

element
<h2>Your classmates</h2> element

element
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul> element

element
<p><a href="#/4">Back to top</a></p> element

element

element
<h2>Prove you can program.</h2> element

element
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p> element

element
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p> element

element
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul> element

element
<section>
        <h2>A network of your own</h2>
        <p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p>
    </section>
<section>
        <h2>RocketSpace staff</h2>
    </section>

element
<h2>Your instructors</h2> element

element
<h4>Yeti</h4> element

element
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div> element

element
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div> element

element
<div class="footer">
</div> element

element

element
<h2>Your classmates</h2> element

element
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul> element

element
<p><a href="#/4">Back to top</a></p> element

element

element
<h2>Prove you can program.</h2> element

element
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p> element

element
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p> element

element
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul> element

element
<section>
        <h2>Your classmates</h2>
        <ul>
            <li>A brain</li>
            <li>An athlete</li>
            <li>A basket case</li>
            <li>A princess</li>
            <li>And a criminal</li>
        </ul>
        <p><a href="#/4">Back to top</a></p>
    </section>
<section>
    <h2>Prove you can program.</h2>
    <p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
    <p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
    <ul>
        <li><a target="_blank" href="http://codingbat.com/python">Coding Bat</a></li>
        <li><a target="_blank" href="http://www.pythonchallenge.com/">Python Challenge</a></li>
        <li><a target="_blank" href="http://www.coderbyte.com/">Coderbyte</a></li>
    </ul>
</section>
<section>
    <h2>Learn web development. Build awesome things.</h2>
    <p>
        You quit your job, you told your friends and family you're doing something crazy, maybe you moved here. You're ready to learn, intensively, for the next twelve weeks. By the time you're done, you'll be able to build pretty much anything you see on the internet.
    </p>
</section>

element
<section>
<h2>What you'll be learning</h2>
<p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p>
<ul>
<li><a href="#/2/1">Prework</a></li>
<li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
<li><a href="#/2/3">Integrating JavaScript and Design</a></li>
<li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
<li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
<li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
</ul>
</section> element

element
<section>
<h2>Prework</h2>
<p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p>
<ul>
<li>Command Line: Give your computer instructions like a real programmer</li>
<li>HTML: Learn the basic building blocks of the front-facing web</li>
<li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
<li>Git: Version control is a lifesaver</li>
<li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
<li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
<li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
</ul>
</section> element

element
<section>
<h2>Object-oriented Python and Beginner Django</h2>
<ul>
<li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
<li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
<li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
<li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
<li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
<li>Project: Build a Django application with user authentication and database storage</li>
</ul>
</section> element

element
<section>
<h2>Integrating JavaScript and Design</h2>
<ul>
<li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
<li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
<li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
<li>Using third-party APIs: Query external services like Google and Instagram</li>
<li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
<li>Project: Integrate front-end technologies for a more interactive Django application</li>
</ul>
</section> element

element
<section>
<h2>Expand Your Developer Toolkit</h2>
<ul>
<li>Pair programming</li>
<li>Git strategies</li>
<li>Test-driven development</li>
<li>HTTP lifecycle</li>
<li>Computer science topics</li>
<li>Introduction to dev ops</li>
<li>Analytics and error reporting</li>
<li>Project: Work in a group to build a test-driven Django application</li>
</ul>
</section> element

element
<section>
<h2>AngularJS and Building Custom APIs</h2>
<ul>
<li>Basics of AngularJS</li>
<li>Build a Basecamp clone with AngularJS</li>
<li>Building your own custom API with Django and Tastypie</li>
<li>Integrating Django with AngularJS</li>
<li>Final Project: Demonstrate mastery with Django and AngularJS</li>
</ul>
</section> element

element
<section>
<h2>Prepping for Life After Bootcamp</h2>
<ul>
<li>Interview Prep</li>
<li>Presentation Prep</li>
<li>Development ecosystem</li>
</ul>
<p><a href="#/2">Back to top</a></p>
</section> element

element

element
<h2>What you'll be learning</h2> element

element
<p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p> element

element
<ul>
<li><a href="#/2/1">Prework</a></li>
<li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
<li><a href="#/2/3">Integrating JavaScript and Design</a></li>
<li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
<li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
<li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
</ul> element

element

element
<h2>Prework</h2> element

element
<p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p> element

element
<ul>
<li>Command Line: Give your computer instructions like a real programmer</li>
<li>HTML: Learn the basic building blocks of the front-facing web</li>
<li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
<li>Git: Version control is a lifesaver</li>
<li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
<li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
<li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
</ul> element

element

element
<h2>Object-oriented Python and Beginner Django</h2> element

element
<ul>
<li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
<li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
<li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
<li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
<li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
<li>Project: Build a Django application with user authentication and database storage</li>
</ul> element

element

element
<h2>Integrating JavaScript and Design</h2> element

element
<ul>
<li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
<li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
<li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
<li>Using third-party APIs: Query external services like Google and Instagram</li>
<li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
<li>Project: Integrate front-end technologies for a more interactive Django application</li>
</ul> element

element

element
<h2>Expand Your Developer Toolkit</h2> element

element
<ul>
<li>Pair programming</li>
<li>Git strategies</li>
<li>Test-driven development</li>
<li>HTTP lifecycle</li>
<li>Computer science topics</li>
<li>Introduction to dev ops</li>
<li>Analytics and error reporting</li>
<li>Project: Work in a group to build a test-driven Django application</li>
</ul> element

element

element
<h2>AngularJS and Building Custom APIs</h2> element

element
<ul>
<li>Basics of AngularJS</li>
<li>Build a Basecamp clone with AngularJS</li>
<li>Building your own custom API with Django and Tastypie</li>
<li>Integrating Django with AngularJS</li>
<li>Final Project: Demonstrate mastery with Django and AngularJS</li>
</ul> element

element

element
<h2>Prepping for Life After Bootcamp</h2> element

element
<ul>
<li>Interview Prep</li>
<li>Presentation Prep</li>
<li>Development ecosystem</li>
</ul> element

element
<p><a href="#/2">Back to top</a></p> element

element
<section>
        <h2>What you'll be learning</h2>
        <p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p>
        <ul>
            <li><a href="#/2/1">Prework</a></li>
            <li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
            <li><a href="#/2/3">Integrating JavaScript and Design</a></li>
            <li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
            <li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
            <li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
        </ul>
    </section>
<section>
        <h2>Prework</h2>
        <p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p>
        <ul>
            <li>Command Line: Give your computer instructions like a real programmer</li>
            <li>HTML: Learn the basic building blocks of the front-facing web</li>
            <li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
            <li>Git: Version control is a lifesaver</li>
            <li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
            <li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
            <li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
        </ul>
    </section>
<section>
        <h2>Object-oriented Python and Beginner Django</h2>
        <ul>
            <li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
            <li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
            <li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
            <li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
            <li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
            <li>Project: Build a Django application with user authentication and database storage</li>
        </ul>
    </section>
<section>
        <h2>Integrating JavaScript and Design</h2>
        <ul>
            <li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
            <li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
            <li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
            <li>Using third-party APIs: Query external services like Google and Instagram</li>
            <li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
            <li>Project: Integrate front-end technologies for a more interactive Django application</li>
        </ul>
    </section>
<section>
        <h2>Expand Your Developer Toolkit</h2>
        <ul>
            <li>Pair programming</li>
            <li>Git strategies</li>
            <li>Test-driven development</li>
            <li>HTTP lifecycle</li>
            <li>Computer science topics</li>
            <li>Introduction to dev ops</li>
            <li>Analytics and error reporting</li>
            <li>Project: Work in a group to build a test-driven Django application</li>
        </ul>
    </section>
<section>
        <h2>AngularJS and Building Custom APIs</h2>
        <ul>
            <li>Basics of AngularJS</li>
            <li>Build a Basecamp clone with AngularJS</li>
            <li>Building your own custom API with Django and Tastypie</li>
            <li>Integrating Django with AngularJS</li>
            <li>Final Project: Demonstrate mastery with Django and AngularJS</li>
        </ul>
    </section>
<section>
        <h2>Prepping for Life After Bootcamp</h2>
        <ul>
            <li>Interview Prep</li>
            <li>Presentation Prep</li>
            <li>Development ecosystem</li>
        </ul>
        <p><a href="#/2">Back to top</a></p>
    </section>
<section>
    <h2>More than an education</h2>
    <p>There are a lot of bootcamps out there. At RocketU, you'll be surrounded by the 170+ amazing tech startups at RocketSpace.</p>
    <br>
    <img src="/static/img/rocketspace-name-logo-large-300x116.png" id="rocketSpaceLogo">
</section>

element
<section>
<h2>A network of your own</h2>
<p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p>
</section> element

element
<section>
<h2>RocketSpace staff</h2>
</section> element

element
<section>
<h2>Your instructors</h2>
<h4>Yeti</h4>
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div>
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div>
<div class="footer">
</div>
</section> element

element
<h2>A network of your own</h2> element

element
<p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p> element

element

element
<h2>RocketSpace staff</h2> element

element

element
<h2>Your instructors</h2> element

element
<h4>Yeti</h4> element

element
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div> element

element
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div> element

element
<div class="footer">
</div> element

element

element
<h2>Your classmates</h2> element

element
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul> element

element
<p><a href="#/4">Back to top</a></p> element

element

element
<h2>Prove you can program.</h2> element

element
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p> element

element
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p> element

element
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul> element

element
<section>
        <h2>A network of your own</h2>
        <p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p>
    </section>
<section>
        <h2>RocketSpace staff</h2>
    </section>

element
<h2>Your instructors</h2> element

element
<h4>Yeti</h4> element

element
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div> element

element
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div> element

element
<div class="footer">
</div> element

element

element
<h2>Your classmates</h2> element

element
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul> element

element
<p><a href="#/4">Back to top</a></p> element

element

element
<h2>Prove you can program.</h2> element

element
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p> element

element
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p> element

element
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul> element

element
<section>
        <h2>Your classmates</h2>
        <ul>
            <li>A brain</li>
            <li>An athlete</li>
            <li>A basket case</li>
            <li>A princess</li>
            <li>And a criminal</li>
        </ul>
        <p><a href="#/4">Back to top</a></p>
    </section>
<section>
    <h2>Prove you can program.</h2>
    <p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
    <p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
    <ul>
        <li><a target="_blank" href="http://codingbat.com/python">Coding Bat</a></li>
        <li><a target="_blank" href="http://www.pythonchallenge.com/">Python Challenge</a></li>
        <li><a target="_blank" href="http://www.coderbyte.com/">Coderbyte</a></li>
    </ul>
</section>
<section>
    <h2>Learn web development. Build awesome things.</h2>
    <p>
        You quit your job, you told your friends and family you're doing something crazy, maybe you moved here. You're ready to learn, intensively, for the next twelve weeks. By the time you're done, you'll be able to build pretty much anything you see on the internet.
    </p>
</section>

element
<section>
<h2>What you'll be learning</h2>
<p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p>
<ul>
<li><a href="#/2/1">Prework</a></li>
<li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
<li><a href="#/2/3">Integrating JavaScript and Design</a></li>
<li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
<li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
<li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
</ul>
</section> element

element
<section>
<h2>Prework</h2>
<p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p>
<ul>
<li>Command Line: Give your computer instructions like a real programmer</li>
<li>HTML: Learn the basic building blocks of the front-facing web</li>
<li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
<li>Git: Version control is a lifesaver</li>
<li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
<li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
<li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
</ul>
</section> element

element
<section>
<h2>Object-oriented Python and Beginner Django</h2>
<ul>
<li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
<li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
<li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
<li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
<li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
<li>Project: Build a Django application with user authentication and database storage</li>
</ul>
</section> element

element
<section>
<h2>Integrating JavaScript and Design</h2>
<ul>
<li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
<li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
<li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
<li>Using third-party APIs: Query external services like Google and Instagram</li>
<li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
<li>Project: Integrate front-end technologies for a more interactive Django application</li>
</ul>
</section> element

element
<section>
<h2>Expand Your Developer Toolkit</h2>
<ul>
<li>Pair programming</li>
<li>Git strategies</li>
<li>Test-driven development</li>
<li>HTTP lifecycle</li>
<li>Computer science topics</li>
<li>Introduction to dev ops</li>
<li>Analytics and error reporting</li>
<li>Project: Work in a group to build a test-driven Django application</li>
</ul>
</section> element

element
<section>
<h2>AngularJS and Building Custom APIs</h2>
<ul>
<li>Basics of AngularJS</li>
<li>Build a Basecamp clone with AngularJS</li>
<li>Building your own custom API with Django and Tastypie</li>
<li>Integrating Django with AngularJS</li>
<li>Final Project: Demonstrate mastery with Django and AngularJS</li>
</ul>
</section> element

element
<section>
<h2>Prepping for Life After Bootcamp</h2>
<ul>
<li>Interview Prep</li>
<li>Presentation Prep</li>
<li>Development ecosystem</li>
</ul>
<p><a href="#/2">Back to top</a></p>
</section> element

element

element
<h2>What you'll be learning</h2> element

element
<p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p> element

element
<ul>
<li><a href="#/2/1">Prework</a></li>
<li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
<li><a href="#/2/3">Integrating JavaScript and Design</a></li>
<li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
<li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
<li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
</ul> element

element

element
<h2>Prework</h2> element

element
<p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p> element

element
<ul>
<li>Command Line: Give your computer instructions like a real programmer</li>
<li>HTML: Learn the basic building blocks of the front-facing web</li>
<li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
<li>Git: Version control is a lifesaver</li>
<li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
<li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
<li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
</ul> element

element

element
<h2>Object-oriented Python and Beginner Django</h2> element

element
<ul>
<li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
<li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
<li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
<li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
<li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
<li>Project: Build a Django application with user authentication and database storage</li>
</ul> element

element

element
<h2>Integrating JavaScript and Design</h2> element

element
<ul>
<li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
<li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
<li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
<li>Using third-party APIs: Query external services like Google and Instagram</li>
<li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
<li>Project: Integrate front-end technologies for a more interactive Django application</li>
</ul> element

element

element
<h2>Expand Your Developer Toolkit</h2> element

element
<ul>
<li>Pair programming</li>
<li>Git strategies</li>
<li>Test-driven development</li>
<li>HTTP lifecycle</li>
<li>Computer science topics</li>
<li>Introduction to dev ops</li>
<li>Analytics and error reporting</li>
<li>Project: Work in a group to build a test-driven Django application</li>
</ul> element

element

element
<h2>AngularJS and Building Custom APIs</h2> element

element
<ul>
<li>Basics of AngularJS</li>
<li>Build a Basecamp clone with AngularJS</li>
<li>Building your own custom API with Django and Tastypie</li>
<li>Integrating Django with AngularJS</li>
<li>Final Project: Demonstrate mastery with Django and AngularJS</li>
</ul> element

element

element
<h2>Prepping for Life After Bootcamp</h2> element

element
<ul>
<li>Interview Prep</li>
<li>Presentation Prep</li>
<li>Development ecosystem</li>
</ul> element

element
<p><a href="#/2">Back to top</a></p> element

element
<section>
        <h2>What you'll be learning</h2>
        <p>When you leave you'll be full-fledged web developers able to contribute immediately to a team from front-end to back-end. We've broken your learning into a few modules to help get you there.</p>
        <ul>
            <li><a href="#/2/1">Prework</a></li>
            <li><a href="#/2/2">Object-Oriented Python and Beginner Django</a></li>
            <li><a href="#/2/3">Integrating JavaScript and Design</a></li>
            <li><a href="#/2/4">Expand Your Developer Toolkit</a></li>
            <li><a href="#/2/5">AngularJS and Building Custom APIs</a></li>
            <li><a href="#/2/6">Prepping for Life After Bootcamp</a></li>
        </ul>
    </section>
<section>
        <h2>Prework</h2>
        <p>Get the foundations under your belt so we can hit the ground running. We'll point you in the right direction to take all the confusion out of learning on your own. Don't worry, we'll keep building on these skills during the course and teach you best practices.</p>
        <ul>
            <li>Command Line: Give your computer instructions like a real programmer</li>
            <li>HTML: Learn the basic building blocks of the front-facing web</li>
            <li>CSS: Start understanding separation of concerns and building beautiful web sites with CSS</li>
            <li>Git: Version control is a lifesaver</li>
            <li>Basic functional Python: Write your first Python programs with variables, loops, functions, and conditional statements</li>
            <li>Project: Build your personal website: Give your friends (and yourself) a taste of what you'll be working on by building your personal website. This will eventually turn into the portfolio site you use to show off your future projects</li>
            <li>Installfest: Come meet your instructors and fellow bootcampers and make sure your computer is set up for the next twelve weeks</li>
        </ul>
    </section>
<section>
        <h2>Object-oriented Python and Beginner Django</h2>
        <ul>
            <li>Object-oriented Python: Solidify the Python concepts you learned during your prework. Learn about object-oriented vs. functional programming, instantiating new objects, and debugging your Python code.</li>
            <li>Intermediate Python: Become a Pythonista. Learn about inheritance, mixins, metaclasses, and decorators</li>
            <li>Relational databases and introductory SQL: Understand the value of relational dataabases and learn basic SQL</li>
            <li>Django ORM: Combine your knowledge of Python classes and databases to build relational models and manipulate a database with the Django ORM (object-relational mapper)</li>
            <li>Beginner Django: Learn about MVC (model-view-controller), the software pattern behind Django, Rails, and much of modern web development. Build applications that have multiple models and use Django's advanced templating system. Learn how user authentication works and how to include it in your apps.</li>
            <li>Project: Build a Django application with user authentication and database storage</li>
        </ul>
    </section>
<section>
        <h2>Integrating JavaScript and Design</h2>
        <ul>
            <li>JavaScript and jQuery: Leverage your Python programming knowledge and learn JavaScript syntax. Manipulate the DOM with pure JavaScript. Use jQuery to supercharge your JavaScript, add animations, and build interactive web pages.</li>
            <li>AJAX, JSON, and XML: Send asynchronous server requests to make your sites faster and bring in content from third-party applications</li>
            <li>Integrating JavaScript with your Django applications: Take your Django apps to the next level with interactive JavaScript</li>
            <li>Using third-party APIs: Query external services like Google and Instagram</li>
            <li>Responsive design principles and using Bootstrap: Learn basic design principles to give you apps polish. Understand grids and the responsive patterns that allow a single site to live on desktop, tablet, and mobile. Learn Bootstrap, the responsive library that powers much of the internet.</li>
            <li>Project: Integrate front-end technologies for a more interactive Django application</li>
        </ul>
    </section>
<section>
        <h2>Expand Your Developer Toolkit</h2>
        <ul>
            <li>Pair programming</li>
            <li>Git strategies</li>
            <li>Test-driven development</li>
            <li>HTTP lifecycle</li>
            <li>Computer science topics</li>
            <li>Introduction to dev ops</li>
            <li>Analytics and error reporting</li>
            <li>Project: Work in a group to build a test-driven Django application</li>
        </ul>
    </section>
<section>
        <h2>AngularJS and Building Custom APIs</h2>
        <ul>
            <li>Basics of AngularJS</li>
            <li>Build a Basecamp clone with AngularJS</li>
            <li>Building your own custom API with Django and Tastypie</li>
            <li>Integrating Django with AngularJS</li>
            <li>Final Project: Demonstrate mastery with Django and AngularJS</li>
        </ul>
    </section>
<section>
        <h2>Prepping for Life After Bootcamp</h2>
        <ul>
            <li>Interview Prep</li>
            <li>Presentation Prep</li>
            <li>Development ecosystem</li>
        </ul>
        <p><a href="#/2">Back to top</a></p>
    </section>
<section>
    <h2>More than an education</h2>
    <p>There are a lot of bootcamps out there. At RocketU, you'll be surrounded by the 170+ amazing tech startups at RocketSpace.</p>
    <br>
    <img src="/static/img/rocketspace-name-logo-large-300x116.png" id="rocketSpaceLogo">
</section>

element
<section>
<h2>A network of your own</h2>
<p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p>
</section> element

element
<section>
<h2>RocketSpace staff</h2>
</section> element

element
<section>
<h2>Your instructors</h2>
<h4>Yeti</h4>
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div>
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div>
<div class="footer">
</div>
</section> element

element
<h2>A network of your own</h2> element

element
<p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p> element

element

element
<h2>RocketSpace staff</h2> element

element

element
<h2>Your instructors</h2> element

element
<h4>Yeti</h4> element

element
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div> element

element
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div> element

element
<div class="footer">
</div> element

element

element
<h2>Your classmates</h2> element

element
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul> element

element
<p><a href="#/4">Back to top</a></p> element

element

element
<h2>Prove you can program.</h2> element

element
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p> element

element
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p> element

element
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul> element

element
<section>
        <h2>A network of your own</h2>
        <p>
            RocketSpace will open its network to you, but the most important connections you'll make during your bootcamp time will be the people you're with. You're all here to build and to change your lives. Get ready to spend a lot of time with these people.
        </p>
    </section>
<section>
        <h2>RocketSpace staff</h2>
    </section>

element
<h2>Your instructors</h2> element

element
<h4>Yeti</h4> element

element
<div>
<ul>
<li><a href="http://www.yetihq.com/company/#companyPictures" target="_blank">yetihq.com</a></li>
<li>Web applications</li>
<li>Native mobile applications</li>
<li>Designers, developers, strategists</li>
</ul>
</div> element

element
<div class="col-8 col-offset-2">
<img src="/static/img/presentations/logos.png"/>
<section>
<h2>Your classmates</h2>
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul>
<p><a href="#/4">Back to top</a></p>
</section>
<!-- To see speaker notes, hit 's' on your keyboard -->
<aside class="notes">
        This slide will change per class (locations, instructors, etc.). Would be great if classmates list linked out to the personal websites everyone is supposed to make.
    </aside>
<section>
<h2>Prove you can program.</h2>
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul>
</section>
</div> element

element
<div class="footer">
</div> element

element

element
<h2>Your classmates</h2> element

element
<ul>
<li>A brain</li>
<li>An athlete</li>
<li>A basket case</li>
<li>A princess</li>
<li>And a criminal</li>
</ul> element

element
<p><a href="#/4">Back to top</a></p> element

element

element
<h2>Prove you can program.</h2> element

element
<p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p> element

element
<p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p> element

element
<ul>
<li><a href="http://codingbat.com/python" target="_blank">Coding Bat</a></li>
<li><a href="http://www.pythonchallenge.com/" target="_blank">Python Challenge</a></li>
<li><a href="http://www.coderbyte.com/" target="_blank">Coderbyte</a></li>
</ul> element

element
<section>
        <h2>Your classmates</h2>
        <ul>
            <li>A brain</li>
            <li>An athlete</li>
            <li>A basket case</li>
            <li>A princess</li>
            <li>And a criminal</li>
        </ul>
        <p><a href="#/4">Back to top</a></p>
    </section>
<section>
    <h2>Prove you can program.</h2>
    <p>
        First things first: let's make sure everyone is comfortable with the Python prework you did. Instead of a boring review lecture, try out these challenge problems. They range from easy to difficult and will test you on variables, loops, data structures, conditionals, and functions. They can be pretty fun, and they are similar to questions you might be asked in an interview. These types of problems are often referred to as "FizzBuzz", after one of the best known ones (you'll know it when you see it).
    </p>
    <p>
        Do not look up solutions online! But feel free to use the internet to refresh yourself on Python syntax or built-in methods. Don't let yourself get stuck on a single question. See how far you can get with these:
    </p>
    <ul>
        <li><a target="_blank" href="http://codingbat.com/python">Coding Bat</a></li>
        <li><a target="_blank" href="http://www.pythonchallenge.com/">Python Challenge</a></li>
        <li><a target="_blank" href="http://www.coderbyte.com/">Coderbyte</a></li>
    </ul>
</section>
